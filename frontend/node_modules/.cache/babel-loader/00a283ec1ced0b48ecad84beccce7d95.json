{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport classnames from 'classnames';\nimport { IHookContribution, ManaSyringe } from '@antv/xflow-core';\nimport { IGraphProvider } from '@antv/xflow-core';\nimport { ACTIVE_NODE_PORT, NsPortEvent } from '../interface';\nimport { DisposableCollection, IModelContribution, Disposable } from '@antv/xflow-core';\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nvar NodePortTooltipContribution = /*#__PURE__*/function () {\n  function NodePortTooltipContribution() {\n    var _this = this;\n\n    _classCallCheck(this, NodePortTooltipContribution);\n\n    this.toDispose = new DisposableCollection();\n    /** 获取画布实例 */\n\n    this.getGraphInstance = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var graphInstance, graphConfig;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graphInstance = _context.sent;\n                _context.next = 5;\n                return this.graphProvider.getGraphOptions();\n\n              case 5:\n                graphConfig = _context.sent;\n                return _context.abrupt(\"return\", {\n                  graph: graphInstance,\n                  config: graphConfig\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n    /** 获取GraphOptions */\n\n\n    this.getPortRenderConfig = function () {\n      var dagOptions = {\n        onPortRendered: function onPortRendered(portRenderedArgs) {\n          /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n          var graph = this;\n          var port = portRenderedArgs.port,\n              node = portRenderedArgs.node;\n          var contentSelectors = portRenderedArgs.contentSelectors;\n          var portContainer = contentSelectors && contentSelectors['xflow-port-group'];\n\n          if (portContainer instanceof Element) {\n            portContainer.setAttribute('class', classnames('xflow-port-group', {\n              connected: port.connected && port.group !== 'out',\n              groupPort: (node === null || node === void 0 ? void 0 : node.isGroup) && (node === null || node === void 0 ? void 0 : node.isGroup())\n            }));\n            portContainer.addEventListener('mouseenter', function (e) {\n              var eventArgs = {\n                e: e,\n                portId: port.id,\n                nodeId: node.id,\n                portData: port,\n                nodeData: node.getData(),\n                tooltip: port.tooltip,\n                placement: port.group\n              };\n              graph.trigger(NsPortEvent.MOUSE_ENTER, eventArgs);\n            });\n            portContainer.addEventListener('mouseleave', function (e) {\n              var eventArgs = {\n                e: e,\n                portId: port.id,\n                nodeId: node.id,\n                portData: port,\n                nodeData: node.getData(),\n                tooltip: port.tooltip,\n                placement: port.group\n              };\n              graph.trigger(NsPortEvent.MOUSE_LEAVE, eventArgs);\n            });\n          }\n        }\n      };\n      return dagOptions;\n    };\n\n    this.registerHookHub = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", Disposable.create(function () {}));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    };\n\n    this.registerHook = function (hooks) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var toDispose, disposables;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                toDispose = new DisposableCollection();\n                disposables = [hooks.graphOptions.registerHook({\n                  name: 'add onPortRendered options ',\n                  handler: function handler(args) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              Object.assign(args, this.getPortRenderConfig());\n\n                            case 1:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3, this);\n                    }));\n                  }\n                })];\n                toDispose.pushAll(disposables);\n                return _context4.abrupt(\"return\", Disposable.create(function () {}));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    };\n  }\n\n  _createClass(NodePortTooltipContribution, [{\n    key: \"registerModel\",\n    value: function registerModel(registry) {\n      var _this3 = this;\n\n      registry.registerModel({\n        id: ACTIVE_NODE_PORT.id,\n        watchChange: function watchChange(self) {\n          return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n            var _yield$this$getGraphI, graph, config, calcPosition, onMouseEnter, onMouseLeave;\n\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI = _context5.sent;\n                    graph = _yield$this$getGraphI.graph;\n                    config = _yield$this$getGraphI.config;\n\n                    calcPosition = function calcPosition(e) {\n                      var _e$target$getBounding = e.target.getBoundingClientRect(),\n                          x = _e$target$getBounding.x,\n                          y = _e$target$getBounding.y,\n                          width = _e$target$getBounding.width,\n                          height = _e$target$getBounding.height;\n\n                      var clientRect = config.rootContainer.getBoundingClientRect();\n                      var position = {\n                        x: x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0) + width / 2,\n                        y: y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0) + height / 2\n                      };\n                      return position;\n                    };\n\n                    onMouseEnter = function onMouseEnter(args) {\n                      self.setValue(Object.assign(Object.assign({}, args), {\n                        position: calcPosition(args.e)\n                      }));\n                    };\n\n                    onMouseLeave = function onMouseLeave() {\n                      self.setValue(null);\n                    };\n                    /** 绑定事件 */\n\n\n                    graph.on(NsPortEvent.MOUSE_ENTER, onMouseEnter);\n                    graph.on(NsPortEvent.MOUSE_LEAVE, onMouseLeave);\n                    graph.on('cell:mouseleave', onMouseLeave);\n                    return _context5.abrupt(\"return\", Disposable.create(function () {\n                      /** 解除绑定 */\n                      graph.off(NsPortEvent.MOUSE_ENTER, onMouseEnter);\n                      graph.off(NsPortEvent.MOUSE_LEAVE, onMouseLeave);\n                    }));\n\n                  case 12:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5, this);\n          }));\n        }\n      });\n    }\n  }]);\n\n  return NodePortTooltipContribution;\n}();\n\n__decorate([ManaSyringe.inject(IGraphProvider), __metadata(\"design:type\", Object)], NodePortTooltipContribution.prototype, \"graphProvider\", void 0);\n\nNodePortTooltipContribution = __decorate([ManaSyringe.singleton({\n  contrib: [IHookContribution, IModelContribution]\n})], NodePortTooltipContribution);\nexport { NodePortTooltipContribution };","map":null,"metadata":{},"sourceType":"module"}