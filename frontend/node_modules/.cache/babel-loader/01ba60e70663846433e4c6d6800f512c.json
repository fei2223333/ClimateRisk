{"ast":null,"code":"import { newArray } from './util';\nexport function sumByRow(matrix) {\n  var sum = newArray(matrix.rows);\n\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function sumByColumn(matrix) {\n  var sum = newArray(matrix.columns);\n\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function sumAll(matrix) {\n  var v = 0;\n\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n\n  return v;\n}\nexport function productByRow(matrix) {\n  var sum = newArray(matrix.rows, 1);\n\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function productByColumn(matrix) {\n  var sum = newArray(matrix.columns, 1);\n\n  for (var i = 0; i < matrix.rows; ++i) {\n    for (var j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n\n  return sum;\n}\nexport function productAll(matrix) {\n  var v = 1;\n\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n\n  return v;\n}\nexport function varianceByRow(matrix, unbiased, mean) {\n  var rows = matrix.rows;\n  var cols = matrix.columns;\n  var variance = [];\n\n  for (var i = 0; i < rows; i++) {\n    var sum1 = 0;\n    var sum2 = 0;\n    var x = 0;\n\n    for (var j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / cols) / cols);\n    }\n  }\n\n  return variance;\n}\nexport function varianceByColumn(matrix, unbiased, mean) {\n  var rows = matrix.rows;\n  var cols = matrix.columns;\n  var variance = [];\n\n  for (var j = 0; j < cols; j++) {\n    var sum1 = 0;\n    var sum2 = 0;\n    var x = 0;\n\n    for (var i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n\n    if (unbiased) {\n      variance.push((sum2 - sum1 * sum1 / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - sum1 * sum1 / rows) / rows);\n    }\n  }\n\n  return variance;\n}\nexport function varianceAll(matrix, unbiased, mean) {\n  var rows = matrix.rows;\n  var cols = matrix.columns;\n  var size = rows * cols;\n  var sum1 = 0;\n  var sum2 = 0;\n  var x = 0;\n\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n\n  if (unbiased) {\n    return (sum2 - sum1 * sum1 / size) / (size - 1);\n  } else {\n    return (sum2 - sum1 * sum1 / size) / size;\n  }\n}\nexport function centerByRow(matrix, mean) {\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\nexport function centerByColumn(matrix, mean) {\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\nexport function centerAll(matrix, mean) {\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\nexport function getScaleByRow(matrix) {\n  var scale = [];\n\n  for (var i = 0; i < matrix.rows; i++) {\n    var sum = 0;\n\n    for (var j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n\n    scale.push(Math.sqrt(sum));\n  }\n\n  return scale;\n}\nexport function scaleByRow(matrix, scale) {\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\nexport function getScaleByColumn(matrix) {\n  var scale = [];\n\n  for (var j = 0; j < matrix.columns; j++) {\n    var sum = 0;\n\n    for (var i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n\n    scale.push(Math.sqrt(sum));\n  }\n\n  return scale;\n}\nexport function scaleByColumn(matrix, scale) {\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\nexport function getScaleAll(matrix) {\n  var divider = matrix.size - 1;\n  var sum = 0;\n\n  for (var j = 0; j < matrix.columns; j++) {\n    for (var i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n\n  return Math.sqrt(sum);\n}\nexport function scaleAll(matrix, scale) {\n  for (var i = 0; i < matrix.rows; i++) {\n    for (var j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}