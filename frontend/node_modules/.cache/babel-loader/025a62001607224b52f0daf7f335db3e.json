{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\n/** app */\n\nimport { initApp } from '../application-module';\nimport { XFlowAppInternalProvider, useXFlowApp } from './app-context';\n/** app-extension */\n\nimport { ExtensionRegistryContext } from './extension-context';\nimport { useXflowPrefixCls } from './global-config-context';\nimport { XFlowAppExtensionMoudle } from './app-extension-module';\nimport { ExtensionRegistry, createExtensionRegistry } from './extension-registry';\n/** graph */\n\nimport { XFlowCanvas } from './canvas';\n/** command */\n\nimport { ModelServiceRegistry } from '../../model-service';\nimport { CommandsRegistry, XFlowGraphCommands } from '../../command-contributions';\n/** hook */\n\nimport { HookRegistry } from '../../hooks';\n/** UI model */\n\nimport { ToolbarRegistry } from '../../toolbar';\nimport { MenuRegistry } from '../../menu';\nexport var XFlow = function XFlow(props) {\n  var meta = props.meta,\n      graphConfig = props.graphConfig,\n      graphData = props.graphData,\n      graphLayout = props.graphLayout,\n      onLoad = props.onLoad,\n      isAutoCenter = props.isAutoCenter,\n      hookConfig = props.hookConfig,\n      modelServiceConfig = props.modelServiceConfig,\n      commandConfig = props.commandConfig,\n      onAppConfigReady = props.onAppConfigReady,\n      onAppDestroy = props.onAppDestroy,\n      _props$children = props.children,\n      children = _props$children === void 0 ? [] : _props$children,\n      className = props.className,\n      style = props.style;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      appRef = _React$useState2[0],\n      setAppRef = _React$useState2[1];\n  /** 所有组件父容器 */\n\n\n  var appContainerRef = React.useRef(null);\n  /** XFlow App 配置中心 */\n\n  var extensionRegistry = createExtensionRegistry();\n  /** didmount */\n\n  React.useEffect(function () {\n    /** before app start */\n    if (onAppConfigReady) {\n      onAppConfigReady(extensionRegistry);\n    }\n    /** 初始化应用 */\n\n\n    var app = initApp(extensionRegistry);\n    app.start().then(function () {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                /** 保留引用 */\n                setAppRef(app);\n                (_a = extensionRegistry.getExtension('GraphConfig')) === null || _a === void 0 ? void 0 : _a.config.setAppContainer(appContainerRef.current);\n                /** 自动执行 load Meta */\n\n                if (!meta) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return app.commandService.executeCommand(XFlowGraphCommands.LOAD_META.id, {\n                  meta: meta\n                });\n\n              case 5:\n                /** after app start */\n                if (onLoad) {\n                  onLoad(app, extensionRegistry);\n                }\n\n                if (!graphData) {\n                  _context.next = 12;\n                  break;\n                }\n\n                if (!graphLayout) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 10;\n                return app.commandService.executeCommand(XFlowGraphCommands.GRAPH_LAYOUT.id, Object.assign({\n                  graphData: graphData\n                }, graphLayout));\n\n              case 10:\n                _context.next = 12;\n                return app.commandService.executeCommand(XFlowGraphCommands.GRAPH_RENDER.id, {\n                  graphData: graphData\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    });\n    /** unmount */\n\n    var destroy = function destroy() {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                onAppDestroy && onAppDestroy(app);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    };\n\n    return function () {\n      destroy();\n    };\n    /** 不要删 保证只生成一次 */\n    // eslint-disable-next-line\n  }, []);\n  /** 自动更新meta */\n\n  React.useEffect(function () {\n    if (appRef) {\n      appRef.commandService.executeCommand(XFlowGraphCommands.LOAD_META.id, {\n        meta: meta\n      });\n    }\n    /** 不要删 只和meta联动 */\n    // eslint-disable-next-line\n\n  }, [meta]);\n  /** 自动渲染画布内容 */\n\n  React.useEffect(function () {\n    var fn = function fn() {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var x6Graph;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!appRef) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                if (!(graphData && graphLayout)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 4;\n                return appRef.commandService.executeCommand(XFlowGraphCommands.GRAPH_LAYOUT.id, Object.assign({\n                  graphData: graphData\n                }, graphLayout));\n\n              case 4:\n                _context3.next = 6;\n                return appRef.commandService.executeCommand(XFlowGraphCommands.GRAPH_RENDER.id, {\n                  graphData: graphData\n                });\n\n              case 6:\n                if (!isAutoCenter) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.next = 9;\n                return appRef.getGraphInstance();\n\n              case 9:\n                x6Graph = _context3.sent;\n                x6Graph.centerContent();\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    };\n\n    fn();\n    /** 不要删 只和graphData联动 */\n    // eslint-disable-next-line\n  }, [graphData]);\n  /** classname */\n\n  var appClzName = classNames.apply(void 0, ['xflow-app-workspace', className].concat(_toConsumableArray(extensionRegistry.getContainerClassNames())));\n  /** 判断是否需要自动渲染画布组件, 坐标相对于xflow-graph-root */\n\n  var hasCanvasComponent = (Array.isArray(children) ? children : [children]).some(function (child) {\n    return child && child.props.isXFlowCanvas;\n  });\n  return React.createElement(XFlowAppInternalProvider, {\n    app: appRef\n  }, React.createElement(ExtensionRegistryContext.Provider, {\n    value: extensionRegistry\n  }, React.createElement(\"div\", {\n    className: appClzName,\n    id: extensionRegistry.getInstaceId(),\n    ref: appContainerRef,\n    style: style\n  }, !hasCanvasComponent && React.createElement(XFlowCanvas, {\n    config: graphConfig,\n    position: {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  }), children, React.createElement(ModelServiceRegistry, {\n    config: modelServiceConfig\n  }), React.createElement(CommandsRegistry, {\n    config: commandConfig\n  }), React.createElement(HookRegistry, {\n    config: hookConfig\n  }), React.createElement(ToolbarRegistry, null), React.createElement(MenuRegistry, null))));\n};\nXFlow.defaultProps = {};\nexport default XFlow;\nexport { useXFlowApp, useXflowPrefixCls, XFlowCanvas, XFlowAppExtensionMoudle as XFlowAppExtension, ExtensionRegistry };","map":null,"metadata":{},"sourceType":"module"}