{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { useXFlowApp, DisposableCollection, createComponentModel } from '@antv/xflow-core';\nimport { XFlowModelCommands, Disposable, MODELS } from '@antv/xflow-core';\nexport var NsJsonSchemaFormModel;\n\n(function (NsJsonSchemaFormModel) {\n  var _this = this;\n\n  NsJsonSchemaFormModel.id = 'XFLOW_JSON_SCHEMA_FORM';\n\n  NsJsonSchemaFormModel.useModel = function (model) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", model.awaitModel(NsJsonSchemaFormModel.id));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n})(NsJsonSchemaFormModel || (NsJsonSchemaFormModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\n\n\nexport var executeJsonSchemaFormCommand = function executeJsonSchemaFormCommand(cmds, updateModel) {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: function getModel(modelService) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", NsJsonSchemaFormModel.useModel(modelService));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    },\n    updateModel: updateModel\n  });\n};\nexport var useJsonSchemaFormModel = function useJsonSchemaFormModel(props) {\n  var app = useXFlowApp();\n  var commandService = app.commandService,\n      modelService = app.modelService,\n      getGraphInstance = app.getGraphInstance;\n  var formSchemaService = props.formSchemaService;\n\n  var _createComponentModel = createComponentModel({\n    schema: {\n      tabs: []\n    },\n    targetType: null,\n    targetData: null,\n    targetCell: null,\n    loading: false\n  }),\n      _createComponentModel2 = _slicedToArray(_createComponentModel, 4),\n      state = _createComponentModel2[0],\n      setState = _createComponentModel2[1],\n      model = _createComponentModel2[2],\n      isModelReady = _createComponentModel2[3];\n  /** 注册全局的model */\n\n\n  React.useEffect(function () {\n    if (!app || !app.modelService) {\n      return;\n    }\n\n    var toDispose = new DisposableCollection();\n    var deferredModel = app.modelService.findDeferredModel(NsJsonSchemaFormModel.id);\n\n    if (!deferredModel) {\n      var d = app.modelService.registerModel({\n        id: NsJsonSchemaFormModel.id,\n        modelFactory: function modelFactory() {\n          return model;\n        },\n\n        /** 监听SELECTED_CELL的变化 */\n        watchChange: function watchChange(self, modelSerccie) {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n            var selectedCellModel, nodeDisposable;\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return MODELS.SELECTED_CELL.getModel(modelSerccie);\n\n                  case 2:\n                    selectedCellModel = _context5.sent;\n                    nodeDisposable = selectedCellModel.watch(function (cell) {\n                      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                        var updateState, getCellType, targetCellType;\n                        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                          while (1) {\n                            switch (_context4.prev = _context4.next) {\n                              case 0:\n                                updateState = function updateState(targetCell, type) {\n                                  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                                    var targetData, graph, schema;\n                                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                      while (1) {\n                                        switch (_context3.prev = _context3.next) {\n                                          case 0:\n                                            self.setValue(function (m) {\n                                              m.loading = true;\n                                              m.schema = {\n                                                tabs: []\n                                              };\n                                              m.targetType = null;\n                                              m.targetData = null;\n                                              m.targetCell = null;\n                                            });\n                                            targetData = targetCell ? targetCell.getData() : null;\n\n                                            if (formSchemaService) {\n                                              _context3.next = 4;\n                                              break;\n                                            }\n\n                                            return _context3.abrupt(\"return\");\n\n                                          case 4:\n                                            _context3.next = 6;\n                                            return getGraphInstance();\n\n                                          case 6:\n                                            graph = _context3.sent;\n                                            _context3.next = 9;\n                                            return formSchemaService({\n                                              commandService: commandService,\n                                              modelService: modelService,\n                                              targetData: targetData,\n                                              cell: targetCell,\n                                              targetType: type,\n                                              graph: graph\n                                            });\n\n                                          case 9:\n                                            schema = _context3.sent;\n                                            self.setValue({\n                                              loading: false,\n                                              schema: schema,\n                                              targetType: type,\n                                              targetCell: targetCell,\n                                              targetData: targetData\n                                            });\n\n                                          case 11:\n                                          case \"end\":\n                                            return _context3.stop();\n                                        }\n                                      }\n                                    }, _callee3);\n                                  }));\n                                };\n\n                                getCellType = function getCellType(targetCell) {\n                                  if (!targetCell) {\n                                    return 'canvas';\n                                  } else if (targetCell.isNode && targetCell.isNode() && targetCell.getProp('isGroup')) {\n                                    return 'group';\n                                  } else if (targetCell.isNode && targetCell.isNode()) {\n                                    return 'node';\n                                  } else if (targetCell.isEdge && targetCell.isEdge()) {\n                                    return 'edge';\n                                  } else {\n                                    return 'canvas';\n                                  }\n                                };\n\n                                targetCellType = getCellType(cell);\n\n                                if (!(props.targetType || ['node', 'canvas']).includes(targetCellType)) {\n                                  _context4.next = 6;\n                                  break;\n                                }\n\n                                _context4.next = 6;\n                                return updateState(cell, targetCellType);\n\n                              case 6:\n                              case \"end\":\n                                return _context4.stop();\n                            }\n                          }\n                        }, _callee4);\n                      }));\n                    });\n                    return _context5.abrupt(\"return\", Disposable.create(function () {\n                      nodeDisposable.dispose();\n                      toDispose.push(nodeDisposable);\n                    }));\n\n                  case 5:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n        }\n      });\n      toDispose.push(d);\n    }\n\n    return function () {\n      toDispose.dispose();\n    };\n    /* eslint-disable-next-line  */\n  }, []);\n  return {\n    commandService: commandService,\n    modelService: modelService,\n    state: state,\n    setState: setState,\n    model: model,\n    isModelReady: isModelReady\n  };\n};","map":null,"metadata":{},"sourceType":"module"}