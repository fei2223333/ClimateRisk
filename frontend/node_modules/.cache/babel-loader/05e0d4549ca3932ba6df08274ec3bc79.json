{"ast":null,"code":"import greedyFAS from './greedy-fas';\n\nvar run = function run(g) {\n  var weightFn = function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  };\n\n  var fas = g.graph().acyclicer === \"greedy\" ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  fas === null || fas === void 0 ? void 0 : fas.forEach(function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, \"rev-\".concat(Math.random()));\n  });\n};\n\nvar dfsFAS = function dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  var dfs = function dfs(v) {\n    var _a;\n\n    if (visited.hasOwnProperty(v)) {\n      return;\n    }\n\n    visited[v] = true;\n    stack[v] = true;\n    (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n      if (stack.hasOwnProperty(e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  };\n\n  g.nodes().forEach(dfs);\n  return fas;\n};\n\nvar undo = function undo(g) {\n  g.edges().forEach(function (e) {\n    var label = g.edge(e);\n\n    if (label.reversed) {\n      g.removeEdge(e);\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n};\n\nexport default {\n  run: run,\n  undo: undo\n};","map":null,"metadata":{},"sourceType":"module"}