{"ast":null,"code":"import { ObjectExt, NumberExt, Dom, FunctionExt } from '../../util';\nexport var text = {\n  qualify: function qualify(text, _ref) {\n    var attrs = _ref.attrs;\n    return attrs.textWrap == null || !ObjectExt.isPlainObject(attrs.textWrap);\n  },\n  set: function set(text, _ref2) {\n    var view = _ref2.view,\n        elem = _ref2.elem,\n        attrs = _ref2.attrs;\n    var cacheName = 'x6-text';\n    var $elem = view.$(elem);\n    var cache = $elem.data(cacheName);\n\n    var json = function json(str) {\n      try {\n        return JSON.parse(str);\n      } catch (error) {\n        return str;\n      }\n    };\n\n    var options = {\n      x: attrs.x,\n      eol: attrs.eol,\n      annotations: json(attrs.annotations),\n      textPath: json(attrs['text-path'] || attrs.textPath),\n      textVerticalAnchor: attrs['text-vertical-anchor'] || attrs.textVerticalAnchor,\n      displayEmpty: (attrs['display-empty'] || attrs.displayEmpty) === 'true',\n      lineHeight: attrs['line-height'] || attrs.lineHeight\n    };\n    var fontSize = attrs['font-size'] || attrs.fontSize;\n    var textHash = JSON.stringify([text, options]);\n\n    if (fontSize) {\n      elem.setAttribute('font-size', fontSize);\n    } // Updates the text only if there was a change in the string\n    // or any of its attributes.\n\n\n    if (cache == null || cache !== textHash) {\n      // Text Along Path Selector\n      var _textPath = options.textPath;\n\n      if (_textPath != null && typeof _textPath === 'object') {\n        var selector = _textPath.selector;\n\n        if (typeof selector === 'string') {\n          var pathNode = view.find(selector)[0];\n\n          if (pathNode instanceof SVGPathElement) {\n            Dom.ensureId(pathNode);\n            options.textPath = Object.assign({\n              'xlink:href': \"#\".concat(pathNode.id)\n            }, _textPath);\n          }\n        }\n      }\n\n      Dom.text(elem, \"\".concat(text), options);\n      $elem.data(cacheName, textHash);\n    }\n  }\n};\nexport var textWrap = {\n  qualify: ObjectExt.isPlainObject,\n  set: function set(val, _ref3) {\n    var view = _ref3.view,\n        elem = _ref3.elem,\n        attrs = _ref3.attrs,\n        refBBox = _ref3.refBBox;\n    var info = val; // option `width`\n\n    var width = info.width || 0;\n\n    if (NumberExt.isPercentage(width)) {\n      refBBox.width *= parseFloat(width) / 100;\n    } else if (width <= 0) {\n      refBBox.width += width;\n    } else {\n      refBBox.width = width;\n    } // option `height`\n\n\n    var height = info.height || 0;\n\n    if (NumberExt.isPercentage(height)) {\n      refBBox.height *= parseFloat(height) / 100;\n    } else if (height <= 0) {\n      refBBox.height += height;\n    } else {\n      refBBox.height = height;\n    } // option `text`\n\n\n    var wrappedText;\n    var txt = info.text;\n\n    if (txt == null) {\n      txt = attrs.text;\n    }\n\n    if (txt != null) {\n      wrappedText = Dom.breakText(\"\".concat(txt), refBBox, {\n        'font-weight': attrs['font-weight'] || attrs.fontWeight,\n        'font-size': attrs['font-size'] || attrs.fontSize,\n        'font-family': attrs['font-family'] || attrs.fontFamily,\n        lineHeight: attrs.lineHeight\n      }, {\n        svgDocument: view.graph.view.svg,\n        ellipsis: info.ellipsis,\n        hyphen: info.hyphen,\n        breakWord: info.breakWord\n      });\n    } else {\n      wrappedText = '';\n    }\n\n    FunctionExt.call(text.set, this, wrappedText, {\n      view: view,\n      elem: elem,\n      attrs: attrs,\n      refBBox: refBBox,\n      cell: view.cell\n    });\n  }\n};\n\nvar isTextInUse = function isTextInUse(val, _ref4) {\n  var attrs = _ref4.attrs;\n  return attrs.text !== undefined;\n};\n\nexport var lineHeight = {\n  qualify: isTextInUse\n};\nexport var textVerticalAnchor = {\n  qualify: isTextInUse\n};\nexport var textPath = {\n  qualify: isTextInUse\n};\nexport var annotations = {\n  qualify: isTextInUse\n};\nexport var eol = {\n  qualify: isTextInUse\n};\nexport var displayEmpty = {\n  qualify: isTextInUse\n};","map":null,"metadata":{},"sourceType":"module"}