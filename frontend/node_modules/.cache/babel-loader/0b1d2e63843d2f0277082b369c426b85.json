{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Basecoat } from '../common';\nimport { Point, Rectangle } from '../geometry';\nimport { Cell } from '../model/cell';\nimport { Node } from '../model/node';\nimport { Edge } from '../model/edge';\nimport { CellView } from '../view/cell';\nimport * as Registry from '../registry';\nimport { HTML } from '../shape/standard/html';\nimport { Base } from './base';\nimport { GraphView } from './view';\nimport { Decorator } from './decorator';\nimport { CSSManager } from './css';\nimport { Hook as HookManager } from './hook';\nimport { Options as GraphOptions } from './options';\nimport { DefsManager as Defs } from './defs';\nimport { GridManager as Grid } from './grid';\nimport { CoordManager as Coord } from './coord';\nimport { Keyboard as Shortcut } from './keyboard';\nimport { PrintManager as Print } from './print';\nimport { MouseWheel as Wheel } from './mousewheel';\nimport { FormatManager as Format } from './format';\nimport { Renderer as ViewRenderer } from './renderer';\nimport { HistoryManager as History } from './history';\nimport { MiniMapManager as MiniMap } from './minimap';\nimport { SnaplineManager as Snapline } from './snapline';\nimport { ScrollerManager as Scroller } from './scroller';\nimport { SelectionManager as Selection } from './selection';\nimport { HighlightManager as Highlight } from './highlight';\nimport { TransformManager as Transform } from './transform';\nimport { ClipboardManager as Clipboard } from './clipboard';\nimport { BackgroundManager as Background } from './background';\nexport var Graph = /*#__PURE__*/function (_Basecoat) {\n  _inherits(Graph, _Basecoat);\n\n  function Graph(options) {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Graph).call(this));\n    _this.options = GraphOptions.get(options);\n    _this.css = new CSSManager(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.hook = new HookManager(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.view = _this.hook.createView();\n    _this.defs = _this.hook.createDefsManager();\n    _this.coord = _this.hook.createCoordManager();\n    _this.transform = _this.hook.createTransformManager();\n    _this.knob = _this.hook.createKnobManager();\n    _this.highlight = _this.hook.createHighlightManager();\n    _this.grid = _this.hook.createGridManager();\n    _this.background = _this.hook.createBackgroundManager();\n    _this.model = _this.hook.createModel();\n    _this.renderer = _this.hook.createRenderer();\n    _this.clipboard = _this.hook.createClipboardManager();\n    _this.snapline = _this.hook.createSnaplineManager();\n    _this.selection = _this.hook.createSelectionManager();\n    _this.history = _this.hook.createHistoryManager();\n    _this.scroller = _this.hook.createScrollerManager();\n    _this.minimap = _this.hook.createMiniMapManager();\n    _this.keyboard = _this.hook.createKeyboard();\n    _this.mousewheel = _this.hook.createMouseWheel();\n    _this.print = _this.hook.createPrintManager();\n    _this.format = _this.hook.createFormatManager();\n    _this.panning = _this.hook.createPanningManager();\n    _this.size = _this.hook.createSizeManager();\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"isNode\",\n    // #region model\n    value: function isNode(cell) {\n      return cell.isNode();\n    }\n  }, {\n    key: \"isEdge\",\n    value: function isEdge(cell) {\n      return cell.isEdge();\n    }\n  }, {\n    key: \"resetCells\",\n    value: function resetCells(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.resetCells(cells, options);\n      return this;\n    }\n  }, {\n    key: \"clearCells\",\n    value: function clearCells() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.model.clear(options);\n      return this;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.model.toJSON(options);\n    }\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(data) {\n      return this.model.parseJSON(data);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(data) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.fromJSON(data, options);\n      return this;\n    }\n  }, {\n    key: \"getCellById\",\n    value: function getCellById(id) {\n      return this.model.getCell(id);\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.addNode(node, options);\n    }\n  }, {\n    key: \"addNodes\",\n    value: function addNodes(nodes) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.addCell(nodes.map(function (node) {\n        return Node.isNode(node) ? node : _this2.createNode(node);\n      }), options);\n    }\n  }, {\n    key: \"createNode\",\n    value: function createNode(metadata) {\n      return this.model.createNode(metadata);\n    }\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeCell(node, options);\n    }\n  }, {\n    key: \"addEdge\",\n    value: function addEdge(edge) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.addEdge(edge, options);\n    }\n  }, {\n    key: \"addEdges\",\n    value: function addEdges(edges) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.addCell(edges.map(function (edge) {\n        return Edge.isEdge(edge) ? edge : _this3.createEdge(edge);\n      }), options);\n    }\n  }, {\n    key: \"removeEdge\",\n    value: function removeEdge(edge) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeCell(edge, options);\n    }\n  }, {\n    key: \"createEdge\",\n    value: function createEdge(metadata) {\n      return this.model.createEdge(metadata);\n    }\n  }, {\n    key: \"addCell\",\n    value: function addCell(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.addCell(cell, options);\n      return this;\n    }\n  }, {\n    key: \"removeCell\",\n    value: function removeCell(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeCell(cell, options);\n    }\n  }, {\n    key: \"removeCells\",\n    value: function removeCells(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeCells(cells, options);\n    }\n  }, {\n    key: \"removeConnectedEdges\",\n    value: function removeConnectedEdges(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.removeConnectedEdges(cell, options);\n    }\n  }, {\n    key: \"disconnectConnectedEdges\",\n    value: function disconnectConnectedEdges(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.disconnectConnectedEdges(cell, options);\n      return this;\n    }\n  }, {\n    key: \"hasCell\",\n    value: function hasCell(cell) {\n      return this.model.has(cell);\n    }\n    /**\n     * **Deprecation Notice:** `getCell` is deprecated and will be moved in next\n     * major release. Use `getCellById()` instead.\n     *\n     * @deprecated\n     */\n\n  }, {\n    key: \"getCell\",\n    value: function getCell(id) {\n      return this.model.getCell(id);\n    }\n  }, {\n    key: \"getCells\",\n    value: function getCells() {\n      return this.model.getCells();\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this.model.total();\n    }\n    /**\n     * Returns all the nodes in the graph.\n     */\n\n  }, {\n    key: \"getNodes\",\n    value: function getNodes() {\n      return this.model.getNodes();\n    }\n    /**\n     * Returns all the edges in the graph.\n     */\n\n  }, {\n    key: \"getEdges\",\n    value: function getEdges() {\n      return this.model.getEdges();\n    }\n    /**\n     * Returns all outgoing edges for the node.\n     */\n\n  }, {\n    key: \"getOutgoingEdges\",\n    value: function getOutgoingEdges(cell) {\n      return this.model.getOutgoingEdges(cell);\n    }\n    /**\n     * Returns all incoming edges for the node.\n     */\n\n  }, {\n    key: \"getIncomingEdges\",\n    value: function getIncomingEdges(cell) {\n      return this.model.getIncomingEdges(cell);\n    }\n    /**\n     * Returns edges connected with cell.\n     */\n\n  }, {\n    key: \"getConnectedEdges\",\n    value: function getConnectedEdges(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getConnectedEdges(cell, options);\n    }\n    /**\n     * Returns an array of all the roots of the graph.\n     */\n\n  }, {\n    key: \"getRootNodes\",\n    value: function getRootNodes() {\n      return this.model.getRoots();\n    }\n    /**\n     * Returns an array of all the leafs of the graph.\n     */\n\n  }, {\n    key: \"getLeafNodes\",\n    value: function getLeafNodes() {\n      return this.model.getLeafs();\n    }\n    /**\n     * Returns `true` if the node is a root node, i.e.\n     * there is no  edges coming to the node.\n     */\n\n  }, {\n    key: \"isRootNode\",\n    value: function isRootNode(cell) {\n      return this.model.isRoot(cell);\n    }\n    /**\n     * Returns `true` if the node is a leaf node, i.e.\n     * there is no edges going out from the node.\n     */\n\n  }, {\n    key: \"isLeafNode\",\n    value: function isLeafNode(cell) {\n      return this.model.isLeaf(cell);\n    }\n    /**\n     * Returns all the neighbors of node in the graph. Neighbors are all\n     * the nodes connected to node via either incoming or outgoing edge.\n     */\n\n  }, {\n    key: \"getNeighbors\",\n    value: function getNeighbors(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getNeighbors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a neighbor of `cell1`.\n     */\n\n  }, {\n    key: \"isNeighbor\",\n    value: function isNeighbor(cell1, cell2) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.model.isNeighbor(cell1, cell2, options);\n    }\n  }, {\n    key: \"getSuccessors\",\n    value: function getSuccessors(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getSuccessors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a successor of `cell1`.\n     */\n\n  }, {\n    key: \"isSuccessor\",\n    value: function isSuccessor(cell1, cell2) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.model.isSuccessor(cell1, cell2, options);\n    }\n  }, {\n    key: \"getPredecessors\",\n    value: function getPredecessors(cell) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getPredecessors(cell, options);\n    }\n    /**\n     * Returns `true` if `cell2` is a predecessor of `cell1`.\n     */\n\n  }, {\n    key: \"isPredecessor\",\n    value: function isPredecessor(cell1, cell2) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.model.isPredecessor(cell1, cell2, options);\n    }\n  }, {\n    key: \"getCommonAncestor\",\n    value: function getCommonAncestor() {\n      var _this$model;\n\n      return (_this$model = this.model).getCommonAncestor.apply(_this$model, arguments);\n    }\n    /**\n     * Returns an array of cells that result from finding nodes/edges that\n     * are connected to any of the cells in the cells array. This function\n     * loops over cells and if the current cell is a edge, it collects its\n     * source/target nodes; if it is an node, it collects its incoming and\n     * outgoing edges if both the edge terminal (source/target) are in the\n     * cells array.\n     */\n\n  }, {\n    key: \"getSubGraph\",\n    value: function getSubGraph(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getSubGraph(cells, options);\n    }\n    /**\n     * Clones the whole subgraph (including all the connected links whose\n     * source/target is in the subgraph). If `options.deep` is `true`, also\n     * take into account all the embedded cells of all the subgraph cells.\n     *\n     * Returns a map of the form: { [original cell ID]: [clone] }.\n     */\n\n  }, {\n    key: \"cloneSubGraph\",\n    value: function cloneSubGraph(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.cloneSubGraph(cells, options);\n    }\n  }, {\n    key: \"cloneCells\",\n    value: function cloneCells(cells) {\n      return this.model.cloneCells(cells);\n    }\n  }, {\n    key: \"getNodesFromPoint\",\n    value: function getNodesFromPoint(x, y) {\n      return this.model.getNodesFromPoint(x, y);\n    }\n  }, {\n    key: \"getNodesInArea\",\n    value: function getNodesInArea(x, y, w, h, options) {\n      return this.model.getNodesInArea(x, y, w, h, options);\n    }\n  }, {\n    key: \"getNodesUnderNode\",\n    value: function getNodesUnderNode(node) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getNodesUnderNode(node, options);\n    }\n  }, {\n    key: \"searchCell\",\n    value: function searchCell(cell, iterator) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.model.search(cell, iterator, options);\n      return this;\n    }\n    /** *\n     * Returns an array of IDs of nodes on the shortest\n     * path between source and target.\n     */\n\n  }, {\n    key: \"getShortestPath\",\n    value: function getShortestPath(source, target) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.model.getShortestPath(source, target, options);\n    }\n    /**\n     * Returns the bounding box that surrounds all cells in the graph.\n     */\n\n  }, {\n    key: \"getAllCellsBBox\",\n    value: function getAllCellsBBox() {\n      return this.model.getAllCellsBBox();\n    }\n    /**\n     * Returns the bounding box that surrounds all the given cells.\n     */\n\n  }, {\n    key: \"getCellsBBox\",\n    value: function getCellsBBox(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.model.getCellsBBox(cells, options);\n    }\n  }, {\n    key: \"startBatch\",\n    value: function startBatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.startBatch(name, data);\n    }\n  }, {\n    key: \"stopBatch\",\n    value: function stopBatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.model.stopBatch(name, data);\n    }\n  }, {\n    key: \"batchUpdate\",\n    value: function batchUpdate(arg1, arg2, arg3) {\n      var name = typeof arg1 === 'string' ? arg1 : 'update';\n      var execute = typeof arg1 === 'string' ? arg2 : arg1;\n      var data = typeof arg2 === 'function' ? arg3 : arg2;\n      this.startBatch(name, data);\n      var result = execute();\n      this.stopBatch(name, data);\n      return result;\n    }\n  }, {\n    key: \"updateCellId\",\n    value: function updateCellId(cell, newId) {\n      return this.model.updateCellId(cell, newId);\n    } // #endregion\n    // #region view\n\n  }, {\n    key: \"isFrozen\",\n    value: function isFrozen() {\n      return this.renderer.isFrozen();\n    }\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.renderer.freeze(options);\n      return this;\n    }\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.renderer.unfreeze(options);\n      return this;\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return this.renderer.isAsync();\n    }\n  }, {\n    key: \"setAsync\",\n    value: function setAsync(async) {\n      this.renderer.setAsync(async);\n      return this;\n    }\n  }, {\n    key: \"findView\",\n    value: function findView(ref) {\n      if (Cell.isCell(ref)) {\n        return this.findViewByCell(ref);\n      }\n\n      return this.findViewByElem(ref);\n    }\n  }, {\n    key: \"findViews\",\n    value: function findViews(ref) {\n      if (Rectangle.isRectangleLike(ref)) {\n        return this.findViewsInArea(ref);\n      }\n\n      if (Point.isPointLike(ref)) {\n        return this.findViewsFromPoint(ref);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"findViewByCell\",\n    value: function findViewByCell(cell) {\n      return this.renderer.findViewByCell(cell);\n    }\n  }, {\n    key: \"findViewByElem\",\n    value: function findViewByElem(elem) {\n      return this.renderer.findViewByElem(elem);\n    }\n  }, {\n    key: \"findViewsFromPoint\",\n    value: function findViewsFromPoint(x, y) {\n      var p = typeof x === 'number' ? {\n        x: x,\n        y: y\n      } : x;\n      return this.renderer.findViewsFromPoint(p);\n    }\n  }, {\n    key: \"findViewsInArea\",\n    value: function findViewsInArea(x, y, width, height, options) {\n      var rect = typeof x === 'number' ? {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      } : x;\n      var localOptions = typeof x === 'number' ? options : y;\n      return this.renderer.findViewsInArea(rect, localOptions);\n    }\n  }, {\n    key: \"isViewMounted\",\n    value: function isViewMounted(view) {\n      return this.renderer.isViewMounted(view);\n    }\n  }, {\n    key: \"getMountedViews\",\n    value: function getMountedViews() {\n      return this.renderer.getMountedViews();\n    }\n  }, {\n    key: \"getUnmountedViews\",\n    value: function getUnmountedViews() {\n      return this.renderer.getUnmountedViews();\n    }\n  }, {\n    key: \"matrix\",\n    value: function matrix(mat) {\n      if (typeof mat === 'undefined') {\n        return this.transform.getMatrix();\n      }\n\n      this.transform.setMatrix(mat);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.size.resize(width, height);\n      return this;\n    }\n  }, {\n    key: \"resizeGraph\",\n    value: function resizeGraph(width, height) {\n      this.size.resizeGraph(width, height);\n      return this;\n    }\n  }, {\n    key: \"resizeScroller\",\n    value: function resizeScroller(width, height) {\n      this.size.resizeScroller(width, height);\n      return this;\n    }\n  }, {\n    key: \"resizePage\",\n    value: function resizePage(width, height) {\n      this.size.resizePage(width, height);\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(sx) {\n      var sy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : sx;\n      var cx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var cy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      if (typeof sx === 'undefined') {\n        return this.transform.getScale();\n      }\n\n      this.transform.scale(sx, sy, cx, cy);\n      return this;\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(factor, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        if (typeof factor === 'undefined') {\n          return scroller.zoom();\n        }\n\n        scroller.zoom(factor, options);\n      } else {\n        if (typeof factor === 'undefined') {\n          return this.transform.getZoom();\n        }\n\n        this.transform.zoom(factor, options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"zoomTo\",\n    value: function zoomTo(factor) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.zoom(factor, Object.assign(Object.assign({}, options), {\n          absolute: true\n        }));\n      } else {\n        this.transform.zoom(factor, Object.assign(Object.assign({}, options), {\n          absolute: true\n        }));\n      }\n    }\n  }, {\n    key: \"zoomToRect\",\n    value: function zoomToRect(rect) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.zoomToRect(rect, options);\n      } else {\n        this.transform.zoomToRect(rect, options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"zoomToFit\",\n    value: function zoomToFit() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.zoomToFit(options);\n      } else {\n        this.transform.zoomToFit(options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle, cx, cy) {\n      if (typeof angle === 'undefined') {\n        return this.transform.getRotation();\n      }\n\n      this.transform.rotate(angle, cx, cy);\n      return this;\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(tx, ty) {\n      if (typeof tx === 'undefined') {\n        return this.transform.getTranslation();\n      }\n\n      this.transform.translate(tx, ty);\n      return this;\n    }\n  }, {\n    key: \"translateBy\",\n    value: function translateBy(dx, dy) {\n      var ts = this.translate();\n      var tx = ts.tx + dx;\n      var ty = ts.ty + dy;\n      return this.translate(tx, ty);\n    }\n    /**\n     * **Deprecation Notice:** `getArea` is deprecated and will be moved in next\n     * major release. Use `getGraphArea()` instead.\n     *\n     * @deprecated\n     */\n\n  }, {\n    key: \"getArea\",\n    value: function getArea() {\n      return this.transform.getGraphArea();\n    }\n  }, {\n    key: \"getGraphArea\",\n    value: function getGraphArea() {\n      return this.transform.getGraphArea();\n    }\n  }, {\n    key: \"getContentArea\",\n    value: function getContentArea() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.transform.getContentArea(options);\n    }\n  }, {\n    key: \"getContentBBox\",\n    value: function getContentBBox() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.transform.getContentBBox(options);\n    }\n  }, {\n    key: \"fitToContent\",\n    value: function fitToContent(gridWidth, gridHeight, padding, options) {\n      return this.transform.fitToContent(gridWidth, gridHeight, padding, options);\n    }\n  }, {\n    key: \"scaleContentToFit\",\n    value: function scaleContentToFit() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.transform.scaleContentToFit(options);\n      return this;\n    }\n    /**\n     * Position the center of graph to the center of the viewport.\n     */\n\n  }, {\n    key: \"center\",\n    value: function center(optons) {\n      return this.centerPoint(optons);\n    }\n  }, {\n    key: \"centerPoint\",\n    value: function centerPoint(x, y, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.centerPoint(x, y, options);\n      } else {\n        this.transform.centerPoint(x, y);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"centerContent\",\n    value: function centerContent(options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.centerContent(options);\n      } else {\n        this.transform.centerContent(options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"centerCell\",\n    value: function centerCell(cell, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.centerCell(cell, options);\n      } else {\n        this.transform.centerCell(cell);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"positionPoint\",\n    value: function positionPoint(point, x, y) {\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.positionPoint(point, x, y, options);\n      } else {\n        this.transform.positionPoint(point, x, y);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"positionRect\",\n    value: function positionRect(rect, direction, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.positionRect(rect, direction, options);\n      } else {\n        this.transform.positionRect(rect, direction);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"positionCell\",\n    value: function positionCell(cell, direction, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.positionCell(cell, direction, options);\n      } else {\n        this.transform.positionCell(cell, direction);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"positionContent\",\n    value: function positionContent(pos, options) {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        scroller.positionContent(pos, options);\n      } else {\n        this.transform.positionContent(pos, options);\n      }\n\n      return this;\n    } // #endregion\n    // #region coord\n\n  }, {\n    key: \"getClientMatrix\",\n    value: function getClientMatrix() {\n      return this.coord.getClientMatrix();\n    }\n    /**\n     * Returns coordinates of the graph viewport, relative to the window.\n     */\n\n  }, {\n    key: \"getClientOffset\",\n    value: function getClientOffset() {\n      return this.coord.getClientOffset();\n    }\n    /**\n     * Returns coordinates of the graph viewport, relative to the document.\n     */\n\n  }, {\n    key: \"getPageOffset\",\n    value: function getPageOffset() {\n      return this.coord.getPageOffset();\n    }\n  }, {\n    key: \"snapToGrid\",\n    value: function snapToGrid(x, y) {\n      return this.coord.snapToGrid(x, y);\n    }\n  }, {\n    key: \"pageToLocal\",\n    value: function pageToLocal(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.pageToLocalRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.pageToLocalRect(x, y, width, height);\n      }\n\n      return this.coord.pageToLocalPoint(x, y);\n    }\n  }, {\n    key: \"localToPage\",\n    value: function localToPage(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.localToPageRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.localToPageRect(x, y, width, height);\n      }\n\n      return this.coord.localToPagePoint(x, y);\n    }\n  }, {\n    key: \"clientToLocal\",\n    value: function clientToLocal(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.clientToLocalRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.clientToLocalRect(x, y, width, height);\n      }\n\n      return this.coord.clientToLocalPoint(x, y);\n    }\n  }, {\n    key: \"localToClient\",\n    value: function localToClient(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.localToClientRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.localToClientRect(x, y, width, height);\n      }\n\n      return this.coord.localToClientPoint(x, y);\n    }\n  }, {\n    key: \"localToGraph\",\n    value: function localToGraph(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.localToGraphRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.localToGraphRect(x, y, width, height);\n      }\n\n      return this.coord.localToGraphPoint(x, y);\n    }\n  }, {\n    key: \"graphToLocal\",\n    value: function graphToLocal(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.graphToLocalRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.graphToLocalRect(x, y, width, height);\n      }\n\n      return this.coord.graphToLocalPoint(x, y);\n    }\n  }, {\n    key: \"clientToGraph\",\n    value: function clientToGraph(x, y, width, height) {\n      if (Rectangle.isRectangleLike(x)) {\n        return this.coord.clientToGraphRect(x);\n      }\n\n      if (typeof x === 'number' && typeof y === 'number' && typeof width === 'number' && typeof height === 'number') {\n        return this.coord.clientToGraphRect(x, y, width, height);\n      }\n\n      return this.coord.clientToGraphPoint(x, y);\n    } // #endregion\n    // #region defs\n\n  }, {\n    key: \"defineFilter\",\n    value: function defineFilter(options) {\n      return this.defs.filter(options);\n    }\n  }, {\n    key: \"defineGradient\",\n    value: function defineGradient(options) {\n      return this.defs.gradient(options);\n    }\n  }, {\n    key: \"defineMarker\",\n    value: function defineMarker(options) {\n      return this.defs.marker(options);\n    } // #endregion\n    // #region grid\n\n  }, {\n    key: \"getGridSize\",\n    value: function getGridSize() {\n      return this.grid.getGridSize();\n    }\n  }, {\n    key: \"setGridSize\",\n    value: function setGridSize(gridSize) {\n      this.grid.setGridSize(gridSize);\n      return this;\n    }\n  }, {\n    key: \"showGrid\",\n    value: function showGrid() {\n      this.grid.show();\n      return this;\n    }\n  }, {\n    key: \"hideGrid\",\n    value: function hideGrid() {\n      this.grid.hide();\n      return this;\n    }\n  }, {\n    key: \"clearGrid\",\n    value: function clearGrid() {\n      this.grid.clear();\n      return this;\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid(options) {\n      this.grid.draw(options);\n      return this;\n    } // #endregion\n    // #region background\n\n  }, {\n    key: \"updateBackground\",\n    value: function updateBackground() {\n      this.background.update();\n      return this;\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(options, onGraph) {\n      var scroller = this.scroller.widget;\n\n      if (scroller != null && (this.options.background == null || !onGraph)) {\n        scroller.backgroundManager.draw(options);\n      } else {\n        this.background.draw(options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clearBackground\",\n    value: function clearBackground(onGraph) {\n      var scroller = this.scroller.widget;\n\n      if (scroller != null && (this.options.background == null || !onGraph)) {\n        scroller.backgroundManager.clear();\n      } else {\n        this.background.clear();\n      }\n\n      return this;\n    } // #endregion\n    // #region clipboard\n\n  }, {\n    key: \"isClipboardEnabled\",\n    value: function isClipboardEnabled() {\n      return !this.clipboard.disabled;\n    }\n  }, {\n    key: \"enableClipboard\",\n    value: function enableClipboard() {\n      this.clipboard.enable();\n      return this;\n    }\n  }, {\n    key: \"disableClipboard\",\n    value: function disableClipboard() {\n      this.clipboard.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleClipboard\",\n    value: function toggleClipboard(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isClipboardEnabled()) {\n          if (enabled) {\n            this.enableClipboard();\n          } else {\n            this.disableClipboard();\n          }\n        }\n      } else if (this.isClipboardEnabled()) {\n        this.disableClipboard();\n      } else {\n        this.enableClipboard();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isClipboardEmpty\",\n    value: function isClipboardEmpty() {\n      return this.clipboard.isEmpty();\n    }\n  }, {\n    key: \"getCellsInClipboard\",\n    value: function getCellsInClipboard() {\n      return this.clipboard.cells;\n    }\n  }, {\n    key: \"cleanClipboard\",\n    value: function cleanClipboard() {\n      this.clipboard.clean();\n      return this;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.clipboard.copy(cells, options);\n      return this;\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.clipboard.cut(cells, options);\n      return this;\n    }\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var graph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n      return this.clipboard.paste(options, graph);\n    } // #endregion\n    // #region redo/undo\n\n  }, {\n    key: \"isHistoryEnabled\",\n    value: function isHistoryEnabled() {\n      return !this.history.disabled;\n    }\n  }, {\n    key: \"enableHistory\",\n    value: function enableHistory() {\n      this.history.enable();\n      return this;\n    }\n  }, {\n    key: \"disableHistory\",\n    value: function disableHistory() {\n      this.history.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleHistory\",\n    value: function toggleHistory(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isHistoryEnabled()) {\n          if (enabled) {\n            this.enableHistory();\n          } else {\n            this.disableHistory();\n          }\n        }\n      } else if (this.isHistoryEnabled()) {\n        this.disableHistory();\n      } else {\n        this.enableHistory();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.history.undo(options);\n      return this;\n    }\n  }, {\n    key: \"undoAndCancel\",\n    value: function undoAndCancel() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.history.cancel(options);\n      return this;\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.history.redo(options);\n      return this;\n    }\n  }, {\n    key: \"canUndo\",\n    value: function canUndo() {\n      return this.history.canUndo();\n    }\n  }, {\n    key: \"canRedo\",\n    value: function canRedo() {\n      return this.history.canRedo();\n    }\n  }, {\n    key: \"cleanHistory\",\n    value: function cleanHistory() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.history.clean(options);\n    } // #endregion\n    // #region keyboard\n\n  }, {\n    key: \"isKeyboardEnabled\",\n    value: function isKeyboardEnabled() {\n      return !this.keyboard.disabled;\n    }\n  }, {\n    key: \"enableKeyboard\",\n    value: function enableKeyboard() {\n      this.keyboard.enable();\n      return this;\n    }\n  }, {\n    key: \"disableKeyboard\",\n    value: function disableKeyboard() {\n      this.keyboard.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleKeyboard\",\n    value: function toggleKeyboard(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isKeyboardEnabled()) {\n          if (enabled) {\n            this.enableKeyboard();\n          } else {\n            this.disableKeyboard();\n          }\n        }\n      } else if (this.isKeyboardEnabled()) {\n        this.disableKeyboard();\n      } else {\n        this.enableKeyboard();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"bindKey\",\n    value: function bindKey(keys, callback, action) {\n      this.keyboard.on(keys, callback, action);\n      return this;\n    }\n  }, {\n    key: \"unbindKey\",\n    value: function unbindKey(keys, action) {\n      this.keyboard.off(keys, action);\n      return this;\n    } // #endregion\n    // #region mousewheel\n\n  }, {\n    key: \"isMouseWheelEnabled\",\n    value: function isMouseWheelEnabled() {\n      return !this.mousewheel.disabled;\n    }\n  }, {\n    key: \"enableMouseWheel\",\n    value: function enableMouseWheel() {\n      this.mousewheel.enable();\n      return this;\n    }\n  }, {\n    key: \"disableMouseWheel\",\n    value: function disableMouseWheel() {\n      this.mousewheel.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleMouseWheel\",\n    value: function toggleMouseWheel(enabled) {\n      if (enabled == null) {\n        if (this.isMouseWheelEnabled()) {\n          this.disableMouseWheel();\n        } else {\n          this.enableMouseWheel();\n        }\n      } else if (enabled) {\n        this.enableMouseWheel();\n      } else {\n        this.disableMouseWheel();\n      }\n\n      return this;\n    } // #endregion\n    // #region panning\n\n  }, {\n    key: \"isPannable\",\n    value: function isPannable() {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        return this.scroller.pannable;\n      }\n\n      return this.panning.pannable;\n    }\n  }, {\n    key: \"enablePanning\",\n    value: function enablePanning() {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        this.scroller.enablePanning();\n      } else {\n        this.panning.enablePanning();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"disablePanning\",\n    value: function disablePanning() {\n      var scroller = this.scroller.widget;\n\n      if (scroller) {\n        this.scroller.disablePanning();\n      } else {\n        this.panning.disablePanning();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"togglePanning\",\n    value: function togglePanning(pannable) {\n      if (pannable == null) {\n        if (this.isPannable()) {\n          this.disablePanning();\n        } else {\n          this.enablePanning();\n        }\n      } else if (pannable !== this.isPannable()) {\n        if (pannable) {\n          this.enablePanning();\n        } else {\n          this.disablePanning();\n        }\n      }\n\n      return this;\n    } // #endregion\n    // #region scroller\n\n  }, {\n    key: \"lockScroller\",\n    value: function lockScroller() {\n      var _a;\n\n      (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.lock();\n    }\n  }, {\n    key: \"unlockScroller\",\n    value: function unlockScroller() {\n      var _a;\n\n      (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.unlock();\n    }\n  }, {\n    key: \"updateScroller\",\n    value: function updateScroller() {\n      var _a;\n\n      (_a = this.scroller.widget) === null || _a === void 0 ? void 0 : _a.update();\n    }\n  }, {\n    key: \"getScrollbarPosition\",\n    value: function getScrollbarPosition() {\n      var scroller = this.scroller.widget;\n      return scroller.scrollbarPosition();\n    }\n  }, {\n    key: \"setScrollbarPosition\",\n    value: function setScrollbarPosition(left, top, options) {\n      var scroller = this.scroller.widget;\n      scroller.scrollbarPosition(left, top, options);\n      return this;\n    }\n    /**\n     * Try to scroll to ensure that the position (x,y) on the graph (in local\n     * coordinates) is at the center of the viewport. If only one of the\n     * coordinates is specified, only scroll in the specified dimension and\n     * keep the other coordinate unchanged.\n     */\n\n  }, {\n    key: \"scrollToPoint\",\n    value: function scrollToPoint(x, y, options) {\n      var scroller = this.scroller.widget;\n      scroller.scrollToPoint(x, y, options);\n      return this;\n    }\n    /**\n     * Try to scroll to ensure that the center of graph content is at the\n     * center of the viewport.\n     */\n\n  }, {\n    key: \"scrollToContent\",\n    value: function scrollToContent(options) {\n      var scroller = this.scroller.widget;\n      scroller.scrollToContent(options);\n      return this;\n    }\n    /**\n     * Try to scroll to ensure that the center of cell is at the center of\n     * the viewport.\n     */\n\n  }, {\n    key: \"scrollToCell\",\n    value: function scrollToCell(cell, options) {\n      var scroller = this.scroller.widget;\n      scroller.scrollToCell(cell, options);\n      return this;\n    }\n  }, {\n    key: \"transitionToPoint\",\n    value: function transitionToPoint(x, y, options) {\n      var scroller = this.scroller.widget;\n      scroller.transitionToPoint(x, y, options);\n      return this;\n    }\n  }, {\n    key: \"transitionToRect\",\n    value: function transitionToRect(rect) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var scroller = this.scroller.widget;\n      scroller.transitionToRect(rect, options);\n      return this;\n    } // #endregion\n    // #region selection\n\n  }, {\n    key: \"isSelectionEnabled\",\n    value: function isSelectionEnabled() {\n      return !this.selection.disabled;\n    }\n  }, {\n    key: \"enableSelection\",\n    value: function enableSelection() {\n      this.selection.enable();\n      return this;\n    }\n  }, {\n    key: \"disableSelection\",\n    value: function disableSelection() {\n      this.selection.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isSelectionEnabled()) {\n          if (enabled) {\n            this.enableSelection();\n          } else {\n            this.disableSelection();\n          }\n        }\n      } else if (this.isSelectionEnabled()) {\n        this.disableSelection();\n      } else {\n        this.enableSelection();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isMultipleSelection\",\n    value: function isMultipleSelection() {\n      return this.selection.isMultiple();\n    }\n  }, {\n    key: \"enableMultipleSelection\",\n    value: function enableMultipleSelection() {\n      this.selection.enableMultiple();\n      return this;\n    }\n  }, {\n    key: \"disableMultipleSelection\",\n    value: function disableMultipleSelection() {\n      this.selection.disableMultiple();\n      return this;\n    }\n  }, {\n    key: \"toggleMultipleSelection\",\n    value: function toggleMultipleSelection(multiple) {\n      if (multiple != null) {\n        if (multiple !== this.isMultipleSelection()) {\n          if (multiple) {\n            this.enableMultipleSelection();\n          } else {\n            this.disableMultipleSelection();\n          }\n        }\n      } else if (this.isMultipleSelection()) {\n        this.disableMultipleSelection();\n      } else {\n        this.enableMultipleSelection();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isSelectionMovable\",\n    value: function isSelectionMovable() {\n      return this.selection.widget.options.movable !== false;\n    }\n  }, {\n    key: \"enableSelectionMovable\",\n    value: function enableSelectionMovable() {\n      this.selection.widget.options.movable = true;\n      return this;\n    }\n  }, {\n    key: \"disableSelectionMovable\",\n    value: function disableSelectionMovable() {\n      this.selection.widget.options.movable = false;\n      return this;\n    }\n  }, {\n    key: \"toggleSelectionMovable\",\n    value: function toggleSelectionMovable(movable) {\n      if (movable != null) {\n        if (movable !== this.isSelectionMovable()) {\n          if (movable) {\n            this.enableSelectionMovable();\n          } else {\n            this.disableSelectionMovable();\n          }\n        }\n      } else if (this.isSelectionMovable()) {\n        this.disableSelectionMovable();\n      } else {\n        this.enableSelectionMovable();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isRubberbandEnabled\",\n    value: function isRubberbandEnabled() {\n      return !this.selection.rubberbandDisabled;\n    }\n  }, {\n    key: \"enableRubberband\",\n    value: function enableRubberband() {\n      this.selection.enableRubberband();\n      return this;\n    }\n  }, {\n    key: \"disableRubberband\",\n    value: function disableRubberband() {\n      this.selection.disableRubberband();\n      return this;\n    }\n  }, {\n    key: \"toggleRubberband\",\n    value: function toggleRubberband(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isRubberbandEnabled()) {\n          if (enabled) {\n            this.enableRubberband();\n          } else {\n            this.disableRubberband();\n          }\n        }\n      } else if (this.isRubberbandEnabled()) {\n        this.disableRubberband();\n      } else {\n        this.enableRubberband();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isStrictRubberband\",\n    value: function isStrictRubberband() {\n      return this.selection.widget.options.strict === true;\n    }\n  }, {\n    key: \"enableStrictRubberband\",\n    value: function enableStrictRubberband() {\n      this.selection.widget.options.strict = true;\n      return this;\n    }\n  }, {\n    key: \"disableStrictRubberband\",\n    value: function disableStrictRubberband() {\n      this.selection.widget.options.strict = false;\n      return this;\n    }\n  }, {\n    key: \"toggleStrictRubberband\",\n    value: function toggleStrictRubberband(strict) {\n      if (strict != null) {\n        if (strict !== this.isStrictRubberband()) {\n          if (strict) {\n            this.enableStrictRubberband();\n          } else {\n            this.disableStrictRubberband();\n          }\n        }\n      } else if (this.isStrictRubberband()) {\n        this.disableStrictRubberband();\n      } else {\n        this.enableStrictRubberband();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setRubberbandModifiers\",\n    value: function setRubberbandModifiers(modifiers) {\n      this.selection.setModifiers(modifiers);\n    }\n  }, {\n    key: \"setSelectionFilter\",\n    value: function setSelectionFilter(filter) {\n      this.selection.setFilter(filter);\n      return this;\n    }\n  }, {\n    key: \"setSelectionDisplayContent\",\n    value: function setSelectionDisplayContent(content) {\n      this.selection.setContent(content);\n      return this;\n    }\n  }, {\n    key: \"isSelectionEmpty\",\n    value: function isSelectionEmpty() {\n      return this.selection.isEmpty();\n    }\n  }, {\n    key: \"cleanSelection\",\n    value: function cleanSelection(options) {\n      this.selection.clean(options);\n      return this;\n    }\n  }, {\n    key: \"resetSelection\",\n    value: function resetSelection(cells, options) {\n      this.selection.reset(cells, options);\n      return this;\n    }\n  }, {\n    key: \"getSelectedCells\",\n    value: function getSelectedCells() {\n      return this.selection.cells;\n    }\n  }, {\n    key: \"getSelectedCellCount\",\n    value: function getSelectedCellCount() {\n      return this.selection.length;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(cell) {\n      return this.selection.isSelected(cell);\n    }\n  }, {\n    key: \"select\",\n    value: function select(cells, options) {\n      this.selection.select(cells, options);\n      return this;\n    }\n  }, {\n    key: \"unselect\",\n    value: function unselect(cells, options) {\n      this.selection.unselect(cells, options);\n      return this;\n    } // #endregion\n    // #region snapline\n\n  }, {\n    key: \"isSnaplineEnabled\",\n    value: function isSnaplineEnabled() {\n      return !this.snapline.widget.disabled;\n    }\n  }, {\n    key: \"enableSnapline\",\n    value: function enableSnapline() {\n      this.snapline.widget.enable();\n      return this;\n    }\n  }, {\n    key: \"disableSnapline\",\n    value: function disableSnapline() {\n      this.snapline.widget.disable();\n      return this;\n    }\n  }, {\n    key: \"toggleSnapline\",\n    value: function toggleSnapline(enabled) {\n      if (enabled != null) {\n        if (enabled !== this.isSnaplineEnabled()) {\n          if (enabled) {\n            this.enableSnapline();\n          } else {\n            this.disableSnapline();\n          }\n        }\n      } else {\n        if (this.isSnaplineEnabled()) {\n          this.disableSnapline();\n        } else {\n          this.enableSnapline();\n        }\n\n        return this;\n      }\n    }\n  }, {\n    key: \"hideSnapline\",\n    value: function hideSnapline() {\n      this.snapline.widget.hide();\n      return this;\n    }\n  }, {\n    key: \"setSnaplineFilter\",\n    value: function setSnaplineFilter(filter) {\n      this.snapline.widget.setFilter(filter);\n      return this;\n    }\n  }, {\n    key: \"isSnaplineOnResizingEnabled\",\n    value: function isSnaplineOnResizingEnabled() {\n      return this.snapline.widget.options.resizing === true;\n    }\n  }, {\n    key: \"enableSnaplineOnResizing\",\n    value: function enableSnaplineOnResizing() {\n      this.snapline.widget.options.resizing = true;\n      return this;\n    }\n  }, {\n    key: \"disableSnaplineOnResizing\",\n    value: function disableSnaplineOnResizing() {\n      this.snapline.widget.options.resizing = false;\n      return this;\n    }\n  }, {\n    key: \"toggleSnaplineOnResizing\",\n    value: function toggleSnaplineOnResizing(enableOnResizing) {\n      if (enableOnResizing != null) {\n        if (enableOnResizing !== this.isSnaplineOnResizingEnabled()) {\n          if (enableOnResizing) {\n            this.enableSnaplineOnResizing();\n          } else {\n            this.disableSnaplineOnResizing();\n          }\n        }\n      } else if (this.isSnaplineOnResizingEnabled()) {\n        this.disableSnaplineOnResizing();\n      } else {\n        this.enableSnaplineOnResizing();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isSharpSnapline\",\n    value: function isSharpSnapline() {\n      return this.snapline.widget.options.sharp === true;\n    }\n  }, {\n    key: \"enableSharpSnapline\",\n    value: function enableSharpSnapline() {\n      this.snapline.widget.options.sharp = true;\n      return this;\n    }\n  }, {\n    key: \"disableSharpSnapline\",\n    value: function disableSharpSnapline() {\n      this.snapline.widget.options.sharp = false;\n      return this;\n    }\n  }, {\n    key: \"toggleSharpSnapline\",\n    value: function toggleSharpSnapline(sharp) {\n      if (sharp != null) {\n        if (sharp !== this.isSharpSnapline()) {\n          if (sharp) {\n            this.enableSharpSnapline();\n          } else {\n            this.disableSharpSnapline();\n          }\n        }\n      } else if (this.isSharpSnapline()) {\n        this.disableSharpSnapline();\n      } else {\n        this.enableSharpSnapline();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getSnaplineTolerance\",\n    value: function getSnaplineTolerance() {\n      return this.snapline.widget.options.tolerance;\n    }\n  }, {\n    key: \"setSnaplineTolerance\",\n    value: function setSnaplineTolerance(tolerance) {\n      this.snapline.widget.options.tolerance = tolerance;\n      return this;\n    } // #endregion\n    // #region tools\n\n  }, {\n    key: \"removeTools\",\n    value: function removeTools() {\n      this.emit('tools:remove');\n      return this;\n    }\n  }, {\n    key: \"hideTools\",\n    value: function hideTools() {\n      this.emit('tools:hide');\n      return this;\n    }\n  }, {\n    key: \"showTools\",\n    value: function showTools() {\n      this.emit('tools:show');\n      return this;\n    } // #endregion\n    // #region format\n\n  }, {\n    key: \"toSVG\",\n    value: function toSVG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.format.toSVG(callback, options);\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL(callback, options) {\n      this.format.toDataURL(callback, options);\n    }\n  }, {\n    key: \"toPNG\",\n    value: function toPNG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.format.toPNG(callback, options);\n    }\n  }, {\n    key: \"toJPEG\",\n    value: function toJPEG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.format.toJPEG(callback, options);\n    } // #endregion\n    // #region print\n\n  }, {\n    key: \"printPreview\",\n    value: function printPreview(options) {\n      this.print.show(options);\n    } // #endregion\n    // #region dispose\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.clearCells();\n      this.off();\n      this.css.dispose();\n      this.hook.dispose();\n      this.defs.dispose();\n      this.grid.dispose();\n      this.coord.dispose();\n      this.transform.dispose();\n      this.knob.dispose();\n      this.highlight.dispose();\n      this.background.dispose();\n      this.clipboard.dispose();\n      this.snapline.dispose();\n      this.selection.dispose();\n      this.history.dispose();\n      this.keyboard.dispose();\n      this.mousewheel.dispose();\n      this.print.dispose();\n      this.format.dispose();\n      this.minimap.dispose();\n      this.panning.dispose();\n      this.scroller.dispose();\n      this.view.dispose();\n      this.renderer.dispose();\n      this.size.dispose();\n    }\n  }, {\n    key: \"container\",\n    get: function get() {\n      return this.view.container;\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return Graph.toStringTag;\n    }\n  }]);\n\n  return Graph;\n}(Basecoat);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"lockScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"unlockScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"updateScroller\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"getScrollbarPosition\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"setScrollbarPosition\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToPoint\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToContent\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"scrollToCell\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"transitionToPoint\", null);\n\n__decorate([Decorator.checkScroller()], Graph.prototype, \"transitionToRect\", null);\n\n__decorate([Basecoat.dispose()], Graph.prototype, \"dispose\", null);\n\n(function (Graph) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  Graph.View = GraphView;\n  Graph.Hook = HookManager;\n  Graph.Renderer = ViewRenderer;\n  Graph.Keyboard = Shortcut;\n  Graph.MouseWheel = Wheel;\n  Graph.BaseManager = Base;\n  Graph.DefsManager = Defs;\n  Graph.GridManager = Grid;\n  Graph.CoordManager = Coord;\n  Graph.PrintManager = Print;\n  Graph.FormatManager = Format;\n  Graph.MiniMapManager = MiniMap;\n  Graph.HistoryManager = History;\n  Graph.SnaplineManager = Snapline;\n  Graph.ScrollerManager = Scroller;\n  Graph.ClipboardManager = Clipboard;\n  Graph.TransformManager = Transform;\n  Graph.HighlightManager = Highlight;\n  Graph.BackgroundManager = Background;\n  Graph.SelectionManager = Selection;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.toStringTag = \"X6.\".concat(Graph.name);\n\n  function isGraph(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Graph) {\n      return true;\n    }\n\n    var tag = instance[Symbol.toStringTag];\n    var graph = instance;\n\n    if ((tag == null || tag === Graph.toStringTag) && graph.hook != null && graph.view != null && graph.model != null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  Graph.isGraph = isGraph;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  function render(options, data) {\n    var graph = options instanceof HTMLElement ? new Graph({\n      container: options\n    }) : new Graph(options);\n\n    if (data != null) {\n      graph.fromJSON(data);\n    }\n\n    return graph;\n  }\n\n  Graph.render = render;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.registerNode = Node.registry.register;\n  Graph.registerEdge = Edge.registry.register;\n  Graph.registerView = CellView.registry.register;\n  Graph.registerAttr = Registry.Attr.registry.register;\n  Graph.registerGrid = Registry.Grid.registry.register;\n  Graph.registerFilter = Registry.Filter.registry.register;\n  Graph.registerNodeTool = Registry.NodeTool.registry.register;\n  Graph.registerEdgeTool = Registry.EdgeTool.registry.register;\n  Graph.registerBackground = Registry.Background.registry.register;\n  Graph.registerHighlighter = Registry.Highlighter.registry.register;\n  Graph.registerPortLayout = Registry.PortLayout.registry.register;\n  Graph.registerPortLabelLayout = Registry.PortLabelLayout.registry.register;\n  Graph.registerMarker = Registry.Marker.registry.register;\n  Graph.registerRouter = Registry.Router.registry.register;\n  Graph.registerConnector = Registry.Connector.registry.register;\n  Graph.registerAnchor = Registry.NodeAnchor.registry.register;\n  Graph.registerEdgeAnchor = Registry.EdgeAnchor.registry.register;\n  Graph.registerConnectionPoint = Registry.ConnectionPoint.registry.register;\n  Graph.registerConnectionStrategy = Registry.ConnectionStrategy.registry.register;\n  Graph.registerHTMLComponent = HTML.componentRegistry.register;\n})(Graph || (Graph = {}));\n\n(function (Graph) {\n  Graph.unregisterNode = Node.registry.unregister;\n  Graph.unregisterEdge = Edge.registry.unregister;\n  Graph.unregisterView = CellView.registry.unregister;\n  Graph.unregisterAttr = Registry.Attr.registry.unregister;\n  Graph.unregisterGrid = Registry.Grid.registry.unregister;\n  Graph.unregisterFilter = Registry.Filter.registry.unregister;\n  Graph.unregisterNodeTool = Registry.NodeTool.registry.unregister;\n  Graph.unregisterEdgeTool = Registry.EdgeTool.registry.unregister;\n  Graph.unregisterBackground = Registry.Background.registry.unregister;\n  Graph.unregisterHighlighter = Registry.Highlighter.registry.unregister;\n  Graph.unregisterPortLayout = Registry.PortLayout.registry.unregister;\n  Graph.unregisterPortLabelLayout = Registry.PortLabelLayout.registry.unregister;\n  Graph.unregisterMarker = Registry.Marker.registry.unregister;\n  Graph.unregisterRouter = Registry.Router.registry.unregister;\n  Graph.unregisterConnector = Registry.Connector.registry.unregister;\n  Graph.unregisterAnchor = Registry.NodeAnchor.registry.unregister;\n  Graph.unregisterEdgeAnchor = Registry.EdgeAnchor.registry.unregister;\n  Graph.unregisterConnectionPoint = Registry.ConnectionPoint.registry.unregister;\n  Graph.unregisterConnectionStrategy = Registry.ConnectionStrategy.registry.unregister;\n  Graph.unregisterHTMLComponent = HTML.componentRegistry.unregister;\n})(Graph || (Graph = {}));","map":null,"metadata":{},"sourceType":"module"}