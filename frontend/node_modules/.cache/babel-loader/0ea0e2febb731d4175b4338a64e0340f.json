{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { ObjectExt } from '../util';\nimport { Rectangle } from '../geometry';\nimport { Background } from '../registry';\nimport { Base } from './base';\nexport var BackgroundManager = /*#__PURE__*/function (_Base) {\n  _inherits(BackgroundManager, _Base);\n\n  function BackgroundManager() {\n    _classCallCheck(this, BackgroundManager);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BackgroundManager).apply(this, arguments));\n  }\n\n  _createClass(BackgroundManager, [{\n    key: \"init\",\n    value: function init() {\n      this.startListening();\n\n      if (this.options.background) {\n        this.draw(this.options.background);\n      }\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      this.graph.on('scale', this.update, this);\n      this.graph.on('translate', this.update, this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.graph.off('scale', this.update, this);\n      this.graph.off('translate', this.update, this);\n    }\n  }, {\n    key: \"updateBackgroundImage\",\n    value: function updateBackgroundImage() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var backgroundSize = options.size || 'auto auto';\n      var backgroundPosition = options.position || 'center';\n      var scale = this.graph.transform.getScale();\n      var ts = this.graph.translate(); // backgroundPosition\n\n      if (typeof backgroundPosition === 'object') {\n        var x = ts.tx + scale.sx * (backgroundPosition.x || 0);\n        var y = ts.ty + scale.sy * (backgroundPosition.y || 0);\n        backgroundPosition = \"\".concat(x, \"px \").concat(y, \"px\");\n      } // backgroundSize\n\n\n      if (typeof backgroundSize === 'object') {\n        backgroundSize = Rectangle.fromSize(backgroundSize).scale(scale.sx, scale.sy);\n        backgroundSize = \"\".concat(backgroundSize.width, \"px \").concat(backgroundSize.height, \"px\");\n      }\n\n      this.elem.style.backgroundSize = backgroundSize;\n      this.elem.style.backgroundPosition = backgroundPosition;\n    }\n  }, {\n    key: \"drawBackgroundImage\",\n    value: function drawBackgroundImage(img) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!(img instanceof HTMLImageElement)) {\n        this.elem.style.backgroundImage = '';\n        return;\n      } // draw multiple times to show the last image\n\n\n      var cache = this.optionsCache;\n\n      if (cache && cache.image !== options.image) {\n        return;\n      }\n\n      var uri;\n      var opacity = options.opacity;\n      var backgroundSize = options.size;\n      var backgroundRepeat = options.repeat || 'no-repeat';\n      var pattern = Background.registry.get(backgroundRepeat);\n\n      if (typeof pattern === 'function') {\n        var quality = options.quality || 1;\n        img.width *= quality;\n        img.height *= quality;\n        var canvas = pattern(img, options);\n\n        if (!(canvas instanceof HTMLCanvasElement)) {\n          throw new Error('Background pattern must return an HTML Canvas instance');\n        }\n\n        uri = canvas.toDataURL('image/png'); // `repeat` was changed in pattern function\n\n        if (options.repeat && backgroundRepeat !== options.repeat) {\n          backgroundRepeat = options.repeat;\n        } else {\n          backgroundRepeat = 'repeat';\n        }\n\n        if (typeof backgroundSize === 'object') {\n          // recalculate the tile size if an object passed in\n          backgroundSize.width *= canvas.width / img.width;\n          backgroundSize.height *= canvas.height / img.height;\n        } else if (backgroundSize === undefined) {\n          // calcule the tile size if no provided\n          options.size = {\n            width: canvas.width / quality,\n            height: canvas.height / quality\n          };\n        }\n      } else {\n        uri = img.src;\n\n        if (backgroundSize === undefined) {\n          options.size = {\n            width: img.width,\n            height: img.height\n          };\n        }\n      }\n\n      if (cache != null && typeof options.size === 'object' && options.image === cache.image && options.repeat === cache.repeat && options.quality === cache.quality) {\n        cache.size = ObjectExt.clone(options.size);\n      }\n\n      var style = this.elem.style;\n      style.backgroundImage = \"url(\".concat(uri, \")\");\n      style.backgroundRepeat = backgroundRepeat;\n      style.opacity = opacity == null || opacity >= 1 ? '' : \"\".concat(opacity);\n      this.updateBackgroundImage(options);\n    }\n  }, {\n    key: \"updateBackgroundColor\",\n    value: function updateBackgroundColor(color) {\n      this.elem.style.backgroundColor = color || '';\n    }\n  }, {\n    key: \"updateBackgroundOptions\",\n    value: function updateBackgroundOptions(options) {\n      this.graph.options.background = options;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.optionsCache) {\n        this.updateBackgroundImage(this.optionsCache);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(options) {\n      var _this = this;\n\n      var opts = options || {};\n      this.updateBackgroundOptions(options);\n      this.updateBackgroundColor(opts.color);\n\n      if (opts.image) {\n        this.optionsCache = ObjectExt.clone(opts);\n        var img = document.createElement('img');\n\n        img.onload = function () {\n          return _this.drawBackgroundImage(img, options);\n        };\n\n        img.setAttribute('crossorigin', 'anonymous');\n        img.src = opts.image;\n      } else {\n        this.drawBackgroundImage(null);\n        this.optionsCache = null;\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.draw();\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.clear();\n      this.stopListening();\n    }\n  }, {\n    key: \"elem\",\n    get: function get() {\n      return this.view.background;\n    }\n  }]);\n\n  return BackgroundManager;\n}(Base);\n\n__decorate([Base.dispose()], BackgroundManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}