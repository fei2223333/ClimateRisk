{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { singleton, inject } from 'mana-syringe';\nimport { IModelContribution } from '../interface';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { disposableSubscribe } from '../../common/event-helper';\nimport { IGraphProvider } from '../../xflow-main/graph/graph-provider';\nimport * as MODELS from '../constant';\n\nvar GraphModelContribution = /*#__PURE__*/function () {\n  function GraphModelContribution() {\n    var _this = this;\n\n    _classCallCheck(this, GraphModelContribution);\n\n    /** 获取画布实例 */\n    this.getGraphInstance = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var graphInstance, graphConfig;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graphInstance = _context.sent;\n                _context.next = 5;\n                return this.graphProvider.getGraphOptions();\n\n              case 5:\n                graphConfig = _context.sent;\n                return _context.abrupt(\"return\", {\n                  graph: graphInstance,\n                  config: graphConfig\n                });\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n  }\n\n  _createClass(GraphModelContribution, [{\n    key: \"registerModel\",\n    value: function registerModel(registry) {\n      var _this2 = this;\n\n      /** X6 GRAPH META */\n      registry.registerModel({\n        id: MODELS.GRAPH_META.id,\n        getInitialValue: function getInitialValue() {\n          return {\n            flowId: '-1'\n          };\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    return _context2.abrupt(\"return\", Disposable.create(function () {\n                      self.setValue({\n                        flowId: '-1'\n                      });\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n        }\n      });\n      /** Graph 多选状态 */\n\n      registry.registerModel({\n        id: MODELS.GRAPH_ENABLE_MULTI_SELECT.id,\n        getInitialValue: function getInitialValue() {\n          return {\n            isEnable: false\n          };\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    return _context3.abrupt(\"return\", Disposable.create(function () {\n                      self.setValue({\n                        isEnable: false\n                      });\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n        }\n      });\n      /** Graph 全屏 */\n\n      registry.registerModel({\n        id: MODELS.GRAPH_FULLSCREEN.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n            var _this3 = this;\n\n            var handleFullScreenChange;\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    handleFullScreenChange = function handleFullScreenChange() {\n                      return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                        var fullscreen, fullscreenModel;\n                        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                          while (1) {\n                            switch (_context4.prev = _context4.next) {\n                              case 0:\n                                fullscreen = !!document.fullscreenElement;\n                                _context4.next = 3;\n                                return MODELS.GRAPH_FULLSCREEN.getModel(modelService);\n\n                              case 3:\n                                fullscreenModel = _context4.sent;\n                                fullscreenModel.setValue(fullscreen);\n\n                              case 5:\n                              case \"end\":\n                                return _context4.stop();\n                            }\n                          }\n                        }, _callee4);\n                      }));\n                    };\n\n                    document.addEventListener('fullscreenchange', handleFullScreenChange, false);\n                    return _context5.abrupt(\"return\", Disposable.create(function () {\n                      document.removeEventListener('fullscreenchange', handleFullScreenChange);\n                      self.setValue(false);\n                    }));\n\n                  case 3:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n        }\n      });\n      /** 选中Cells状态 */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_CELLS.id,\n        getInitialValue: function getInitialValue() {\n          return [];\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n            var _yield$this$getGraphI, graph, onChange;\n\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI = _context6.sent;\n                    graph = _yield$this$getGraphI.graph;\n\n                    onChange = function onChange(e) {\n                      var selected = e.selected;\n                      self.setValue(selected);\n                    };\n\n                    graph.on('selection:changed', onChange);\n                    return _context6.abrupt(\"return\", Disposable.create(function () {\n                      return graph.off('selection:changed', onChange);\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6, this);\n          }));\n        }\n      });\n      /** 选中Cell状态 */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_CELL.id,\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n            var cellsModel;\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.next = 2;\n                    return MODELS.SELECTED_CELLS.getModel(modelService);\n\n                  case 2:\n                    cellsModel = _context7.sent;\n                    return _context7.abrupt(\"return\", cellsModel.watch(function () {\n                      var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                      self.setValue(_toConsumableArray(cells).pop() || null);\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n        }\n      });\n      /** 选中节点列表状态 */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_NODES.id,\n        getInitialValue: function getInitialValue() {\n          return [];\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n            var model;\n            return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _context8.next = 2;\n                    return MODELS.SELECTED_CELLS.getModel(modelService);\n\n                  case 2:\n                    model = _context8.sent;\n                    return _context8.abrupt(\"return\", model.watch(function () {\n                      var cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                      var nodes = cells.filter(function (cell) {\n                        return cell.isNode();\n                      });\n                      self.setValue(nodes);\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _callee8);\n          }));\n        }\n      });\n      /** 选中节点状态 */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_NODE.id,\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.next = 2;\n                    return MODELS.SELECTED_NODES.getModel(modelService);\n\n                  case 2:\n                    model = _context9.sent;\n                    disposable = model.watch(function (nodes) {\n                      self.setValue(_toConsumableArray(nodes).pop() || null);\n                    });\n                    return _context9.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee9);\n          }));\n        }\n      });\n      /** 是否选中节点状态 */\n\n      registry.registerModel({\n        id: MODELS.IS_NODE_SELECTED.id,\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _context10.next = 2;\n                    return MODELS.SELECTED_NODES.getModel(modelService);\n\n                  case 2:\n                    model = _context10.sent;\n                    disposable = model.watch(function (nodes) {\n                      self.setValue(nodes.length > 0);\n                    });\n                    return _context10.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _callee10);\n          }));\n        }\n      });\n      /** 画布选中节点是否是Group */\n\n      registry.registerModel({\n        id: MODELS.IS_GROUP_SELECTED.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.next = 2;\n                    return MODELS.SELECTED_CELLS.getModel(modelService);\n\n                  case 2:\n                    model = _context11.sent;\n                    disposable = model.watch(function (cells) {\n                      var isGroup = cells.every(function (cell) {\n                        return cell && cell.getProp('isGroup') === true;\n                      });\n                      self.setValue(isGroup);\n                    });\n                    return _context11.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _callee11);\n          }));\n        }\n      });\n      /** 画布选中节点是否是Group */\n\n      registry.registerModel({\n        id: MODELS.SELECTED_GROUPS.id,\n        getInitialValue: function getInitialValue() {\n          return [];\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n              while (1) {\n                switch (_context12.prev = _context12.next) {\n                  case 0:\n                    _context12.next = 2;\n                    return MODELS.SELECTED_NODES.getModel(modelService);\n\n                  case 2:\n                    model = _context12.sent;\n                    disposable = model.watch(function (cells) {\n                      var groups = cells.filter(function (cell) {\n                        return cell && cell.getProp('isGroup') === true;\n                      });\n                      self.setValue(groups);\n                    });\n                    return _context12.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }\n            }, _callee12);\n          }));\n        }\n      });\n      /** 画布选中节点是否是普通节点 */\n\n      registry.registerModel({\n        id: MODELS.IS_NORMAL_NODES_SELECTED.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self, modelService) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n            var model, disposable;\n            return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.next = 2;\n                    return MODELS.SELECTED_CELLS.getModel(modelService);\n\n                  case 2:\n                    model = _context13.sent;\n                    disposable = model.watch(function (cells) {\n                      var isNormalNodesSelected = cells.every(function (cell) {\n                        var isNotGroup = !(cell && cell.getProp('isGroup'));\n                        var isNotGroupChild = !(cell && cell.getProp('group'));\n                        return isNotGroup && isNotGroupChild;\n                      });\n                      var isNodeSelected = cells.length > 0 && isNormalNodesSelected;\n                      self.setValue(isNodeSelected);\n                    });\n                    return _context13.abrupt(\"return\", disposable);\n\n                  case 5:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _callee13);\n          }));\n        }\n      });\n      /** 画布缩放状态 */\n\n      registry.registerModel({\n        id: MODELS.GRAPH_SCALE.id,\n        getInitialValue: function getInitialValue() {\n          return {\n            zoomFactor: -1\n          };\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n            var _yield$this$getGraphI2, graph, onChange;\n\n            return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n              while (1) {\n                switch (_context14.prev = _context14.next) {\n                  case 0:\n                    _context14.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI2 = _context14.sent;\n                    graph = _yield$this$getGraphI2.graph;\n\n                    onChange = function onChange(e) {\n                      var factor = graph.zoom();\n                      self.setValue(Object.assign(Object.assign({}, e), {\n                        zoomFactor: factor\n                      }));\n                    };\n\n                    graph.on('scale', onChange);\n                    return _context14.abrupt(\"return\", Disposable.create(function () {\n                      return graph.off('scale', onChange);\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }\n            }, _callee14, this);\n          }));\n        }\n      });\n      /** 画布右键菜单状态 */\n\n      registry.registerModel({\n        id: MODELS.CONTEXTMENU_TARGET.id,\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n            var _yield$this$getGraphI3, graph, config, onContextMenu, toDispose;\n\n            return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    _context15.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI3 = _context15.sent;\n                    graph = _yield$this$getGraphI3.graph;\n                    config = _yield$this$getGraphI3.config;\n\n                    onContextMenu = function onContextMenu(type) {\n                      return function (e) {\n                        var x = e.x,\n                            y = e.y;\n                        var pagePoint = graph.localToClient({\n                          x: x,\n                          y: y\n                        });\n                        var clientRect = config.rootContainer.getBoundingClientRect();\n                        var anchor = {\n                          x: pagePoint.x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0),\n                          y: pagePoint.y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0)\n                        };\n                        self.setValue({\n                          type: type,\n                          anchor: anchor,\n                          data: e,\n                          cell: e.cell\n                        });\n                      };\n                    };\n\n                    toDispose = new DisposableCollection();\n                    toDispose.pushAll([disposableSubscribe(graph, 'node:contextmenu', onContextMenu('node')), disposableSubscribe(graph, 'edge:contextmenu', onContextMenu('edge')), disposableSubscribe(graph, 'blank:contextmenu', onContextMenu('blank'))]);\n                    return _context15.abrupt(\"return\", toDispose);\n\n                  case 9:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, _callee15, this);\n          }));\n        }\n      });\n      /** 画布历史Redo */\n\n      registry.registerModel({\n        id: MODELS.HISTORY_REDOABLE.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n            var _yield$this$getGraphI4, graph, onChange;\n\n            return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n              while (1) {\n                switch (_context16.prev = _context16.next) {\n                  case 0:\n                    _context16.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI4 = _context16.sent;\n                    graph = _yield$this$getGraphI4.graph;\n\n                    onChange = function onChange() {\n                      var canRedo = graph.history.canRedo();\n                      self.setValue(canRedo);\n                    };\n\n                    if (graph.history) {\n                      graph.history.on('change', onChange);\n                    }\n\n                    return _context16.abrupt(\"return\", Disposable.create(function () {\n                      return graph.history.off('change', onChange);\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }\n            }, _callee16, this);\n          }));\n        }\n      });\n      /** 画布历史undo */\n\n      registry.registerModel({\n        id: MODELS.HISTORY_UNDOABLE.id,\n        getInitialValue: function getInitialValue() {\n          return false;\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n            var _yield$this$getGraphI5, graph, onChange;\n\n            return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n              while (1) {\n                switch (_context17.prev = _context17.next) {\n                  case 0:\n                    _context17.next = 2;\n                    return this.getGraphInstance();\n\n                  case 2:\n                    _yield$this$getGraphI5 = _context17.sent;\n                    graph = _yield$this$getGraphI5.graph;\n\n                    onChange = function onChange() {\n                      var canUndo = graph.history.canUndo();\n                      self.setValue(canUndo);\n                    };\n\n                    if (graph.history) {\n                      graph.history.on('change', onChange);\n                    }\n\n                    return _context17.abrupt(\"return\", Disposable.create(function () {\n                      return graph.history.off('change', onChange);\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context17.stop();\n                }\n              }\n            }, _callee17, this);\n          }));\n        }\n      });\n    }\n  }]);\n\n  return GraphModelContribution;\n}();\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], GraphModelContribution.prototype, \"graphProvider\", void 0);\n\nGraphModelContribution = __decorate([singleton({\n  contrib: IModelContribution\n})], GraphModelContribution);\nexport { GraphModelContribution };","map":null,"metadata":{},"sourceType":"module"}