{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Dom, Vector } from '../../util';\nimport { View } from '../../view/view';\nimport { Point, Angle } from '../../geometry';\nexport var Handle = /*#__PURE__*/function () {\n  function Handle() {\n    _classCallCheck(this, Handle);\n  }\n\n  _createClass(Handle, [{\n    key: \"initHandles\",\n    value: function initHandles() {\n      var _this = this,\n          _this$delegateEvents;\n\n      this.handles = [];\n\n      if (this.handleOptions.handles) {\n        this.handleOptions.handles.forEach(function (handle) {\n          return _this.addHandle(handle);\n        });\n      }\n\n      if (this.handleOptions.type === 'pie') {\n        if (this.pie.toggles) {\n          var className = ClassNames.pieToggle;\n          this.$pieToggles = {};\n          this.pie.toggles.forEach(function (item) {\n            var $elem = _this.$('<div/>');\n\n            _this.applyAttrs($elem, item.attrs);\n\n            $elem.addClass(className).addClass(\"\".concat(className, \"-pos-\").concat(item.position || 'e')).attr('data-name', item.name).appendTo(_this.container);\n            _this.$pieToggles[item.name] = $elem;\n          });\n        }\n\n        this.setPieIcons();\n      }\n\n      if (this.$handleContainer) {\n        var type = this.handleOptions.type || 'surround';\n        this.$handleContainer.addClass(ClassNames.wrap).addClass(ClassNames.animate).addClass(\"\".concat(ClassNames.handle, \"-\").concat(type));\n      }\n\n      this.delegateEvents((_this$delegateEvents = {}, _defineProperty(_this$delegateEvents, \"mousedown .\".concat(ClassNames.handle), 'onHandleMouseDown'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(ClassNames.handle), 'onHandleMouseDown'), _defineProperty(_this$delegateEvents, \"mousedown .\".concat(ClassNames.pieToggle), 'onPieToggleMouseDown'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(ClassNames.pieToggle), 'onPieToggleMouseDown'), _this$delegateEvents));\n    }\n  }, {\n    key: \"onHandleMouseDown\",\n    value: function onHandleMouseDown(evt) {\n      var action = this.$(evt.currentTarget).closest(\".\".concat(ClassNames.handle)).attr('data-action');\n\n      if (action) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        this.setEventData(evt, {\n          action: action,\n          clientX: evt.clientX,\n          clientY: evt.clientY,\n          startX: evt.clientX,\n          startY: evt.clientY\n        });\n\n        if (evt.type === 'mousedown' && evt.button === 2) {\n          this.triggerHandleAction(action, 'contextmenu', evt);\n        } else {\n          this.triggerHandleAction(action, 'mousedown', evt);\n          this.delegateDocumentEvents({\n            mousemove: 'onHandleMouseMove',\n            touchmove: 'onHandleMouseMove',\n            mouseup: 'onHandleMouseUp',\n            touchend: 'onHandleMouseUp',\n            touchcancel: 'onHandleMouseUp'\n          }, evt.data);\n        }\n      }\n    }\n  }, {\n    key: \"onHandleMouseMove\",\n    value: function onHandleMouseMove(evt) {\n      var data = this.getEventData(evt);\n      var action = data.action;\n\n      if (action) {\n        this.triggerHandleAction(action, 'mousemove', evt);\n      }\n    }\n  }, {\n    key: \"onHandleMouseUp\",\n    value: function onHandleMouseUp(evt) {\n      var data = this.getEventData(evt);\n      var action = data.action;\n\n      if (action) {\n        this.triggerHandleAction(action, 'mouseup', evt);\n        this.undelegateDocumentEvents();\n      }\n    }\n  }, {\n    key: \"triggerHandleAction\",\n    value: function triggerHandleAction(action, eventName, evt, args) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      var e = this.normalizeEvent(evt);\n      var data = this.getEventData(e);\n      var local = this.graph.snapToGrid(e.clientX, e.clientY);\n      var origin = this.graph.snapToGrid(data.clientX, data.clientY);\n      var dx = local.x - origin.x;\n      var dy = local.y - origin.y;\n      this.trigger(\"action:\".concat(action, \":\").concat(eventName), Object.assign({\n        e: e,\n        dx: dx,\n        dy: dy,\n        x: local.x,\n        y: local.y,\n        offsetX: evt.clientX - data.startX,\n        offsetY: evt.clientY - data.startY\n      }, args));\n      data.clientX = evt.clientX;\n      data.clientY = evt.clientY;\n    }\n  }, {\n    key: \"onPieToggleMouseDown\",\n    value: function onPieToggleMouseDown(evt) {\n      evt.stopPropagation();\n      var name = this.$(evt.target).closest(\".\".concat(ClassNames.pieToggle)).attr('data-name');\n\n      if (!this.isOpen(name)) {\n        if (this.isOpen()) {\n          this.toggleState();\n        }\n      }\n\n      this.toggleState(name);\n    }\n  }, {\n    key: \"setPieIcons\",\n    value: function setPieIcons() {\n      var _this2 = this;\n\n      if (this.handleOptions.type === 'pie') {\n        this.$handleContainer.find(\".\".concat(ClassNames.handle)).each(function (_, elem) {\n          var $elem = _this2.$(elem);\n\n          var action = $elem.attr('data-action');\n          var className = ClassNames.pieSlice;\n\n          var handle = _this2.getHandle(action);\n\n          if (!handle || !handle.icon) {\n            var contect = window.getComputedStyle(elem, ':before').getPropertyValue('content');\n\n            if (contect && contect !== 'none') {\n              var $icons = $elem.find(\".\".concat(className, \"-txt\"));\n\n              if ($icons.length) {\n                Vector.create($icons[0]).text(contect.replace(/['\"]/g, ''));\n              }\n            }\n\n            var bgImg = $elem.css('background-image');\n\n            if (bgImg) {\n              var matches = bgImg.match(/url\\(['\"]?([^'\"]+)['\"]?\\)/);\n\n              if (matches) {\n                var href = matches[1];\n                var $imgs = $elem.find(\".\".concat(className, \"-img\"));\n\n                if ($imgs.length > 0) {\n                  Vector.create($imgs[0]).attr('xlink:href', href);\n                }\n              }\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"getHandleIdx\",\n    value: function getHandleIdx(name) {\n      return this.handles.findIndex(function (item) {\n        return item.name === name;\n      });\n    }\n  }, {\n    key: \"hasHandle\",\n    value: function hasHandle(name) {\n      return this.getHandleIdx(name) >= 0;\n    }\n  }, {\n    key: \"getHandle\",\n    value: function getHandle(name) {\n      return this.handles.find(function (item) {\n        return item.name === name;\n      });\n    }\n  }, {\n    key: \"renderHandle\",\n    value: function renderHandle(handle) {\n      var $handle = this.$('<div/>').addClass(\"\".concat(ClassNames.handle, \" \").concat(ClassNames.handle, \"-\").concat(handle.name)).attr('data-action', handle.name).prop('draggable', false);\n\n      if (this.handleOptions.type === 'pie') {\n        var index = this.getHandleIdx(handle.name);\n        var pie = this.pie;\n        var outerRadius = pie.outerRadius;\n        var innerRadius = pie.innerRadius;\n        var offset = (outerRadius + innerRadius) / 2;\n        var ratio = new Point(outerRadius, outerRadius);\n        var delta = Angle.toRad(pie.sliceAngle);\n        var curRad = index * delta + Angle.toRad(pie.startAngle);\n        var nextRad = curRad + delta;\n        var pathData = Dom.createSlicePathData(innerRadius, outerRadius, curRad, nextRad);\n        var vSvg = Vector.create('svg').addClass(\"\".concat(ClassNames.pieSlice, \"-svg\"));\n        var vPath = Vector.create('path').addClass(ClassNames.pieSlice).attr('d', pathData).translate(outerRadius, outerRadius);\n        var pos = Point.fromPolar(offset, -curRad - delta / 2, ratio).toJSON();\n        var iconSize = pie.iconSize;\n        var vImg = Vector.create('image').attr(pos).addClass(\"\".concat(ClassNames.pieSlice, \"-img\"));\n        pos.y = pos.y + iconSize - 2;\n        var vText = Vector.create('text', {\n          'font-size': iconSize\n        }).attr(pos).addClass(\"\".concat(ClassNames.pieSlice, \"-txt\"));\n        vImg.attr({\n          width: iconSize,\n          height: iconSize\n        });\n        vImg.translate(-iconSize / 2, -iconSize / 2);\n        vText.translate(-iconSize / 2, -iconSize / 2);\n        vSvg.append([vPath, vImg, vText]);\n        $handle.append(vSvg.node);\n      } else {\n        $handle.addClass(\"\".concat(ClassNames.handle, \"-pos-\").concat(handle.position));\n\n        if (handle.content) {\n          if (typeof handle.content === 'string') {\n            $handle.html(handle.content);\n          } else {\n            $handle.append(handle.content);\n          }\n        }\n      }\n\n      this.updateHandleIcon($handle, handle.icon);\n      this.applyAttrs($handle, handle.attrs);\n      return $handle;\n    }\n  }, {\n    key: \"addHandle\",\n    value: function addHandle(handle) {\n      var _this3 = this;\n\n      if (!this.hasHandle(handle.name)) {\n        this.handles.push(handle);\n        var events = handle.events;\n\n        if (events) {\n          Object.keys(events).forEach(function (action) {\n            var callback = events[action];\n            var name = \"action:\".concat(handle.name, \":\").concat(action);\n\n            if (typeof callback === 'string') {\n              _this3.on(name, _this3[callback], _this3);\n            } else {\n              _this3.on(name, callback);\n            }\n          });\n        }\n\n        if (this.$handleContainer) {\n          this.$handleContainer.append(this.renderHandle(handle));\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addHandles\",\n    value: function addHandles(handles) {\n      var _this4 = this;\n\n      handles.forEach(function (handle) {\n        return _this4.addHandle(handle);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeHandles\",\n    value: function removeHandles() {\n      while (this.handles.length) {\n        this.removeHandle(this.handles[0].name);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeHandle\",\n    value: function removeHandle(name) {\n      var _this5 = this;\n\n      var index = this.getHandleIdx(name);\n      var handle = this.handles[index];\n\n      if (handle) {\n        if (handle.events) {\n          Object.keys(handle.events).forEach(function (event) {\n            _this5.off(\"action:\".concat(name, \":\").concat(event));\n          });\n        }\n\n        this.getHandleElem(name).remove();\n        this.handles.splice(index, 1);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"changeHandle\",\n    value: function changeHandle(name, newHandle) {\n      var handle = this.getHandle(name);\n\n      if (handle) {\n        this.removeHandle(name);\n        this.addHandle(Object.assign(Object.assign({}, handle), newHandle));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"toggleHandle\",\n    value: function toggleHandle(name, selected) {\n      var handle = this.getHandle(name);\n\n      if (handle) {\n        var $handle = this.getHandleElem(name);\n        var className = \"\".concat(ClassNames.handle, \"-selected\");\n\n        if (selected === undefined) {\n          selected = !$handle.hasClass(className); // eslint-disable-line\n        }\n\n        $handle.toggleClass(className, selected);\n        var icon = selected ? handle.iconSelected : handle.icon;\n\n        if (icon) {\n          this.updateHandleIcon($handle, icon);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"selectHandle\",\n    value: function selectHandle(name) {\n      return this.toggleHandle(name, true);\n    }\n  }, {\n    key: \"deselectHandle\",\n    value: function deselectHandle(name) {\n      return this.toggleHandle(name, false);\n    }\n  }, {\n    key: \"deselectAllHandles\",\n    value: function deselectAllHandles() {\n      var _this6 = this;\n\n      this.handles.forEach(function (handle) {\n        return _this6.deselectHandle(handle.name);\n      });\n      return this;\n    }\n  }, {\n    key: \"getHandleElem\",\n    value: function getHandleElem(name) {\n      return this.$handleContainer.find(\".\".concat(ClassNames.handle, \"-\").concat(name));\n    }\n  }, {\n    key: \"updateHandleIcon\",\n    value: function updateHandleIcon($handle, icon) {\n      if (this.handleOptions.type === 'pie') {\n        var $icons = $handle.find(\".\".concat(ClassNames.pieSliceImg));\n        this.$($icons[0]).attr('xlink:href', icon || '');\n      } else {\n        $handle.css('background-image', icon ? \"url(\".concat(icon, \")\") : '');\n      }\n    }\n  }, {\n    key: \"isRendered\",\n    value: function isRendered() {\n      return this.$handleContainer != null;\n    }\n  }, {\n    key: \"isOpen\",\n    value: function isOpen(name) {\n      if (this.isRendered()) {\n        return name ? this.$pieToggles[name].hasClass(ClassNames.pieToggleOpened) : this.$handleContainer.hasClass(\"\".concat(ClassNames.pieOpended));\n      }\n\n      return false;\n    }\n  }, {\n    key: \"toggleState\",\n    value: function toggleState(name) {\n      var _this7 = this;\n\n      if (this.isRendered()) {\n        var $handleContainer = this.$handleContainer;\n        Object.keys(this.$pieToggles).forEach(function (key) {\n          var $toggle = _this7.$pieToggles[key];\n          $toggle.removeClass(ClassNames.pieToggleOpened);\n        });\n\n        if (this.isOpen()) {\n          this.trigger('pie:close', {\n            name: name\n          });\n          $handleContainer.removeClass(ClassNames.pieOpended);\n        } else {\n          this.trigger('pie:open', {\n            name: name\n          });\n\n          if (name) {\n            var toggles = this.pie.toggles;\n            var toggle = toggles && toggles.find(function (i) {\n              return i.name === name;\n            });\n\n            if (toggle) {\n              $handleContainer.attr({\n                'data-pie-toggle-name': toggle.name,\n                'data-pie-toggle-position': toggle.position\n              });\n            }\n\n            this.$pieToggles[name].addClass(ClassNames.pieToggleOpened);\n          }\n\n          $handleContainer.addClass(ClassNames.pieOpended);\n        }\n      }\n    }\n  }, {\n    key: \"applyAttrs\",\n    value: function applyAttrs(elem, attrs) {\n      if (attrs) {\n        var $elem = View.$(elem);\n        Object.keys(attrs).forEach(function (selector) {\n          var $element = $elem.find(selector).addBack().filter(selector);\n\n          var _a = attrs[selector],\n              cls = _a.class,\n              attr = __rest(_a, [\"class\"]);\n\n          if (cls) {\n            $element.addClass(cls);\n          }\n\n          $element.attr(attr);\n        });\n      }\n    }\n  }, {\n    key: \"handleClassName\",\n    get: function get() {\n      return ClassNames.handle;\n    }\n  }, {\n    key: \"pie\",\n    get: function get() {\n      return Object.assign(Object.assign({}, Handle.defaultPieOptions), this.handleOptions.pie);\n    }\n  }]);\n\n  return Handle;\n}();\n\n(function (Handle) {\n  Handle.defaultPieOptions = {\n    innerRadius: 20,\n    outerRadius: 50,\n    sliceAngle: 45,\n    startAngle: 0,\n    iconSize: 14,\n    toggles: [{\n      name: 'default',\n      position: 'e'\n    }]\n  };\n})(Handle || (Handle = {}));\n\nvar ClassNames;\n\n(function (ClassNames) {\n  ClassNames.handle = View.prototype.prefixClassName('widget-handle');\n  ClassNames.wrap = \"\".concat(ClassNames.handle, \"-wrap\");\n  ClassNames.animate = \"\".concat(ClassNames.handle, \"-animate\");\n  ClassNames.pieOpended = \"\".concat(ClassNames.handle, \"-pie-opened\");\n  ClassNames.pieToggle = \"\".concat(ClassNames.handle, \"-pie-toggle\");\n  ClassNames.pieToggleOpened = \"\".concat(ClassNames.handle, \"-pie-toggle-opened\");\n  ClassNames.pieSlice = \"\".concat(ClassNames.handle, \"-pie-slice\");\n  ClassNames.pieSliceImg = \"\".concat(ClassNames.handle, \"-pie-slice-img\");\n})(ClassNames || (ClassNames = {}));","map":null,"metadata":{},"sourceType":"module"}