{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { StringExt } from '@antv/x6';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsAddEdge;\n\n(function (NsAddEdge) {\n  /** Command: 用于注册named factory */\n  NsAddEdge.command = XFlowEdgeCommands.ADD_EDGE;\n  /** hookName */\n\n  NsAddEdge.hookKey = 'addEdge';\n  /** edge id 类型 */\n\n  NsAddEdge.createEdgeId = function (edge) {\n    if (StringExt.isString(edge.source)) {\n      return \"\".concat(edge.source, \":\").concat(edge.sourcePortId, \"-\").concat(edge.target, \":\").concat(edge.targetPortId);\n    }\n\n    if (isX6EdgeConfig(edge)) {\n      var x6EdgeConfig = edge;\n      return \"\".concat(x6EdgeConfig.source.cell, \":\").concat(x6EdgeConfig.source.port, \"-\").concat(x6EdgeConfig.target.cell, \":\").concat(x6EdgeConfig.target.port);\n    }\n\n    if (isX6EdgePlainConfig(edge)) {\n      var _x6EdgeConfig = edge;\n      return \"\".concat(_x6EdgeConfig.sourceCell, \":\").concat(_x6EdgeConfig.sourcePort, \"-\").concat(_x6EdgeConfig.targetCell, \":\").concat(_x6EdgeConfig.targetPort);\n    }\n  };\n\n  function isX6EdgeConfig(edge) {\n    return edge.source && edge.source.cell && StringExt.isString(edge.source.cell);\n  }\n\n  NsAddEdge.isX6EdgeConfig = isX6EdgeConfig;\n\n  function isX6EdgePlainConfig(edge) {\n    return edge.sourceCell && StringExt.isString(edge.sourceCell);\n  }\n\n  NsAddEdge.isX6EdgePlainConfig = isX6EdgePlainConfig;\n})(NsAddEdge || (NsAddEdge = {}));\n\nvar AddEdgeCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function AddEdgeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, AddEdgeCommand);\n\n    /** 处理edgeConfig的兜底逻辑 */\n    this.processEdgeConfig = function (args, edge) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _args$createIdService, createIdService;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (edge.id) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _args$createIdService = args.createIdService, createIdService = _args$createIdService === void 0 ? NsAddEdge.createEdgeId : _args$createIdService;\n                _context.next = 4;\n                return createIdService(edge);\n\n              case 4:\n                edge.id = _context.sent;\n\n              case 5:\n                /** 处理xflow edge 和x6 edge的字段差异  */\n                if (edge.sourcePortId && !edge.sourcePort) {\n                  edge.sourcePort = edge.sourcePortId;\n                  edge.targetPort = edge.targetPortId;\n                }\n\n                return _context.abrupt(\"return\", edge);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    };\n    /** 执行Cmd */\n\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context3.next = 4;\n                return hooks.addEdge.call(\n                /** 执行 hooks pipeline处理args */\n                args,\n                /** 执行 callback */\n                function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var cellFactory, createEdgeService, commandService, options, graph, rawEdge, res, edgeConfig, edgeCell, eventOptions, cell, undo;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            cellFactory = handlerArgs.cellFactory, createEdgeService = handlerArgs.createEdgeService, commandService = handlerArgs.commandService, options = handlerArgs.options;\n                            _context2.next = 3;\n                            return this.ctx.getX6Graph();\n\n                          case 3:\n                            graph = _context2.sent;\n                            rawEdge = handlerArgs.edgeConfig; // 通过createEdgeService来获取 id/是否可以添加的信息，如果返回的nodeid为空则不添加到画布\n\n                            if (!createEdgeService) {\n                              _context2.next = 12;\n                              break;\n                            }\n\n                            _context2.next = 8;\n                            return createEdgeService(handlerArgs);\n\n                          case 8:\n                            res = _context2.sent;\n\n                            if (!(typeof res === 'boolean')) {\n                              _context2.next = 11;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              err: 'createEdgeService rejected'\n                            });\n\n                          case 11:\n                            rawEdge = res;\n\n                          case 12:\n                            _context2.next = 14;\n                            return this.processEdgeConfig(handlerArgs, rawEdge);\n\n                          case 14:\n                            edgeConfig = _context2.sent;\n                            eventOptions = Object.assign(Object.assign({}, options), {\n                              isCommand: true\n                            });\n\n                            if (!cellFactory) {\n                              _context2.next = 23;\n                              break;\n                            }\n\n                            _context2.next = 19;\n                            return cellFactory(edgeConfig, this);\n\n                          case 19:\n                            cell = _context2.sent;\n                            edgeCell = graph.addEdge(cell, eventOptions);\n                            _context2.next = 24;\n                            break;\n\n                          case 23:\n                            edgeCell = graph.addEdge(Object.assign(Object.assign({}, edgeConfig), {\n                              /** 由于X6的实现是React节点挂在label上的, 所以必须要给label设置值 */\n                              label: (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.label) || edgeConfig,\n                              data: Object.assign({}, edgeConfig)\n                            }), eventOptions);\n\n                          case 24:\n                            /** 创建 undo */\n                            undo = Disposable.create(function () {\n                              commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                                x6Edge: edgeCell\n                              });\n                            });\n                            /** add undo */\n\n                            /** add undo */\n                            this.ctx.addUndo(undo);\n                            return _context2.abrupt(\"return\", {\n                              edgeConfig: edgeConfig,\n                              edgeCell: edgeCell\n                            });\n\n                          case 27:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context3.sent;\n                this.ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.ctx.undo();\n                return _context4.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.isUndoable) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(AddEdgeCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n  }]);\n\n  return AddEdgeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], AddEdgeCommand.prototype, \"init\", null);\n\nAddEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddEdge.command.id\n  }\n})\n/** 创建节点命令 */\n], AddEdgeCommand);\nexport { AddEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}