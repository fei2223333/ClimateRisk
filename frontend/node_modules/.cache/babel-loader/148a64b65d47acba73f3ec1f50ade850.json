{"ast":null,"code":"var rclass = /[\\t\\r\\n\\f]/g;\nvar rnotwhite = /\\S+/g;\n\nvar fillSpaces = function fillSpaces(str) {\n  return \" \".concat(str, \" \");\n};\n\nexport function getClass(elem) {\n  return elem && elem.getAttribute && elem.getAttribute('class') || '';\n}\nexport function hasClass(elem, selector) {\n  if (elem == null || selector == null) {\n    return false;\n  }\n\n  var classNames = fillSpaces(getClass(elem));\n  var className = fillSpaces(selector);\n  return elem.nodeType === 1 ? classNames.replace(rclass, ' ').includes(className) : false;\n}\nexport function addClass(elem, selector) {\n  if (elem == null || selector == null) {\n    return;\n  }\n\n  if (typeof selector === 'function') {\n    return addClass(elem, selector(getClass(elem)));\n  }\n\n  if (typeof selector === 'string' && elem.nodeType === 1) {\n    var classes = selector.match(rnotwhite) || [];\n    var oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ');\n    var newValue = classes.reduce(function (memo, cls) {\n      if (memo.indexOf(fillSpaces(cls)) < 0) {\n        return \"\".concat(memo).concat(cls, \" \");\n      }\n\n      return memo;\n    }, oldValue);\n    newValue = newValue.trim();\n\n    if (oldValue !== newValue) {\n      elem.setAttribute('class', newValue);\n    }\n  }\n}\nexport function removeClass(elem, selector) {\n  if (elem == null) {\n    return;\n  }\n\n  if (typeof selector === 'function') {\n    return removeClass(elem, selector(getClass(elem)));\n  }\n\n  if ((!selector || typeof selector === 'string') && elem.nodeType === 1) {\n    var classes = (selector || '').match(rnotwhite) || [];\n    var oldValue = fillSpaces(getClass(elem)).replace(rclass, ' ');\n    var newValue = classes.reduce(function (memo, cls) {\n      var className = fillSpaces(cls);\n\n      if (memo.indexOf(className) > -1) {\n        return memo.replace(className, ' ');\n      }\n\n      return memo;\n    }, oldValue);\n    newValue = selector ? newValue.trim() : '';\n\n    if (oldValue !== newValue) {\n      elem.setAttribute('class', newValue);\n    }\n  }\n}\nexport function toggleClass(elem, selector, stateVal) {\n  if (elem == null || selector == null) {\n    return;\n  }\n\n  if (stateVal != null && typeof selector === 'string') {\n    stateVal ? addClass(elem, selector) : removeClass(elem, selector);\n    return;\n  }\n\n  if (typeof selector === 'function') {\n    return toggleClass(elem, selector(getClass(elem), stateVal), stateVal);\n  }\n\n  if (typeof selector === 'string') {\n    var metches = selector.match(rnotwhite) || [];\n    metches.forEach(function (cls) {\n      hasClass(elem, cls) ? removeClass(elem, cls) : addClass(elem, cls);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}