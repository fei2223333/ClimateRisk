{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Dom } from '../util';\nimport { ModifierKey } from '../types';\nimport { Base } from './base';\nexport var ScrollerManager = /*#__PURE__*/function (_Base) {\n  _inherits(ScrollerManager, _Base);\n\n  function ScrollerManager() {\n    _classCallCheck(this, ScrollerManager);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ScrollerManager).apply(this, arguments));\n  }\n\n  _createClass(ScrollerManager, [{\n    key: \"init\",\n    value: function init() {\n      this.widget = this.graph.hook.createScroller();\n      this.startListening();\n      this.updateClassName();\n\n      if (this.widget) {\n        this.widget.center();\n      }\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      var eventTypes = [];\n      var pannable = this.widgetOptions.pannable;\n\n      if (typeof pannable === 'object') {\n        eventTypes = pannable.eventTypes || [];\n      } else {\n        eventTypes = ['leftMouseDown'];\n      }\n\n      if (eventTypes.includes('leftMouseDown')) {\n        this.graph.on('blank:mousedown', this.preparePanning, this);\n        this.graph.on('node:unhandled:mousedown', this.preparePanning, this);\n        this.graph.on('edge:unhandled:mousedown', this.preparePanning, this);\n      }\n\n      if (eventTypes.includes('rightMouseDown')) {\n        this.onRightMouseDown = this.onRightMouseDown.bind(this);\n        this.view.$(this.widget.container).on('mousedown', this.onRightMouseDown);\n      }\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      var eventTypes = [];\n      var pannable = this.widgetOptions.pannable;\n\n      if (typeof pannable === 'object') {\n        eventTypes = pannable.eventTypes || [];\n      } else {\n        eventTypes = ['leftMouseDown'];\n      }\n\n      if (eventTypes.includes('leftMouseDown')) {\n        this.graph.off('blank:mousedown', this.preparePanning, this);\n        this.graph.off('node:unhandled:mousedown', this.preparePanning, this);\n        this.graph.off('edge:unhandled:mousedown', this.preparePanning, this);\n      }\n\n      if (eventTypes.includes('rightMouseDown')) {\n        this.view.$(this.widget.container).off('mousedown', this.onRightMouseDown);\n      }\n    }\n  }, {\n    key: \"onRightMouseDown\",\n    value: function onRightMouseDown(e) {\n      var _this = this;\n\n      if (e.button === 2 && this.allowPanning(e, true) && this.widget) {\n        this.updateClassName(true);\n        this.widget.startPanning(e);\n        this.widget.once('pan:stop', function () {\n          return _this.updateClassName(false);\n        });\n      }\n    }\n  }, {\n    key: \"preparePanning\",\n    value: function preparePanning(_ref) {\n      var _this2 = this;\n\n      var e = _ref.e;\n\n      if (this.widget) {\n        if (this.allowPanning(e, true) || this.allowPanning(e) && !this.graph.selection.allowRubberband(e, true)) {\n          this.updateClassName(true);\n          this.widget.startPanning(e);\n          this.widget.once('pan:stop', function () {\n            return _this2.updateClassName(false);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"allowPanning\",\n    value: function allowPanning(e, strict) {\n      return this.widget && this.pannable && ModifierKey.isMatch(e, this.widgetOptions.modifiers, strict) && this.graph.hook.allowPanning(e);\n    }\n  }, {\n    key: \"updateClassName\",\n    value: function updateClassName(isPanning) {\n      if (this.widget == null) {\n        return;\n      }\n\n      var container = this.widget.container;\n      var pannable = this.view.prefixClassName('graph-scroller-pannable');\n\n      if (this.pannable) {\n        Dom.addClass(container, pannable);\n        container.dataset.panning = (!!isPanning).toString(); // Use dataset to control scroller panning style to avoid reflow caused by changing classList\n      } else {\n        Dom.removeClass(container, pannable);\n      }\n    }\n  }, {\n    key: \"enablePanning\",\n    value: function enablePanning() {\n      if (!this.pannable) {\n        this.widgetOptions.pannable = true;\n        this.updateClassName(); // if (\n        //   ModifierKey.equals(\n        //     this.graph.options.scroller.modifiers,\n        //     this.graph.options.selecting.modifiers,\n        //   )\n        // ) {\n        //   this.graph.selection.disableRubberband()\n        // }\n      }\n    }\n  }, {\n    key: \"disablePanning\",\n    value: function disablePanning() {\n      if (this.pannable) {\n        this.widgetOptions.pannable = false;\n        this.updateClassName();\n      }\n    }\n  }, {\n    key: \"lock\",\n    value: function lock() {\n      if (this.widget) {\n        this.widget.lock();\n      }\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      if (this.widget) {\n        this.widget.unlock();\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.widget) {\n        this.widget.update();\n      }\n    }\n  }, {\n    key: \"enableAutoResize\",\n    value: function enableAutoResize() {\n      if (this.widget) {\n        this.widget.enableAutoResize();\n      }\n    }\n  }, {\n    key: \"disableAutoResize\",\n    value: function disableAutoResize() {\n      if (this.widget) {\n        this.widget.disableAutoResize();\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (this.widget) {\n        this.widget.resize(width, height);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.widget) {\n        this.widget.dispose();\n      }\n\n      this.stopListening();\n    }\n  }, {\n    key: \"widgetOptions\",\n    get: function get() {\n      return this.options.scroller;\n    }\n  }, {\n    key: \"pannable\",\n    get: function get() {\n      if (this.widgetOptions) {\n        if (typeof this.widgetOptions.pannable === 'object') {\n          return this.widgetOptions.pannable.enabled;\n        }\n\n        return !!this.widgetOptions.pannable;\n      }\n\n      return false;\n    }\n  }]);\n\n  return ScrollerManager;\n}(Base);\n\n__decorate([Base.dispose()], ScrollerManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}