{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __awaiter, __decorate, __rest } from \"tslib\";\nimport { singleton } from 'mana-syringe';\nimport { DisposableCollection, Disposable, XFlowEdgeCommands, XFlowNodeCommands } from '@antv/xflow-core';\nimport { IHookContribution } from '@antv/xflow-core';\nimport { NsAddEdgeEvent } from '../../config-graph';\nimport { getProps } from '../../utils';\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nvar FlowHooksContribution = function FlowHooksContribution() {\n  var _this = this;\n\n  _classCallCheck(this, FlowHooksContribution);\n\n  this.toDispose = new DisposableCollection();\n\n  this.registerHookHub = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Disposable.create(function () {}));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n\n  this.registerHook = function (hooks) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var _this2 = this;\n\n      var toDispose, disposables;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              toDispose = new DisposableCollection();\n              disposables = [hooks.afterGraphInit.registerHook({\n                name: 'call add edge to replace temp edge',\n                handler: function handler(handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var _this3 = this;\n\n                    var commandService, graph;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            commandService = handlerArgs.commandService, graph = handlerArgs.graph;\n                            graph.on(NsAddEdgeEvent.EVENT_NAME, function (args) {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                                var edge, edgeConfig, tempEdgeId, rest, config, sourceNode, targetNode, onAddEdge;\n                                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        edge = args.edge, edgeConfig = __rest(args, [\"edge\"]);\n                                        tempEdgeId = edgeConfig.tempEdgeId, rest = __rest(edgeConfig, [\"tempEdgeId\"]);\n                                        config = {\n                                          edgeConfig: Object.assign(Object.assign({}, rest), {\n                                            // renderKey: FLOWCHART_EDGE, // 暂不支持\n                                            source: {\n                                              cell: edgeConfig.source,\n                                              port: edgeConfig.sourcePortId\n                                            },\n                                            target: {\n                                              cell: edgeConfig.target,\n                                              port: edgeConfig.targetPortId\n                                            },\n                                            zIndex: 1,\n                                            attrs: {\n                                              line: {\n                                                stroke: '#A2B1C3',\n                                                targetMarker: {\n                                                  name: 'block',\n                                                  width: 12,\n                                                  height: 8\n                                                },\n                                                strokeDasharray: '5 5',\n                                                strokeWidth: 1\n                                              }\n                                            },\n                                            data: Object.assign({}, rest)\n                                          })\n                                        };\n                                        _context2.next = 5;\n                                        return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, config);\n\n                                      case 5:\n                                        _context2.next = 7;\n                                        return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                                          edgeConfig: {\n                                            id: tempEdgeId\n                                          }\n                                        });\n\n                                      case 7:\n                                        /**\n                                         * 新增边时更新入边、出边信息\n                                         * @link https://github.com/ant-design/ant-design-charts/issues/1189\n                                         */\n                                        sourceNode = graph.getCellById(edgeConfig.source);\n                                        targetNode = graph.getCellById(edgeConfig.target);\n                                        _context2.next = 11;\n                                        return commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                                          nodeConfig: Object.assign(Object.assign({}, sourceNode.data), {\n                                            incomingEdges: graph.getIncomingEdges(sourceNode),\n                                            outgoingEdges: graph.getOutgoingEdges(sourceNode)\n                                          })\n                                        });\n\n                                      case 11:\n                                        _context2.next = 13;\n                                        return commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                                          nodeConfig: Object.assign(Object.assign({}, targetNode.data), {\n                                            incomingEdges: graph.getIncomingEdges(targetNode),\n                                            outgoingEdges: graph.getOutgoingEdges(targetNode)\n                                          })\n                                        });\n\n                                      case 13:\n                                        onAddEdge = getProps('onAddEdge');\n\n                                        if (typeof onAddEdge === 'function') {\n                                          onAddEdge(config);\n                                        }\n\n                                        args.edge.remove();\n\n                                      case 16:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2);\n                              }));\n                            });\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                }\n              })];\n              toDispose.pushAll(disposables);\n              return _context4.abrupt(\"return\", Disposable.create(function () {}));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n  };\n};\n\nFlowHooksContribution = __decorate([singleton({\n  contrib: IHookContribution\n})], FlowHooksContribution);\nexport { FlowHooksContribution };","map":null,"metadata":{},"sourceType":"module"}