{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nvar CholeskyDecomposition = /*#__PURE__*/function () {\n  function CholeskyDecomposition(value) {\n    _classCallCheck(this, CholeskyDecomposition);\n\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value;\n    var dimension = a.rows;\n    var l = new Matrix(dimension, dimension);\n    var positiveDefinite = true;\n    var i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      var d = 0;\n\n      for (k = 0; k < j; k++) {\n        var s = 0;\n\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n      positiveDefinite &= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = Boolean(positiveDefinite);\n  }\n\n  _createClass(CholeskyDecomposition, [{\n    key: \"isPositiveDefinite\",\n    value: function isPositiveDefinite() {\n      return this.positiveDefinite;\n    }\n  }, {\n    key: \"solve\",\n    value: function solve(value) {\n      value = WrapperMatrix2D.checkMatrix(value);\n      var l = this.L;\n      var dimension = l.rows;\n\n      if (value.rows !== dimension) {\n        throw new Error('Matrix dimensions do not match');\n      }\n\n      if (this.isPositiveDefinite() === false) {\n        throw new Error('Matrix is not positive definite');\n      }\n\n      var count = value.columns;\n      var B = value.clone();\n      var i, j, k;\n\n      for (k = 0; k < dimension; k++) {\n        for (j = 0; j < count; j++) {\n          for (i = 0; i < k; i++) {\n            B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n          }\n\n          B.set(k, j, B.get(k, j) / l.get(k, k));\n        }\n      }\n\n      for (k = dimension - 1; k >= 0; k--) {\n        for (j = 0; j < count; j++) {\n          for (i = k + 1; i < dimension; i++) {\n            B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n          }\n\n          B.set(k, j, B.get(k, j) / l.get(k, k));\n        }\n      }\n\n      return B;\n    }\n  }, {\n    key: \"lowerTriangularMatrix\",\n    get: function get() {\n      return this.L;\n    }\n  }]);\n\n  return CholeskyDecomposition;\n}();\n\nexport { CholeskyDecomposition as default };","map":null,"metadata":{},"sourceType":"module"}