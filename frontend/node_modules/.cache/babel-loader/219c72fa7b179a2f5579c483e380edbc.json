{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __awaiter, __decorate } from \"tslib\";\nimport { ManaSyringe, DisposableCollection, Disposable } from '@antv/xflow-core';\nimport { IHookContribution } from '@antv/xflow-core';\nimport { XFlowNode } from '../x6-extension/node';\nimport { Shape } from '@antv/x6';\nexport var flowOptions = {\n  grid: true,\n  mousewheel: {\n    enabled: true,\n    zoomAtMousePosition: true,\n    modifiers: 'ctrl',\n    minScale: 0.5,\n    maxScale: 3\n  },\n  connecting: {\n    router: 'manhattan',\n    connector: {\n      name: 'rounded',\n      args: {\n        radius: 8\n      }\n    },\n    anchor: 'center',\n    connectionPoint: 'anchor',\n    allowBlank: false,\n    snap: {\n      radius: 20\n    },\n    createEdge: function createEdge() {\n      return new Shape.Edge({\n        attrs: {\n          line: {\n            stroke: '#A2B1C3',\n            strokeWidth: 2,\n            targetMarker: {\n              name: 'block',\n              width: 12,\n              height: 8\n            }\n          }\n        },\n        zIndex: 0\n      });\n    },\n    validateConnection: function validateConnection(_ref) {\n      var targetMagnet = _ref.targetMagnet;\n      return !!targetMagnet;\n    }\n  },\n  highlighting: {\n    magnetAdsorbed: {\n      name: 'stroke',\n      args: {\n        attrs: {\n          fill: '#5F95FF',\n          stroke: '#5F95FF'\n        }\n      }\n    }\n  },\n  resizing: true,\n  rotating: true,\n  selecting: {\n    enabled: true,\n    rubberband: true,\n    showNodeSelectionBox: true,\n    modifiers: 'shift'\n  },\n  snapline: true,\n  keyboard: true,\n  clipboard: true\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nvar FlowHooksContribution = function FlowHooksContribution() {\n  var _this = this;\n\n  _classCallCheck(this, FlowHooksContribution);\n\n  this.toDispose = new DisposableCollection();\n\n  this.registerHookHub = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Disposable.create(function () {}));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n\n  this.registerHook = function (hooks) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var _this2 = this;\n\n      var toDispose, disposables;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              toDispose = new DisposableCollection();\n              disposables = [hooks.addNode.registerHook({\n                name: 'flow-add-node',\n                handler: function handler(args) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var _this3 = this;\n\n                    var cellFactory;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            cellFactory = function cellFactory(nodeConfig) {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                                var node;\n                                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        node = new XFlowNode(Object.assign({}, nodeConfig));\n                                        return _context2.abrupt(\"return\", node);\n\n                                      case 2:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2);\n                              }));\n                            };\n\n                            args.cellFactory = cellFactory;\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                }\n              }), hooks.addEdge.registerHook({\n                name: 'flow-add-edge',\n                handler: function handler(args) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                    var _this4 = this;\n\n                    var cellFactory;\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            cellFactory = function cellFactory(edgeConfig) {\n                              return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                                var cell;\n                                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                                  while (1) {\n                                    switch (_context4.prev = _context4.next) {\n                                      case 0:\n                                        delete edgeConfig.id;\n                                        cell = new Shape.Edge({\n                                          source: {\n                                            cell: edgeConfig.source,\n                                            port: edgeConfig.sourcePortId\n                                          },\n                                          target: {\n                                            cell: edgeConfig.target,\n                                            port: edgeConfig.targetPortId\n                                          },\n                                          attrs: {\n                                            line: {\n                                              stroke: '#A2B1C3',\n                                              strokeWidth: 2,\n                                              targetMarker: {\n                                                name: 'block',\n                                                width: 12,\n                                                height: 8\n                                              }\n                                            }\n                                          },\n                                          zIndex: -1,\n                                          data: Object.assign({}, edgeConfig)\n                                        });\n                                        return _context4.abrupt(\"return\", cell);\n\n                                      case 3:\n                                      case \"end\":\n                                        return _context4.stop();\n                                    }\n                                  }\n                                }, _callee4);\n                              }));\n                            };\n\n                            args.cellFactory = cellFactory;\n\n                          case 2:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n                }\n              }), hooks.graphOptions.registerHook({\n                name: 'assign options ',\n                handler: function handler(args) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            Object.assign(args, flowOptions);\n\n                          case 1:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n                }\n              })];\n              toDispose.pushAll(disposables);\n              return _context7.abrupt(\"return\", Disposable.create(function () {}));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n  };\n};\n\nFlowHooksContribution = __decorate([ManaSyringe.singleton({\n  contrib: IHookContribution\n})], FlowHooksContribution);\nexport { FlowHooksContribution };","map":null,"metadata":{},"sourceType":"module"}