{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { StringExt, FunctionExt, Platform } from '../util';\nexport var Registry = /*#__PURE__*/function () {\n  function Registry(options) {\n    _classCallCheck(this, Registry);\n\n    this.options = Object.assign({}, options);\n    this.data = this.options.data || {};\n    this.register = this.register.bind(this);\n    this.unregister = this.unregister.bind(this);\n  }\n\n  _createClass(Registry, [{\n    key: \"register\",\n    value: function register(name, options) {\n      var _this = this;\n\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (key) {\n          _this.register(key, name[key], options);\n        });\n        return;\n      }\n\n      if (this.exist(name) && !force && !Platform.isApplyingHMR()) {\n        this.onDuplicated(name);\n      }\n\n      var process = this.options.process;\n      var entity = process ? FunctionExt.call(process, this, name, options) : options;\n      this.data[name] = entity;\n      return entity;\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(name) {\n      var entity = name ? this.data[name] : null;\n      delete this.data[name];\n      return entity;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return name ? this.data[name] : null;\n    }\n  }, {\n    key: \"exist\",\n    value: function exist(name) {\n      return name ? this.data[name] != null : false;\n    }\n  }, {\n    key: \"onDuplicated\",\n    value: function onDuplicated(name) {\n      // eslint-disable-next-line no-useless-catch\n      try {\n        // race\n        if (this.options.onConflict) {\n          FunctionExt.call(this.options.onConflict, this, name);\n        }\n\n        throw new Error(\"\".concat(StringExt.upperFirst(this.options.type), \" with name '\").concat(name, \"' already registered.\"));\n      } catch (err) {\n        throw err;\n      }\n    }\n  }, {\n    key: \"onNotFound\",\n    value: function onNotFound(name, prefix) {\n      throw new Error(this.getSpellingSuggestion(name, prefix));\n    }\n  }, {\n    key: \"getSpellingSuggestion\",\n    value: function getSpellingSuggestion(name, prefix) {\n      var suggestion = this.getSpellingSuggestionForName(name);\n      var prefixed = prefix ? \"\".concat(prefix, \" \").concat(StringExt.lowerFirst(this.options.type)) : this.options.type;\n      return (// eslint-disable-next-line\n        \"\".concat(StringExt.upperFirst(prefixed), \" with name '\").concat(name, \"' does not exist.\").concat(suggestion ? \" Did you mean '\".concat(suggestion, \"'?\") : '')\n      );\n    }\n  }, {\n    key: \"getSpellingSuggestionForName\",\n    value: function getSpellingSuggestionForName(name) {\n      return StringExt.getSpellingSuggestion(name, Object.keys(this.data), function (candidate) {\n        return candidate;\n      });\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return Object.keys(this.data);\n    }\n  }]);\n\n  return Registry;\n}();\n\n(function (Registry) {\n  function create(options) {\n    return new Registry(options);\n  }\n\n  Registry.create = create;\n})(Registry || (Registry = {}));","map":null,"metadata":{},"sourceType":"module"}