{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { ObjectExt, FunctionExt } from '../../util';\nimport { Rectangle } from '../../geometry';\nimport { Widget, Handle } from '../common';\nimport { NodePreset } from './node-preset';\nimport { EdgePreset } from './edge-preset';\nexport var Halo = /*#__PURE__*/function (_Widget) {\n  _inherits(Halo, _Widget);\n\n  function Halo() {\n    _classCallCheck(this, Halo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Halo).apply(this, arguments));\n  }\n\n  _createClass(Halo, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = ObjectExt.merge(Halo.defaultOptions, this.cell.isNode() ? new NodePreset(this).getPresets() : this.cell.isEdge() ? new EdgePreset(this).getPresets() : null, options);\n      this.render();\n      this.initHandles();\n      this.update();\n      this.startListening();\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      var model = this.model;\n      var graph = this.graph;\n      var cell = this.view.cell;\n      cell.on('removed', this.remove, this);\n      model.on('reseted', this.remove, this);\n      graph.on('halo:destroy', this.remove, this);\n      model.on('*', this.update, this);\n      graph.on('scale', this.update, this);\n      graph.on('translate', this.update, this);\n\n      _get(_getPrototypeOf(Halo.prototype), \"startListening\", this).call(this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      var model = this.model;\n      var graph = this.graph;\n      var cell = this.view.cell;\n      this.undelegateEvents();\n      cell.off('removed', this.remove, this);\n      model.off('reseted', this.remove, this);\n      graph.off('halo:destroy', this.remove, this);\n      model.off('*', this.update, this);\n      graph.off('scale', this.update, this);\n      graph.off('translate', this.update, this);\n\n      _get(_getPrototypeOf(Halo.prototype), \"stopListening\", this).call(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var options = this.options;\n      var cls = this.prefixClassName('widget-halo');\n      this.view.addClass(Private.NODE_CLS);\n      this.container = document.createElement('div');\n      this.$container = this.$(this.container).addClass(cls).attr('data-shape', this.view.cell.shape);\n\n      if (options.className) {\n        this.$container.addClass(options.className);\n      }\n\n      this.$handleContainer = this.$('<div/>').addClass(\"\".concat(cls, \"-handles\")).appendTo(this.container);\n      this.$content = this.$('<div/>').addClass(\"\".concat(cls, \"-content\")).appendTo(this.container);\n      this.$container.appendTo(this.graph.container);\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.stopBatch();\n      this.view.removeClass(Private.NODE_CLS);\n      return _get(_getPrototypeOf(Halo.prototype), \"remove\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.isRendered()) {\n        this.updateContent();\n        var bbox = this.getBBox();\n        var tinyThreshold = this.options.tinyThreshold || 0;\n        var smallThreshold = this.options.smallThreshold || 0;\n        this.$handleContainer.toggleClass(\"\".concat(this.handleClassName, \"-tiny\"), bbox.width < tinyThreshold && bbox.height < tinyThreshold);\n        var className = \"\".concat(this.handleClassName, \"-small\");\n        this.$handleContainer.toggleClass(className, !this.$handleContainer.hasClass(className) && bbox.width < smallThreshold && bbox.height < smallThreshold);\n        this.$container.css({\n          width: bbox.width,\n          height: bbox.height,\n          left: bbox.x,\n          top: bbox.y\n        });\n\n        if (this.hasHandle('unlink')) {\n          this.toggleUnlink();\n        }\n\n        if (this.type === 'surround' || this.type === 'toolbar') {\n          if (this.hasHandle('fork')) {\n            this.toggleFork();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"updateContent\",\n    value: function updateContent() {\n      var content = this.options.content;\n\n      if (typeof content === 'function') {\n        var ret = FunctionExt.call(content, this, this.view, this.$content[0]);\n\n        if (ret) {\n          this.$content.html(ret);\n        }\n      } else if (content) {\n        this.$content.html(content);\n      } else {\n        this.$content.remove();\n      }\n    }\n  }, {\n    key: \"getBBox\",\n    value: function getBBox() {\n      var view = this.view;\n      var bbox = this.options.bbox;\n      var rect = typeof bbox === 'function' ? FunctionExt.call(bbox, this, view) : bbox;\n      return Rectangle.create(Object.assign({\n        x: 0,\n        y: 0,\n        width: 1,\n        height: 1\n      }, rect));\n    }\n  }, {\n    key: \"removeCell\",\n    value: function removeCell() {\n      this.cell.remove();\n    }\n  }, {\n    key: \"toggleFork\",\n    value: function toggleFork() {\n      var cell = this.view.cell.clone();\n      var view = this.graph.hook.createCellView(cell);\n      var valid = this.graph.hook.validateConnection(this.view, null, view, null, 'target');\n      this.$handleContainer.children('.fork').toggleClass('hidden', !valid);\n      view.remove();\n    }\n  }, {\n    key: \"toggleUnlink\",\n    value: function toggleUnlink() {\n      var hasEdges = this.model.getConnectedEdges(this.view.cell).length > 0;\n      this.$handleContainer.children('.unlink').toggleClass('hidden', !hasEdges);\n    } // #region batch\n\n  }, {\n    key: \"startBatch\",\n    value: function startBatch() {\n      this.model.startBatch('halo', {\n        halo: this.cid\n      });\n    }\n  }, {\n    key: \"stopBatch\",\n    value: function stopBatch() {\n      if (this.model.hasActiveBatch('halo')) {\n        this.model.stopBatch('halo', {\n          halo: this.cid\n        });\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.options.type || 'surround';\n    }\n  }, {\n    key: \"handleOptions\",\n    get: function get() {\n      return this.options;\n    }\n  }]);\n\n  return Halo;\n}(Widget);\n\n(function (Halo) {\n  Halo.defaultOptions = {\n    type: 'surround',\n    clearAll: true,\n    clearOnBlankMouseDown: true,\n    useCellGeometry: false,\n    clone: function clone(cell) {\n      return cell.clone().removeZIndex();\n    }\n  };\n})(Halo || (Halo = {}));\n\nObject.getOwnPropertyNames(Handle.prototype).forEach(function (name) {\n  if (name !== 'constructor') {\n    Object.defineProperty(Halo.prototype, name, Object.getOwnPropertyDescriptor(Handle.prototype, name));\n  }\n});\nvar Private;\n\n(function (Private) {\n  Private.NODE_CLS = 'has-widget-halo';\n})(Private || (Private = {}));","map":null,"metadata":{},"sourceType":"module"}