{"ast":null,"code":"var tarjan = function tarjan(graph) {\n  var index = 0;\n  var stack = [];\n  var visited = new Map(); // node id -> { onStack, lowlink, index }\n\n  var results = [];\n\n  function dfs(v) {\n    var _graph$successors;\n\n    var entry = {\n      onStack: true,\n      lowlink: index,\n      index: index\n    };\n    visited.set(v, entry);\n    index += 1;\n    stack.push(v);\n    (_graph$successors = graph.successors(v)) === null || _graph$successors === void 0 ? void 0 : _graph$successors.forEach(function (w) {\n      var _visited$get;\n\n      if (!visited.has(w)) {\n        dfs(w);\n        var wEntry = visited.get(w);\n        entry.lowlink = Math.min(entry.lowlink, wEntry.lowlink);\n      } else if ((_visited$get = visited.get(w)) === null || _visited$get === void 0 ? void 0 : _visited$get.onStack) {\n        var _wEntry = visited.get(w);\n\n        entry.lowlink = Math.min(entry.lowlink, _wEntry.index);\n      }\n    });\n\n    if (entry.lowlink === entry.index) {\n      var cmpt = [];\n      var w;\n\n      do {\n        w = stack.pop();\n        var wEntry = visited.get(w);\n        wEntry.onStack = false;\n        cmpt.push(w);\n      } while (v !== w);\n\n      results.push(cmpt);\n    }\n  }\n\n  graph.nodes().forEach(function (v) {\n    if (!visited.has(v)) {\n      dfs(v);\n    }\n  });\n  return results;\n};\n\nexport default tarjan;","map":null,"metadata":{},"sourceType":"module"}