{"ast":null,"code":"import { Line } from '../../geometry';\nexport function offset(p1, p2, offset) {\n  var tx;\n\n  if (typeof offset === 'object') {\n    if (Number.isFinite(offset.y)) {\n      var line = new Line(p2, p1);\n\n      var _line$parallel = line.parallel(offset.y),\n          start = _line$parallel.start,\n          end = _line$parallel.end;\n\n      p2 = start; // eslint-disable-line\n\n      p1 = end; // eslint-disable-line\n    }\n\n    tx = offset.x;\n  } else {\n    tx = offset;\n  }\n\n  if (tx == null || !Number.isFinite(tx)) {\n    return p1;\n  }\n\n  var length = p1.distance(p2);\n\n  if (tx === 0 && length > 0) {\n    return p1;\n  }\n\n  return p1.move(p2, -Math.min(tx, length - 1));\n}\nexport function getStrokeWidth(magnet) {\n  var stroke = magnet.getAttribute('stroke-width');\n\n  if (stroke === null) {\n    return 0;\n  }\n\n  return parseFloat(stroke) || 0;\n}\nexport function findShapeNode(magnet) {\n  if (magnet == null) {\n    return null;\n  }\n\n  var node = magnet;\n\n  do {\n    var tagName = node.tagName;\n    if (typeof tagName !== 'string') return null;\n    tagName = tagName.toUpperCase();\n\n    if (tagName === 'G') {\n      node = node.firstElementChild;\n    } else if (tagName === 'TITLE') {\n      node = node.nextElementSibling;\n    } else break;\n  } while (node);\n\n  return node;\n}","map":null,"metadata":{},"sourceType":"module"}