{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { __awaiter } from \"tslib\";\nimport { ScheduleTypeEnum } from './interface';\nimport { ErrorUtils, HookUtils, Deferred } from './utils';\nexport { ScheduleTypeEnum } from './interface';\nexport var HookHub = function HookHub(options) {\n  var _this = this,\n      _this$schedulers;\n\n  _classCallCheck(this, HookHub);\n\n  /** scheduleType */\n  this.scheduleType = ScheduleTypeEnum.ASYNC_SRRIES;\n  /** hasRegistered */\n\n  this.hasHook = function (hookName) {\n    return _this.hookMap.has(hookName);\n  };\n  /** getHooks */\n\n\n  this.getHooks = function () {\n    var runtimeHooks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var hooks = HookUtils.normalize(runtimeHooks, _this.hookMap);\n\n    if (!sort) {\n      return hooks;\n    }\n\n    return HookUtils.sort(hooks, _this.hookMap);\n  };\n  /** registerHook */\n\n\n  this.registerHook = function (hookMeta) {\n    if (_this.hookMap.has(hookMeta.name)) {\n      console.error(\"\".concat(hookMeta.name, \" is duplicated in hookmap\"));\n    }\n\n    _this.hookMap.set(hookMeta.name, hookMeta);\n\n    return {\n      dispose: function dispose() {\n        _this.hookMap.delete(hookMeta.name);\n      }\n    };\n  };\n  /** registerHook */\n\n\n  this.call = function (args) {\n    var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (mainArgs) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", mainArgs);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    };\n    var runtimeHook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var hooks, scheduler;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // TODO: 这里加cache\n              hooks = this.getHooks(runtimeHook, true);\n              scheduler = this.schedulers[this.scheduleType];\n              return _context2.abrupt(\"return\", scheduler(args, main, hooks));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n  };\n  /** 执行hook的scheduler */\n\n\n  this.schedulers = (_this$schedulers = {}, _defineProperty(_this$schedulers, ScheduleTypeEnum.ASYNC_SRRIES, function (args, main) {\n    var hooks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var callback, _iterator, _step, hook, result, err;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              callback = main;\n              /** 用 hook 加工 args  */\n\n              _iterator = _createForOfIteratorHelper(hooks);\n              _context3.prev = 2;\n\n              _iterator.s();\n\n            case 4:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 26;\n                break;\n              }\n\n              hook = _step.value;\n\n              if (![0, 1].includes(hook.handler.length)) {\n                _context3.next = 10;\n                break;\n              }\n\n              _context3.next = 9;\n              return hook.handler.call(this, args);\n\n            case 9:\n              return _context3.abrupt(\"continue\", 24);\n\n            case 10:\n              if (!([2].includes(hook.handler.length) && callback !== null)) {\n                _context3.next = 22;\n                break;\n              }\n\n              _context3.next = 13;\n              return hook.handler.call(this, args, callback);\n\n            case 13:\n              result = _context3.sent;\n\n              if (!(result === null)) {\n                _context3.next = 19;\n                break;\n              }\n\n              callback = null;\n              return _context3.abrupt(\"break\", 26);\n\n            case 19:\n              if (!(typeof result === 'function')) {\n                _context3.next = 22;\n                break;\n              }\n\n              callback = result;\n              return _context3.abrupt(\"continue\", 24);\n\n            case 22:\n              err = ErrorUtils.InvalidHookArguments(hook);\n              throw err;\n\n            case 24:\n              _context3.next = 4;\n              break;\n\n            case 26:\n              _context3.next = 31;\n              break;\n\n            case 28:\n              _context3.prev = 28;\n              _context3.t0 = _context3[\"catch\"](2);\n\n              _iterator.e(_context3.t0);\n\n            case 31:\n              _context3.prev = 31;\n\n              _iterator.f();\n\n              return _context3.finish(31);\n\n            case 34:\n              if (!callback) {\n                _context3.next = 38;\n                break;\n              }\n\n              _context3.next = 37;\n              return callback.call(this, args);\n\n            case 37:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 38:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[2, 28, 31, 34]]);\n    }));\n  }), _defineProperty(_this$schedulers, ScheduleTypeEnum.ASYNC_PARALLEL, function (args, main) {\n    var hooks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var _this2 = this;\n\n      var promises, defer;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              /** 同时触发 hook */\n              promises = hooks.map(function (hook) {\n                if ([0, 1].includes(hook.handler.length)) {\n                  return hook.handler.call(_this2, args);\n                }\n\n                if ([2].includes(hook.handler.length)) {\n                  return hook.handler.call(_this2, args, main);\n                }\n\n                throw ErrorUtils.InvalidHookArguments(hook);\n              });\n              defer = new Deferred();\n              Promise.all(promises).then(function (res) {\n                return defer.resolve(res);\n              });\n              /** 检查是否被替换 */\n\n              if (!main) {\n                _context4.next = 7;\n                break;\n              }\n\n              _context4.next = 6;\n              return main.call(this, defer);\n\n            case 6:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n  }), _this$schedulers);\n  this.hookMap = new Map();\n\n  if (options && options.type) {\n    this.scheduleType = options.type;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}