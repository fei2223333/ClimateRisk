{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nvar longestPath = function longestPath(g) {\n  var _a;\n\n  var visited = {};\n\n  var dfs = function dfs(v) {\n    var _a;\n\n    var label = g.node(v);\n\n    if (visited.hasOwnProperty(v)) {\n      return label.rank;\n    }\n\n    visited[v] = true;\n    var lengths = (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      return dfs(e.w) - g.edge(e).minlen || Infinity;\n    });\n    var rank = Math.min.apply(Math, _toConsumableArray(lengths));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n    rank === undefined || // return value of _.map([]) for Lodash 4\n    rank === null) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    label.rank = rank;\n    return rank;\n  };\n\n  (_a = g.sources()) === null || _a === void 0 ? void 0 : _a.forEach(function (source) {\n    return dfs(source);\n  });\n};\n\nvar longestPathWithLayer = function longestPathWithLayer(g) {\n  var _a; // 用longest path，找出最深的点\n\n\n  var visited = {};\n  var minRank = 0;\n\n  var dfs = function dfs(v) {\n    var _a;\n\n    var label = g.node(v);\n\n    if (visited.hasOwnProperty(v)) {\n      return label.rank;\n    }\n\n    visited[v] = true;\n    var lengths = (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      return dfs(e.w) - g.edge(e).minlen || Infinity;\n    });\n    var rank = Math.min.apply(Math, _toConsumableArray(lengths));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n    rank === undefined || // return value of _.map([]) for Lodash 4\n    rank === null) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    label.rank = rank;\n    minRank = Math.min(label.rank, minRank);\n    return label.rank;\n  };\n\n  (_a = g.sources()) === null || _a === void 0 ? void 0 : _a.forEach(function (source) {\n    return dfs(source);\n  });\n  minRank += 1; // NOTE: 最小的层级是dummy root，+1\n  // forward一遍，赋值层级\n\n  var dfsForward = function dfsForward(v, nextRank) {\n    var _a;\n\n    var label = g.node(v);\n    var currRank = !isNaN(label.layer) ? label.layer : nextRank; // 没有指定，取最大值\n\n    if (label.rank === undefined || label.rank < currRank) {\n      label.rank = currRank;\n    } // DFS遍历子节点\n\n\n    (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      dfsForward(e.w, currRank + g.edge(e).minlen);\n    });\n  }; // 指定层级的，更新下游\n\n\n  g.nodes().forEach(function (n) {\n    var label = g.node(n);\n\n    if (!isNaN(label.layer)) {\n      dfsForward(n, label.layer); // 默认的dummy root所在层的rank是-1\n    } else {\n      label.rank -= minRank;\n    }\n  });\n};\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\n\n\nvar slack = function slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n};\n\nexport { longestPath, longestPathWithLayer, slack };\nexport default {\n  longestPath: longestPath,\n  longestPathWithLayer: longestPathWithLayer,\n  slack: slack\n};","map":null,"metadata":{},"sourceType":"module"}