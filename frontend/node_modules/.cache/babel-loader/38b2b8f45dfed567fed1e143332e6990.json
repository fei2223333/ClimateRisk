{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\nvar unlink = function unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n};\n\nvar filterOutLinks = function filterOutLinks(k, v) {\n  if (k !== \"_next\" && k !== \"_prev\") {\n    return v;\n  }\n};\n\nvar List = /*#__PURE__*/function () {\n  function List() {\n    _classCallCheck(this, List);\n\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this.isentinel = sentinel;\n  }\n\n  _createClass(List, [{\n    key: \"dequeue\",\n    value: function dequeue() {\n      var sentinel = this.isentinel;\n      var entry = sentinel._prev;\n\n      if (entry !== sentinel) {\n        unlink(entry);\n        return entry;\n      }\n    }\n  }, {\n    key: \"enqueue\",\n    value: function enqueue() {\n      var sentinel = this.isentinel;\n      var entry = sentinel._prev;\n\n      if (entry !== sentinel) {\n        unlink(entry);\n        return entry;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var strs = [];\n      var sentinel = this.isentinel;\n      var curr = sentinel._prev;\n\n      while (curr !== sentinel) {\n        strs.push(JSON.stringify(curr, filterOutLinks));\n        curr = curr._prev;\n      }\n\n      return \"[\".concat(strs.join(\", \"), \"]\");\n    }\n  }]);\n\n  return List;\n}();\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}