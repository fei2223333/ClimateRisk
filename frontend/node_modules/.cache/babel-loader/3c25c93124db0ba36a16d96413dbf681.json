{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { injectable, inject, postConstruct } from 'mana-syringe';\nimport { DisposableCollection } from '../common/disposable';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IModelService, MODELS } from '../model-service';\nimport { IGraphCommandService } from '../command/interface';\nimport { IHookService } from '../hooks';\n\nvar CmdContext = /*#__PURE__*/function () {\n  function CmdContext() {\n    var _this = this;\n\n    _classCallCheck(this, CmdContext);\n\n    /** undos 存在这里 */\n    this.toDispose = new DisposableCollection();\n    /** command handler的runtimeHook */\n\n    this.runtimeHooks = [];\n    /** 获取 x6 实例 */\n\n    this.getX6Graph = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var graphInstance;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.graph) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.graph);\n\n              case 2:\n                _context.next = 4;\n                return this.graphProvider.getGraphInstance();\n\n              case 4:\n                graphInstance = _context.sent;\n                this.graph = graphInstance;\n                return _context.abrupt(\"return\", graphInstance);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n    /** 获取 graph */\n\n\n    this.getGraphConfig = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.graphProvider.getGraphOptions());\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /** 获取 graphMeta */\n\n\n    this.getGraphMeta = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var service, meta;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                service = this.getModelService();\n                _context3.t0 = this.graphMeta;\n\n                if (_context3.t0) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                _context3.next = 5;\n                return MODELS.GRAPH_META.useValue(service);\n\n              case 5:\n                _context3.t0 = _context3.sent;\n\n              case 6:\n                meta = _context3.t0;\n                return _context3.abrupt(\"return\", meta);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** 设置参数 */\n\n\n    this.setArgs = function (args) {\n      var runtimeHooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      _this.args = args;\n      _this.runtimeHooks = runtimeHooks;\n      return {\n        args: args,\n        hooks: runtimeHooks\n      };\n    };\n    /** 获取参数 */\n\n\n    this.getArgs = function () {\n      /** 注入graph meta */\n      var args = Object.assign(Object.assign({}, _this.args), {\n        modelService: _this.getModelService(),\n        commandService: _this.getCommands(),\n        getGraphMeta: _this.getGraphMeta,\n        getX6Graph: _this.getX6Graph,\n        getGraphConfig: _this.getGraphConfig\n      });\n      return {\n        args: args,\n        hooks: _this.runtimeHooks\n      };\n    };\n    /** 设置执行结果 */\n\n\n    this.setResult = function (result) {\n      _this.result = result;\n      return _this.result;\n    };\n    /** 获取执行结果 */\n\n\n    this.getResult = function () {\n      return _this.result;\n    };\n    /** hooks */\n\n\n    this.getHooks = function () {\n      return _this.hookService.hookProvider();\n    };\n    /** 获取Command Service */\n\n\n    this.getCommands = function () {\n      return _this.commandService;\n    };\n    /** 获取Context Service */\n\n\n    this.getModelService = function () {\n      return _this.modelService;\n    };\n    /** 添加undo */\n\n\n    this.addUndo = function (disposable) {\n      if (!Array.isArray(disposable)) {\n        return _this.addUndo([disposable]);\n      }\n\n      _this.toDispose.pushAll(disposable);\n    };\n    /** 执行undo */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.toDispose.dispose();\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** 是否可以执行undo */\n\n\n    this.isUndoable = function () {\n      return !_this.toDispose.disposed;\n    };\n    /** 获取 toDispose */\n\n\n    this.getDisposables = function () {\n      return _this.toDispose;\n    };\n    /** 设置的共享变量 可以在command间共享 */\n\n\n    this.setGlobal = function (key, value) {\n      _this.commandService.setGlobal(key, value);\n    };\n    /** 获取共享变量 */\n\n\n    this.getGlobal = function (key) {\n      return _this.commandService.getGlobal(key);\n    };\n  }\n\n  _createClass(CmdContext, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      this.getGraphMeta().then(function (meta) {\n        _this2.graphMeta = meta;\n      });\n    }\n  }]);\n\n  return CmdContext;\n}();\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], CmdContext.prototype, \"graphProvider\", void 0);\n\n__decorate([inject(IHookService), __metadata(\"design:type\", Object)], CmdContext.prototype, \"hookService\", void 0);\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], CmdContext.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], CmdContext.prototype, \"modelService\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], CmdContext.prototype, \"init\", null);\n\nCmdContext = __decorate([injectable()], CmdContext);\nexport { CmdContext };","map":null,"metadata":{},"sourceType":"module"}