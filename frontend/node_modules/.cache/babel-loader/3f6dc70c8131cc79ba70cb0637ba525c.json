{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __rest } from \"tslib\";\nimport React, { useState } from 'react';\nimport { useXflowPrefixCls } from '@antv/xflow-core';\nimport { DoubleRightOutlined, DoubleLeftOutlined } from '@ant-design/icons';\nimport { get } from 'lodash';\nimport { WorkspacePanel } from '../base-panel';\nimport { registerCustomNode } from './utils';\nimport { NodePanelBody } from './panel-body'; // import { NodePanelHeader } from '../canvas-node-tree-panel/panel-header'\n\nimport { NodePanelHeader } from './panel-header';\nimport { usePanelLyaoutStyle } from '../canvas-node-tree-panel/utils';\nimport { usePanelData } from './service';\nimport { CONTAINER_CLASS, PANEL_HEADER_HEIGHT } from './constants';\nexport { setGroupRender } from './group-panel';\nexport * from './constants';\nexport * from './utils';\nexport * from './interface';\nexport var NodePanelMain = function NodePanelMain(props) {\n  var prefixClz = props.prefixClz,\n      _props$position = props.position,\n      position = _props$position === void 0 ? {\n    width: 240,\n    top: 0,\n    bottom: 0,\n    left: 0\n  } : _props$position,\n      _props$showHeader = props.showHeader,\n      showHeader = _props$showHeader === void 0 ? true : _props$showHeader,\n      rest = __rest(props, [\"prefixClz\", \"position\", \"showHeader\"]);\n\n  var _position$width = position.width,\n      width = _position$width === void 0 ? 200 : _position$width;\n\n  var _usePanelLyaoutStyle = usePanelLyaoutStyle(props),\n      headerStyle = _usePanelLyaoutStyle.headerStyle,\n      bodyStyle = _usePanelLyaoutStyle.bodyStyle;\n\n  var _usePanelData = usePanelData(props),\n      state = _usePanelData.state,\n      onKeywordChange = _usePanelData.onKeywordChange;\n\n  return React.createElement(React.Fragment, null, showHeader && React.createElement(WorkspacePanel, Object.assign({}, rest, {\n    position: {\n      top: 0,\n      left: 0,\n      height: PANEL_HEADER_HEIGHT,\n      width: width\n    }\n  }), React.createElement(NodePanelHeader, Object.assign({}, props, {\n    state: state,\n    style: headerStyle,\n    onKeywordChange: onKeywordChange\n  }))), React.createElement(WorkspacePanel, Object.assign({\n    className: \"\".concat(CONTAINER_CLASS, \"-nodes\")\n  }, rest, {\n    position: Object.assign(Object.assign({}, position), {\n      top: showHeader ? PANEL_HEADER_HEIGHT : 0\n    })\n  }), React.createElement(NodePanelBody, Object.assign({}, props, {\n    state: state,\n    style: bodyStyle\n  }))));\n};\nexport var FlowchartNodePanel = function FlowchartNodePanel(props) {\n  registerCustomNode(get(props, 'registerNode.nodes'));\n  var prefixClz = useXflowPrefixCls('node-panel');\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      collpased = _useState2[0],\n      setCollpased = _useState2[1];\n\n  var _props$show = props.show,\n      show = _props$show === void 0 ? true : _props$show,\n      _props$position2 = props.position,\n      position = _props$position2 === void 0 ? {\n    width: 240,\n    top: 40,\n    bottom: 0,\n    left: 0\n  } : _props$position2,\n      rest = __rest(props, [\"show\", \"position\"]);\n\n  if (!show) {\n    return null;\n  }\n\n  var _position$width2 = position.width,\n      width = _position$width2 === void 0 ? 200 : _position$width2,\n      left = position.left;\n  return React.createElement(WorkspacePanel, {\n    className: CONTAINER_CLASS,\n    position: Object.assign(Object.assign({}, position), {\n      left: !collpased ? left : -width\n    })\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CONTAINER_CLASS, \"-wrapper\")\n  }, React.createElement(WorkspacePanel, Object.assign({\n    className: prefixClz\n  }, rest, {\n    position: {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  }), React.createElement(NodePanelMain, Object.assign({}, props, {\n    prefixClz: prefixClz,\n    position: position\n  }))), React.createElement(\"div\", {\n    className: \"\".concat(CONTAINER_CLASS, \"-icon\"),\n    style: {\n      top: 21,\n      right: !collpased ? -10 : -20,\n      borderRadius: !collpased ? '50%' : '0 50% 50% 0',\n      borderLeft: !collpased ? '' : 'none'\n    },\n    onClick: function onClick() {\n      setCollpased(!collpased);\n    }\n  }, collpased ? React.createElement(DoubleRightOutlined, null) : React.createElement(DoubleLeftOutlined, null))));\n};","map":null,"metadata":{},"sourceType":"module"}