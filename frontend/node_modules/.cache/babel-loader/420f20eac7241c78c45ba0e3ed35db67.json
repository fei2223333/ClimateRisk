{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { // utils\nDisposable, // context\nuseXFlowApp, // models\nMODELS, createComponentModel, // commands\nXFlowModelCommands } from '@antv/xflow-core';\nimport { NsCollapsePanelModel } from './interface';\n/** 方便其他组件执行Command改变Panel内部状态 */\n\nexport var executeCollapsePanelCommand = function executeCollapsePanelCommand(cmds, updateModel) {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: function getModel(modelService) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", NsCollapsePanelModel.useModel(modelService));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    },\n    updateModel: updateModel\n  });\n};\n/** 方便其他组件执行Command改变Panel内部状态 */\n\nexport var useCollapsePanelData = function useCollapsePanelData(props) {\n  var collapsible = props.collapsible,\n      nodeDataService = props.nodeDataService,\n      searchService = props.searchService,\n      onCollapseChange = props.onCollapseChange;\n\n  var _useXFlowApp = useXFlowApp(),\n      modelService = _useXFlowApp.modelService;\n  /** 创建model */\n\n\n  var _createComponentModel = createComponentModel({\n    /** service: onKeywordChange */\n    keyword: '',\n\n    /** 展开的key id */\n    collapseData: [],\n\n    /** 搜索结果 */\n    searchResult: []\n  }),\n      _createComponentModel2 = _slicedToArray(_createComponentModel, 3),\n      state = _createComponentModel2[0],\n      setState = _createComponentModel2[1],\n      panelModel = _createComponentModel2[2];\n  /** 注册model成为全局状态，方便其他组件联动 */\n\n\n  React.useEffect(function () {\n    if (modelService.findDeferredModel(NsCollapsePanelModel.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsCollapsePanelModel.id,\n      modelFactory: function modelFactory() {\n        return panelModel;\n      },\n      watchChange: function watchChange(self) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          var graphMetaModel, fetch, graphMetaDisposable;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return MODELS.GRAPH_META.getModel(modelService);\n\n                case 2:\n                  graphMetaModel = _context4.sent;\n\n                  //useContext(MODELS.GRAPH_META.id)\n                  fetch = function fetch(meta) {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      var data;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _context2.next = 2;\n                              return nodeDataService(meta, modelService);\n\n                            case 2:\n                              data = _context2.sent;\n                              return _context2.abrupt(\"return\", {\n                                collapseData: data\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n                  };\n\n                  graphMetaDisposable = graphMetaModel.watch(function (meta) {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      var _yield$fetch, collapseData;\n\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return fetch(meta);\n\n                            case 2:\n                              _yield$fetch = _context3.sent;\n                              collapseData = _yield$fetch.collapseData;\n                              self.setValue(function (m) {\n                                m.keyword = '';\n                                m.collapseData = collapseData;\n                                m.searchResult = [];\n                              });\n\n                            case 5:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n                  });\n                  return _context4.abrupt(\"return\", Disposable.create(function () {\n                    graphMetaDisposable.dispose();\n                  }));\n\n                case 6:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n      }\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 折叠文件夹 */\n\n  var onActiveKeyChange = React.useCallback(function (activeKey) {\n    setState(function (modelState) {\n      modelState.collapseData.forEach(function (item) {\n        if (item.id === activeKey && item.collapsible !== false) {\n          item.isCollapsed = !item.isCollapsed;\n        }\n      });\n    });\n  }, [setState]);\n  /** 搜索 */\n\n  var onKeywordChange = React.useCallback(function (keyword, panelNodes) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var searchResult;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (searchService) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", console.warn('searchService is not defined'));\n\n            case 2:\n              if (!keyword) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 5;\n              return searchService(panelNodes, keyword);\n\n            case 5:\n              searchResult = _context5.sent;\n              setState(function (modelState) {\n                modelState.keyword = keyword;\n                modelState.searchResult = searchResult;\n              });\n              _context5.next = 10;\n              break;\n\n            case 9:\n              setState(function (modelState) {\n                modelState.keyword = '';\n                modelState.searchResult = [];\n              });\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  }, // eslint-disable-next-line\n  [searchService]);\n  return {\n    state: state,\n    collapsible: collapsible,\n    setState: setState,\n    onKeywordChange: onKeywordChange,\n    onActiveKeyChange: onActiveKeyChange,\n    onCollapseChange: onCollapseChange\n  };\n};","map":null,"metadata":{},"sourceType":"module"}