{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { getMask } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { PointFillTriangulation } from '../../core/triangulation';\nvar pointFillFrag = \"uniform sampler2D u_texture;\\nuniform vec2 u_textSize;\\n\\nuniform float u_additive;\\n\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\nvarying float v_radius;\\n\\n#pragma include \\\"sdf_2d\\\"\\n#pragma include \\\"picking\\\"\\nvarying vec2 v_uv; // \\u672C\\u8EAB\\u7684 uv \\u5750\\u6807\\nvarying vec2 v_Iconuv;\\n\\nvoid main() {\\n\\n  float opacity = styleMappingMat[0][0];\\n\\n  vec2 pos = v_Iconuv / u_textSize + v_uv / u_textSize * 64.;\\n  gl_FragColor = texture2D(u_texture, pos);\\n  gl_FragColor.a *= opacity;\\n\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar pointFillVert = \"attribute vec4 a_Color;\\nattribute vec3 a_Position;\\nattribute vec3 a_Extrude;\\nattribute float a_Size;\\nattribute vec2 a_Uv;\\n\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nuniform mat2 u_RotateMatrix;\\nuniform float u_isMeter;\\n\\nvarying float v_radius;\\nvarying vec2 v_uv; // \\u672C\\u8EAB\\u7684 uv \\u5750\\u6807\\nvarying vec2 v_Iconuv; // icon \\u8D34\\u56FE\\u7684 uv \\u5750\\u6807\\n\\nuniform float u_opacity : 1;\\nuniform vec2 u_offsets;\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\n\\nvoid main() {\\n  vec3 extrude = a_Extrude;\\n\\n  v_uv = (a_Extrude.xy + 1.0)/2.0;\\n  v_uv.y = 1.0 - v_uv.y;\\n  v_Iconuv = a_Uv;\\n\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - empty - empty - empty\\n    0.0, 0.0, 0.0, 0.0, // empty - empty - empty - empty\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n\\n  vec2 textrueOffsets = vec2(0.0, 0.0);\\n  if(hasOffsets()) {\\n    vec2 valueXPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    textrueOffsets.r = pos2value(valueXPos, columnWidth, rowHeight); // x\\n    textureOffset += 1.0;\\n\\n    vec2 valueYPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    textrueOffsets.g = pos2value(valueYPos, columnWidth, rowHeight); // x\\n    textureOffset += 1.0;\\n  } else {\\n    textrueOffsets = u_offsets;\\n  }\\n\\n  // cal style mapping\\n\\n  // radius(16-bit)\\n  v_radius = a_Size;\\n\\n  // TODO: billboard\\n  // anti-alias\\n  \\n\\n  vec2 offset = (u_RotateMatrix * extrude.xy * (a_Size) + textrueOffsets);\\n  vec3 aPosition = a_Position;\\n  if(u_isMeter < 1.0) {\\n    // \\u4E0D\\u4EE5\\u7C73\\u4E3A\\u5B9E\\u9645\\u5355\\u4F4D\\n    offset = project_pixel(offset);\\n  } else {\\n    // \\u4EE5\\u7C73\\u4E3A\\u5B9E\\u9645\\u5355\\u4F4D\\n\\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT || u_CoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSET) {\\n      aPosition.xy += offset;\\n      offset.x = 0.0;\\n      offset.y = 0.0;\\n    }\\n  }\\n\\n\\n  // vec4 project_pos = project_position(vec4(a_Position.xy, 0.0, 1.0));\\n  vec4 project_pos = project_position(vec4(aPosition.xy, 0.0, 1.0));\\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, project_pixel(setPickingOrder(0.0)), 1.0));\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * vec4(project_pos.xy + offset, 0.0, 1.0);\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, project_pixel(setPickingOrder(0.0)), 1.0));\\n  }\\n \\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, 0.0, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nimport { Version } from '@antv/l7-maps';\n\nvar FillImageModel = function (_BaseModel) {\n  _inherits(FillImageModel, _BaseModel);\n\n  var _super = _createSuper(FillImageModel);\n\n  function FillImageModel() {\n    var _this;\n\n    _classCallCheck(this, FillImageModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"meter2coord\", 1);\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isMeter\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"radian\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas(),\n          mag: 'linear',\n          min: 'linear mipmap nearest',\n          mipmap: true\n        });\n\n        _this.layer.renderLayers();\n\n        return;\n      }\n\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.LINEAR,\n        min: gl.LINEAR_MIPMAP_LINEAR,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128,\n        mipmap: true\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(FillImageModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n          _ref$strokeOpacity = _ref.strokeOpacity,\n          strokeOpacity = _ref$strokeOpacity === void 0 ? 1 : _ref$strokeOpacity,\n          _ref$strokeWidth = _ref.strokeWidth,\n          strokeWidth = _ref$strokeWidth === void 0 ? 0 : _ref$strokeWidth,\n          _ref$stroke = _ref.stroke,\n          stroke = _ref$stroke === void 0 ? 'rgba(0,0,0,0)' : _ref$stroke,\n          _ref$offsets = _ref.offsets,\n          offsets = _ref$offsets === void 0 ? [0, 0] : _ref$offsets,\n          blend = _ref.blend,\n          rotation = _ref.rotation;\n\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n\n      var rotateFlag = 1;\n\n      if (this.mapService.version === 'GAODE2.x' || this.mapService.version === 'GAODE1.x') {\n        rotateFlag = -1;\n      }\n\n      this.radian = rotation ? rotateFlag * Math.PI * rotation / 180 : rotateFlag * Math.PI * (this.mapService.getRotation() % 360) / 180;\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity,\n        strokeOpacity: strokeOpacity,\n        strokeWidth: strokeWidth,\n        stroke: stroke,\n        offsets: offsets\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity,\n          strokeOpacity: strokeOpacity,\n          strokeWidth: strokeWidth,\n          stroke: stroke,\n          offsets: offsets\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_isMeter: Number(this.isMeter),\n        u_RotateMatrix: new Float32Array([Math.cos(this.radian), Math.sin(this.radian), -Math.sin(this.radian), Math.cos(this.radian)]),\n        u_additive: blend === 'additive' ? 1.0 : 0.0,\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_texture: this.texture,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_offsets: this.isOffsetStatic(offsets) ? offsets : [0, 0]\n      };\n    }\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute() {\n      return this.styleAttributeService.createAttributesAndIndices(this.layer.getEncodedData(), PointFillTriangulation);\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.updateTexture();\n      this.iconService.on('imageUpdate', this.updateTexture);\n\n      var _ref2 = this.layer.getLayerConfig(),\n          _ref2$unit = _ref2.unit,\n          unit = _ref2$unit === void 0 ? 'l7size' : _ref2$unit;\n\n      var version = this.mapService.version;\n\n      if (unit === 'meter' && version !== Version.L7MAP && version !== Version.GLOBEL) {\n        this.isMeter = true;\n        this.calMeter2Coord();\n      }\n\n      return this.buildModels();\n    }\n  }, {\n    key: \"calMeter2Coord\",\n    value: function calMeter2Coord() {\n      var _this$layer$getSource = _slicedToArray(this.layer.getSource().extent, 4),\n          minLng = _this$layer$getSource[0],\n          minLat = _this$layer$getSource[1],\n          maxLng = _this$layer$getSource[2],\n          maxLat = _this$layer$getSource[3];\n\n      var center = [(minLng + maxLng) / 2, (minLat + maxLat) / 2];\n      var version = this.mapService.version;\n\n      if (version === Version.MAPBOX && window.mapboxgl.MercatorCoordinate) {\n        var coord = window.mapboxgl.MercatorCoordinate.fromLngLat({\n          lng: center[0],\n          lat: center[1]\n        }, 0);\n        var offsetInMeters = 1;\n        var offsetInMercatorCoordinateUnits = offsetInMeters * coord.meterInMercatorCoordinateUnits();\n        var westCoord = new window.mapboxgl.MercatorCoordinate(coord.x - offsetInMercatorCoordinateUnits, coord.y, coord.z);\n        var westLnglat = westCoord.toLngLat();\n        this.meter2coord = center[0] - westLnglat.lng;\n        return;\n      }\n\n      var m1 = this.mapService.meterToCoord(center, [minLng, minLat]);\n      var m2 = this.mapService.meterToCoord(center, [maxLng === minLng ? maxLng + 0.1 : maxLng, maxLat === minLat ? minLat + 0.1 : maxLat]);\n      this.meter2coord = (m1 + m2) / 2;\n\n      if (!Boolean(this.meter2coord)) {\n        this.meter2coord = 7.70681090738883;\n      }\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      var _ref3 = this.layer.getLayerConfig(),\n          _ref3$mask = _ref3.mask,\n          mask = _ref3$mask === void 0 ? false : _ref3$mask,\n          _ref3$maskInside = _ref3.maskInside,\n          maskInside = _ref3$maskInside === void 0 ? true : _ref3$maskInside;\n\n      var _this$getShaders = this.getShaders(),\n          frag = _this$getShaders.frag,\n          vert = _this$getShaders.vert,\n          type = _this$getShaders.type;\n\n      return [this.layer.buildLayerModel({\n        moduleName: 'pointfill_' + type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        triangulation: PointFillTriangulation,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside)\n      })];\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders() {\n      return {\n        frag: pointFillFrag,\n        vert: pointFillVert,\n        type: 'normal'\n      };\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      this.iconService.off('imageUpdate', this.updateTexture);\n      this.texture.destroy();\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var iconMap = _this2.iconService.getIconMap();\n\n            var shape = feature.shape;\n\n            var _ref4 = iconMap[shape] || {\n              x: 0,\n              y: 0\n            },\n                x = _ref4.x,\n                y = _ref4.y;\n\n            return [x, y];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'extrude',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Extrude',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var extrude = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0];\n            var extrudeIndex = attributeIdx % 4 * 3;\n            return [extrude[extrudeIndex], extrude[extrudeIndex + 1], extrude[extrudeIndex + 2]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 5 : _feature$size;\n            return Array.isArray(size) ? [size[0] * _this2.meter2coord] : [size * _this2.meter2coord];\n          }\n        }\n      });\n    }\n  }]);\n\n  return FillImageModel;\n}(BaseModel);\n\nexport { FillImageModel as default };","map":null,"metadata":{},"sourceType":"module"}