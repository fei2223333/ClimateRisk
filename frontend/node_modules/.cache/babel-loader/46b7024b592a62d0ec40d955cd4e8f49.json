{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands } from '../constant';\nexport var NsGraphFullscreen;\n\n(function (NsGraphFullscreen) {\n  /** Command: 用于注册named factory */\n  NsGraphFullscreen.command = XFlowGraphCommands.GRAPH_FULLSCREEN;\n  /** hookName */\n\n  NsGraphFullscreen.hookKey = 'graphFullscreen';\n})(NsGraphFullscreen || (NsGraphFullscreen = {}));\n\nvar GraphFullscreenCommand =\n/*#__PURE__*/\n\n/** 画布Fullscreen命令 */\nfunction () {\n  function GraphFullscreenCommand() {\n    var _this = this;\n\n    _classCallCheck(this, GraphFullscreenCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, config, appContainer, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context2.next = 4;\n                return this.ctx.getGraphConfig();\n\n              case 4:\n                config = _context2.sent;\n                // @ts-ignore\n                appContainer = config.appContainer;\n\n                if (appContainer) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                _context2.next = 10;\n                return hooks.graphFullscreen.call(\n                /** 执行hooks pipeline处理args */\n                args,\n                /** 执行 callback */\n                function () {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var _a, _b, fulllscreen;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            fulllscreen = false;\n\n                            if (!document.fullscreenElement) {\n                              (_a = appContainer.requestFullscreen) === null || _a === void 0 ? void 0 : _a.call(appContainer);\n                              fulllscreen = true;\n                            } else {\n                              (_b = document.exitFullscreen) === null || _b === void 0 ? void 0 : _b.call(document);\n                            }\n\n                            return _context.abrupt(\"return\", {\n                              fulllscreen: fulllscreen\n                            });\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n                },\n                /** execute command 时创建的hook */\n                runtimeHook);\n\n              case 10:\n                result = _context2.sent;\n\n                /** 设置结果 */\n                this.ctx.setResult(result);\n                return _context2.abrupt(\"return\", this);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.ctx.undo();\n                return _context3.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.ctx.isUndoable) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context4.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n  }\n\n  _createClass(GraphFullscreenCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n    /** isUndoable */\n\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n  }]);\n\n  return GraphFullscreenCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphFullscreenCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphFullscreenCommand.prototype, \"init\", null);\n\nGraphFullscreenCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphFullscreen.command.id\n  }\n})\n/** 画布Fullscreen命令 */\n], GraphFullscreenCommand);\nexport { GraphFullscreenCommand };","map":null,"metadata":{},"sourceType":"module"}