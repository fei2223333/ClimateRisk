{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from 'react';\nimport { Empty, Spin } from 'antd';\nimport { SchemaForm } from './schema-form';\nimport { makeControlMap, xflowDefaultControls } from './schema-form/control-map/index';\nexport var PanelBody = function PanelBody(props) {\n  var _props$schema = props.schema,\n      schema = _props$schema === void 0 ? {\n    tabs: []\n  } : _props$schema,\n      triggerUpdate = props.triggerUpdate,\n      onFieldsChange = props.onFieldsChange,\n      afterUpdatingCb = props.afterUpdatingCb,\n      defaultControlRender = props.defaultControlRender,\n      loading = props.loading,\n      controlMapService = props.controlMapService,\n      _props$defaultControl = props.defaultControls,\n      defaultControls = _props$defaultControl === void 0 ? [] : _props$defaultControl;\n  var controlMapCache = React.useMemo(function () {\n    var controlMap = makeControlMap([].concat(_toConsumableArray(xflowDefaultControls), _toConsumableArray(defaultControls)));\n\n    if (controlMapService) {\n      controlMapService(controlMap);\n    }\n\n    return controlMap;\n  }, [controlMapService, defaultControls]);\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      className: \"\".concat(props.prefixClz, \"-body\"),\n      style: Object.assign(Object.assign({}, props.style), {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      })\n    }, React.createElement(Spin, {\n      spinning: true\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"\".concat(props.prefixClz, \"-body\"),\n    style: props.style\n  }, schema.tabs.length > 0 && React.createElement(SchemaForm, {\n    schema: schema,\n    onFieldsChange: onFieldsChange,\n    controlMap: controlMapCache,\n    defaultControlRender: defaultControlRender,\n    afterUpdatingCb: afterUpdatingCb,\n    triggerUpdate: triggerUpdate\n  }), schema.tabs.length === 0 && React.createElement(Empty, {\n    style: {\n      paddingTop: '64px'\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}