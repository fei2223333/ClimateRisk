{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Point } from '../../geometry';\nimport { Dom, NumberExt, FunctionExt } from '../../util';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport var Button = /*#__PURE__*/function (_ToolsView$ToolItem) {\n  _inherits(Button, _ToolsView$ToolItem);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"onRender\",\n    value: function onRender() {\n      Dom.addClass(this.container, this.prefixClassName('cell-tool-button'));\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.updatePosition();\n      return this;\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      var view = this.cellView;\n      var matrix = view.cell.isEdge() ? this.getEdgeMatrix() : this.getNodeMatrix();\n      Dom.transform(this.container, matrix, {\n        absolute: true\n      });\n    }\n  }, {\n    key: \"getNodeMatrix\",\n    value: function getNodeMatrix() {\n      var view = this.cellView;\n      var options = this.options;\n      var _options$x = options.x,\n          x = _options$x === void 0 ? 0 : _options$x,\n          _options$y = options.y,\n          y = _options$y === void 0 ? 0 : _options$y;\n      var offset = options.offset,\n          useCellGeometry = options.useCellGeometry,\n          rotate = options.rotate;\n      var bbox = Util.getViewBBox(view, useCellGeometry);\n      var angle = view.cell.getAngle();\n\n      if (!rotate) {\n        bbox = bbox.bbox(angle);\n      }\n\n      var offsetX = 0;\n      var offsetY = 0;\n\n      if (typeof offset === 'number') {\n        offsetX = offset;\n        offsetY = offset;\n      } else if (typeof offset === 'object') {\n        offsetX = offset.x;\n        offsetY = offset.y;\n      }\n\n      x = NumberExt.normalizePercentage(x, bbox.width);\n      y = NumberExt.normalizePercentage(y, bbox.height);\n      var matrix = Dom.createSVGMatrix().translate(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n\n      if (rotate) {\n        matrix = matrix.rotate(angle);\n      }\n\n      matrix = matrix.translate(x + offsetX - bbox.width / 2, y + offsetY - bbox.height / 2);\n      return matrix;\n    }\n  }, {\n    key: \"getEdgeMatrix\",\n    value: function getEdgeMatrix() {\n      var view = this.cellView;\n      var options = this.options;\n      var _options$offset = options.offset,\n          offset = _options$offset === void 0 ? 0 : _options$offset,\n          _options$distance = options.distance,\n          distance = _options$distance === void 0 ? 0 : _options$distance,\n          rotate = options.rotate;\n      var tangent;\n      var position;\n      var angle;\n\n      if (NumberExt.isPercentage(distance)) {\n        tangent = view.getTangentAtRatio(parseFloat(distance) / 100);\n      } else {\n        tangent = view.getTangentAtLength(distance);\n      }\n\n      if (tangent) {\n        position = tangent.start;\n        angle = tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n      } else {\n        position = view.getConnection().start;\n        angle = 0;\n      }\n\n      var matrix = Dom.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n\n      if (typeof offset === 'object') {\n        matrix = matrix.translate(offset.x || 0, offset.y || 0);\n      } else {\n        matrix = matrix.translate(0, offset);\n      }\n\n      if (!rotate) {\n        matrix = matrix.rotate(-angle);\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e) {\n      if (this.guard(e)) {\n        return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n      var onClick = this.options.onClick;\n\n      if (typeof onClick === 'function') {\n        FunctionExt.call(onClick, this.cellView, {\n          e: e,\n          view: this.cellView,\n          cell: this.cellView.cell,\n          btn: this\n        });\n      }\n    }\n  }]);\n\n  return Button;\n}(ToolsView.ToolItem);\n\n(function (Button) {\n  Button.config({\n    name: 'button',\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    }\n  });\n})(Button || (Button = {}));\n\n(function (Button) {\n  Button.Remove = Button.define({\n    name: 'button-remove',\n    markup: [{\n      tagName: 'circle',\n      selector: 'button',\n      attrs: {\n        r: 7,\n        fill: '#FF1D00',\n        cursor: 'pointer'\n      }\n    }, {\n      tagName: 'path',\n      selector: 'icon',\n      attrs: {\n        d: 'M -3 -3 3 3 M -3 3 3 -3',\n        fill: 'none',\n        stroke: '#FFFFFF',\n        'stroke-width': 2,\n        'pointer-events': 'none'\n      }\n    }],\n    distance: 60,\n    offset: 0,\n    onClick: function onClick(_ref) {\n      var view = _ref.view,\n          btn = _ref.btn;\n      btn.parent.remove();\n      view.cell.remove({\n        ui: true,\n        toolId: btn.cid\n      });\n    }\n  });\n})(Button || (Button = {}));","map":null,"metadata":{},"sourceType":"module"}