{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport uniqBy from 'lodash/uniqBy';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { // utils\nDisposable, // context\nuseXFlowApp, // models\nMODELS, createComponentModel, // commands\nXFlowModelCommands } from '@antv/xflow-core';\nimport { TREE_ROOT_ID } from './constants';\nexport var NsNodeTreePanelModel;\n\n(function (NsNodeTreePanelModel) {\n  var _this = this;\n\n  NsNodeTreePanelModel.id = 'TREE_PANEL_MODEL';\n\n  NsNodeTreePanelModel.useModel = function (model) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", model.awaitModel(NsNodeTreePanelModel.id));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n})(NsNodeTreePanelModel || (NsNodeTreePanelModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\n\n\nexport var executeNodeDndTreeCommand = function executeNodeDndTreeCommand(cmds, updateModel) {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: function getModel(modelService) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", NsNodeTreePanelModel.useModel(modelService));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    },\n    updateModel: updateModel\n  });\n};\nexport var useTreePanelData = function useTreePanelData(props) {\n  var treeDataService = props.treeDataService,\n      searchService = props.searchService;\n\n  var _useXFlowApp = useXFlowApp(),\n      modelService = _useXFlowApp.modelService;\n  /** 使用model */\n\n\n  var _createComponentModel = createComponentModel({\n    treeData: [],\n    searchList: [],\n    treeNodeList: [],\n    expandedKeys: [],\n    defaultExpandAll: false,\n    keyword: ''\n  }),\n      _createComponentModel2 = _slicedToArray(_createComponentModel, 3),\n      state = _createComponentModel2[0],\n      setState = _createComponentModel2[1],\n      panelModel = _createComponentModel2[2];\n  /** 注册成为全局状态，方便其他组件联动 */\n\n\n  React.useEffect(function () {\n    if (modelService.findDeferredModel(NsNodeTreePanelModel.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsNodeTreePanelModel.id,\n      modelFactory: function modelFactory() {\n        return panelModel;\n      },\n      watchChange: function watchChange(self) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n          var graphMetaModel, fetch, graphMetaDisposable;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return MODELS.GRAPH_META.getModel(modelService);\n\n                case 2:\n                  graphMetaModel = _context5.sent;\n\n                  //useContext(MODELS.GRAPH_META.id)\n                  fetch = function fetch(meta) {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      var listData, _NodeList2Tree, treeData, rootNodes, currentState, expandedKeys;\n\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return treeDataService(meta, modelService);\n\n                            case 2:\n                              listData = _context3.sent;\n                              _NodeList2Tree = NodeList2Tree(listData), treeData = _NodeList2Tree.treeData, rootNodes = _NodeList2Tree.rootNodes;\n                              _context3.next = 6;\n                              return self.getValidValue();\n\n                            case 6:\n                              currentState = _context3.sent;\n                              // 设置默认展开的keys\n                              expandedKeys = currentState.expandedKeys.length > 0 ? currentState.expandedKeys : rootNodes.map(function (i) {\n                                return i.id;\n                              });\n                              return _context3.abrupt(\"return\", {\n                                listData: listData,\n                                treeData: treeData,\n                                expandedKeys: expandedKeys\n                              });\n\n                            case 9:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n                  };\n\n                  graphMetaDisposable = graphMetaModel.watch(function (meta) {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                      var data;\n                      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _context4.next = 2;\n                              return fetch(meta);\n\n                            case 2:\n                              data = _context4.sent;\n                              self.setValue({\n                                treeNodeList: data.listData,\n                                treeData: data.treeData,\n                                expandedKeys: data.expandedKeys,\n                                defaultExpandAll: false,\n                                keyword: '',\n                                searchList: []\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4);\n                    }));\n                  });\n                  return _context5.abrupt(\"return\", Disposable.create(function () {\n                    graphMetaDisposable.dispose();\n                  }));\n\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n      }\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 折叠文件夹 */\n\n  var onFolderExpand = React.useCallback(function (expandedKeys) {\n    setState(function (modelState) {\n      modelState.expandedKeys = expandedKeys;\n    });\n  }, [setState]);\n  /** 搜索 */\n\n  var onKeywordChange = React.useCallback(function (keyword) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var list;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (searchService) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", console.warn('searchService is not defined'));\n\n            case 2:\n              if (!keyword) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 5;\n              return searchService(state.treeNodeList, keyword);\n\n            case 5:\n              list = _context6.sent;\n              setState(function (modelState) {\n                modelState.keyword = keyword;\n                modelState.searchList = list;\n              });\n              _context6.next = 10;\n              break;\n\n            case 9:\n              setState(function (modelState) {\n                modelState.keyword = '';\n                modelState.searchList = [];\n              });\n\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n  }, // eslint-disable-next-line\n  [searchService, state.treeNodeList]);\n  return {\n    state: state,\n    setState: setState,\n    onKeywordChange: onKeywordChange,\n    onFolderExpand: onFolderExpand\n  };\n}; // 将list数据转换为树\n\nexport function NodeList2Tree() {\n  var treeNodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var getGroupByIdMap = function getGroupByIdMap(list) {\n    var uniqList = uniqBy(list, 'id');\n    var groups = uniqList.reduce(function (map, node) {\n      var parentId = node.parentId || TREE_ROOT_ID;\n\n      if (!map.has(parentId)) {\n        map.set(parentId, []);\n      }\n\n      var group = map.get(parentId);\n      group.push(node);\n      return map;\n    }, new Map());\n    return groups;\n  };\n\n  var groupMap = getGroupByIdMap(cloneDeep(treeNodes));\n\n  function iterator(nodes, groupMapArgs) {\n    return nodes.map(function (node) {\n      if (groupMapArgs.has(node.id)) {\n        var children = groupMapArgs.get(node.id);\n        node.key = node.id;\n        node.isDirectory = true;\n        node.children = iterator(children, groupMapArgs) || [];\n      } else {\n        node.isLeaf = true;\n      }\n\n      return node;\n    });\n  }\n\n  var rootNodes = groupMap.get(TREE_ROOT_ID) || [];\n  var treeData = iterator(rootNodes, groupMap);\n  return {\n    treeData: treeData,\n    rootNodes: rootNodes\n  };\n}","map":null,"metadata":{},"sourceType":"module"}