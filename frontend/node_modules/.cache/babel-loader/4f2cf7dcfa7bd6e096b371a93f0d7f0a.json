{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Line } from '../../geometry';\nimport { resolve, getPointAtEdge } from '../node-anchor/util';\nimport { getClosestPoint } from './closest';\nimport { FunctionExt } from '../../util';\n\nvar orthogonal = function orthogonal(view, magnet, refPoint, options) {\n  var OFFSET = 1e6;\n  var path = view.getConnection();\n  var segmentSubdivisions = view.getConnectionSubdivisions();\n  var vLine = new Line(refPoint.clone().translate(0, OFFSET), refPoint.clone().translate(0, -OFFSET));\n  var hLine = new Line(refPoint.clone().translate(OFFSET, 0), refPoint.clone().translate(-OFFSET, 0));\n  var vIntersections = vLine.intersect(path, {\n    segmentSubdivisions: segmentSubdivisions\n  });\n  var hIntersections = hLine.intersect(path, {\n    segmentSubdivisions: segmentSubdivisions\n  });\n  var intersections = [];\n\n  if (vIntersections) {\n    intersections.push.apply(intersections, _toConsumableArray(vIntersections));\n  }\n\n  if (hIntersections) {\n    intersections.push.apply(intersections, _toConsumableArray(hIntersections));\n  }\n\n  if (intersections.length > 0) {\n    return refPoint.closest(intersections);\n  }\n\n  if (options.fallbackAt != null) {\n    return getPointAtEdge(view, options.fallbackAt);\n  }\n\n  return FunctionExt.call(getClosestPoint, this, view, magnet, refPoint, options);\n};\n\nexport var orth = resolve(orthogonal);","map":null,"metadata":{},"sourceType":"module"}