{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Widget } from '../common';\nimport { Dom } from '../../util';\nimport { Angle, Point } from '../../geometry';\nexport var Knob = /*#__PURE__*/function (_Widget) {\n  _inherits(Knob, _Widget);\n\n  function Knob() {\n    _classCallCheck(this, Knob);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Knob).apply(this, arguments));\n  }\n\n  _createClass(Knob, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = Object.assign({}, options);\n      this.render();\n      this.startListening();\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      this.delegateEvents({\n        mousedown: 'onMouseDown',\n        touchstart: 'onMouseDown'\n      });\n      this.model.on('*', this.update, this);\n      this.graph.on('scale', this.update, this);\n      this.graph.on('translate', this.update, this);\n      this.model.on('reseted', this.remove, this);\n      this.node.on('removed', this.remove, this);\n      this.view.on('node:resize:mousedown', this.onTransform, this);\n      this.view.on('node:rotate:mousedown', this.onTransform, this);\n      this.view.on('node:resize:mouseup', this.onTransformed, this);\n      this.view.on('node:rotate:mouseup', this.onTransformed, this);\n      this.view.on('cell:knob:mousedown', this.onKnobMouseDown, this);\n      this.view.on('cell:knob:mouseup', this.onKnobMouseUp, this);\n\n      _get(_getPrototypeOf(Knob.prototype), \"startListening\", this).call(this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.undelegateEvents();\n      this.model.off('*', this.update, this);\n      this.graph.off('scale', this.update, this);\n      this.graph.off('translate', this.update, this);\n      this.model.off('reseted', this.remove, this);\n      this.node.off('removed', this.remove, this);\n      this.view.off('node:resize:mousedown', this.onTransform, this);\n      this.view.off('node:rotate:mousedown', this.onTransform, this);\n      this.view.off('node:resize:mouseup', this.onTransformed, this);\n      this.view.off('node:rotate:mouseup', this.onTransformed, this);\n      this.view.off('cell:knob:mousedown', this.onKnobMouseDown, this);\n      this.view.off('cell:knob:mouseup', this.onKnobMouseUp, this);\n\n      _get(_getPrototypeOf(Knob.prototype), \"stopListening\", this).call(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.container = document.createElement('div');\n      Dom.addClass(this.container, this.prefixClassName('widget-knob'));\n\n      if (this.options.className) {\n        Dom.addClass(this.container, this.options.className);\n      }\n\n      this.view.addClass(Private.KNOB);\n      this.graph.container.appendChild(this.container);\n      this.update();\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      this.view.removeClass(Private.KNOB);\n      return _get(_getPrototypeOf(Knob.prototype), \"remove\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this.metadata) {\n        var _this$metadata = this.metadata,\n            update = _this$metadata.update,\n            position = _this$metadata.position;\n        var args = {\n          knob: this,\n          cell: this.cell,\n          node: this.node\n        };\n\n        if (position) {\n          var pos = position.call(this.graph, Object.assign({}, args));\n\n          if (pos) {\n            var ctm = this.graph.matrix();\n            var bbox = this.node.getBBox();\n            var angle = Angle.normalize(this.node.getAngle());\n            var local = Point.create(pos);\n\n            if (angle !== 0) {\n              local.rotate(-angle, {\n                x: bbox.width / 2,\n                y: bbox.height / 2\n              });\n            }\n\n            local.translate(bbox).scale(ctm.a, ctm.d).translate(ctm.e, ctm.f);\n            this.container.style.left = \"\".concat(local.x, \"px\");\n            this.container.style.top = \"\".concat(local.y, \"px\");\n          }\n        }\n\n        if (update) {\n          update.call(this.graph, Object.assign({}, args));\n        }\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.container.style.display = 'none';\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.container.style.display = '';\n    }\n  }, {\n    key: \"onTransform\",\n    value: function onTransform() {\n      this.hide();\n    }\n  }, {\n    key: \"onTransformed\",\n    value: function onTransformed() {\n      this.show();\n    }\n  }, {\n    key: \"onKnobMouseDown\",\n    value: function onKnobMouseDown(_ref) {\n      var knob = _ref.knob;\n\n      if (this.cid !== knob.cid) {\n        this.hide();\n      }\n    }\n  }, {\n    key: \"onKnobMouseUp\",\n    value: function onKnobMouseUp() {\n      this.show();\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(name, evt) {\n      if (this.view) {\n        var e = this.view.normalizeEvent(evt);\n        var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n        this.view.notify(\"cell:\".concat(name), {\n          e: e,\n          view: this.view,\n          node: this.node,\n          cell: this.cell,\n          x: localPoint.x,\n          y: localPoint.y,\n          knob: this\n        });\n\n        if (this.cell.isNode()) {\n          this.view.notify(\"node:\".concat(name), {\n            e: e,\n            view: this.view,\n            node: this.node,\n            cell: this.cell,\n            x: localPoint.x,\n            y: localPoint.y,\n            knob: this\n          });\n        } else if (this.cell.isEdge()) {\n          this.view.notify(\"edge:\".concat(name), {\n            e: e,\n            view: this.view,\n            edge: this.cell,\n            cell: this.cell,\n            x: localPoint.x,\n            y: localPoint.y,\n            knob: this\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e) {\n      e.stopPropagation();\n      this.setEventData(e, {\n        knobbing: false,\n        originX: e.clientX,\n        originY: e.clientY,\n        clientX: e.clientX,\n        clientY: e.clientY\n      });\n      this.graph.view.undelegateEvents();\n      this.delegateDocumentEvents(Private.documentEvents, e.data);\n\n      if (this.metadata && this.metadata.onMouseDown) {\n        this.metadata.onMouseDown.call(this.graph, {\n          e: e,\n          data: this.getEventData(e),\n          knob: this,\n          cell: this.cell,\n          node: this.node\n        });\n      }\n\n      this.notify('knob:mousedown', e);\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(e) {\n      var data = this.getEventData(e);\n      var view = this.graph.findViewByCell(this.node);\n\n      if (!data.knobbing) {\n        data.knobbing = true;\n\n        if (view) {\n          view.addClass(Private.KNOBBING);\n          this.notify('knob', e);\n        }\n\n        this.model.startBatch('knob', {\n          cid: this.cid\n        });\n      }\n\n      data.clientX = e.clientX;\n      data.clientY = e.clientY;\n\n      if (this.metadata && this.metadata.onMouseMove) {\n        var ctm = this.graph.matrix();\n        var dx = (e.clientX - data.originX) / ctm.a;\n        var dy = (e.clientY - data.originY) / ctm.d;\n        var angle = this.node.getAngle();\n        var delta = new Point(dx, dy).rotate(angle);\n        this.metadata.onMouseMove.call(this.graph, {\n          e: e,\n          data: data,\n          deltaX: delta.x,\n          deltaY: delta.y,\n          knob: this,\n          cell: this.cell,\n          node: this.node\n        });\n      }\n\n      this.notify('knobbing', e);\n      this.notify('knob:mousemove', e);\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(e) {\n      this.undelegateDocumentEvents();\n      this.graph.view.delegateEvents();\n      var data = this.getEventData(e);\n      var view = this.graph.findViewByCell(this.node);\n\n      if (data.knobbing) {\n        if (view) {\n          view.removeClass(Private.KNOBBING);\n        }\n\n        if (this.metadata && this.metadata.onMouseUp) {\n          this.metadata.onMouseUp.call(this.graph, {\n            e: e,\n            data: data,\n            knob: this,\n            cell: this.cell,\n            node: this.node\n          });\n        }\n\n        this.model.stopBatch('knob', {\n          cid: this.cid\n        });\n        this.notify('knobbed', e);\n      }\n\n      this.notify('knob:mouseup', e);\n    }\n  }, {\n    key: \"node\",\n    get: function get() {\n      return this.cell;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      var meta = this.cell.prop('knob');\n\n      if (Array.isArray(meta)) {\n        if (this.options.index != null) {\n          return meta[this.options.index];\n        }\n\n        return null;\n      }\n\n      return meta;\n    }\n  }]);\n\n  return Knob;\n}(Widget);\nvar Private;\n\n(function (Private) {\n  Private.KNOB = 'has-widget-knob';\n  Private.KNOBBING = 'node-knobbing';\n  Private.documentEvents = {\n    mousemove: 'onMouseMove',\n    touchmove: 'onMouseMove',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp'\n  };\n})(Private || (Private = {}));","map":null,"metadata":{},"sourceType":"module"}