{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable no-bitwise */\nexport var FlagManager = /*#__PURE__*/function () {\n  function FlagManager(view, actions) {\n    var bootstrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, FlagManager);\n\n    this.view = view;\n    var flags = {};\n    var attrs = {};\n    var shift = 0;\n    Object.keys(actions).forEach(function (attr) {\n      var labels = actions[attr];\n\n      if (!Array.isArray(labels)) {\n        labels = [labels];\n      }\n\n      labels.forEach(function (label) {\n        var flag = flags[label];\n\n        if (!flag) {\n          shift += 1;\n          flag = flags[label] = 1 << shift;\n        }\n\n        attrs[attr] |= flag;\n      });\n    });\n    var labels = bootstrap;\n\n    if (!Array.isArray(labels)) {\n      labels = [labels];\n    }\n\n    labels.forEach(function (label) {\n      if (!flags[label]) {\n        shift += 1;\n        flags[label] = 1 << shift;\n      }\n    }); // 26 - 30 are reserved for paper flags\n    // 31+ overflows maximal number\n\n    if (shift > 25) {\n      throw new Error('Maximum number of flags exceeded.');\n    }\n\n    this.flags = flags;\n    this.attrs = attrs;\n    this.bootstrap = bootstrap;\n  }\n\n  _createClass(FlagManager, [{\n    key: \"getFlag\",\n    value: function getFlag(label) {\n      var flags = this.flags;\n\n      if (flags == null) {\n        return 0;\n      }\n\n      if (Array.isArray(label)) {\n        return label.reduce(function (memo, key) {\n          return memo | flags[key];\n        }, 0);\n      }\n\n      return flags[label] | 0;\n    }\n  }, {\n    key: \"hasAction\",\n    value: function hasAction(flag, label) {\n      return flag & this.getFlag(label);\n    }\n  }, {\n    key: \"removeAction\",\n    value: function removeAction(flag, label) {\n      return flag ^ flag & this.getFlag(label);\n    }\n  }, {\n    key: \"getBootstrapFlag\",\n    value: function getBootstrapFlag() {\n      return this.getFlag(this.bootstrap);\n    }\n  }, {\n    key: \"getChangedFlag\",\n    value: function getChangedFlag() {\n      var _this = this;\n\n      var flag = 0;\n\n      if (!this.attrs) {\n        return flag;\n      }\n\n      Object.keys(this.attrs).forEach(function (attr) {\n        if (_this.cell.hasChanged(attr)) {\n          flag |= _this.attrs[attr];\n        }\n      });\n      return flag;\n    }\n  }, {\n    key: \"cell\",\n    get: function get() {\n      return this.view.cell;\n    }\n  }]);\n\n  return FlagManager;\n}();","map":null,"metadata":{},"sourceType":"module"}