{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Base } from './base';\nexport var KnobManager = /*#__PURE__*/function (_Base) {\n  _inherits(KnobManager, _Base);\n\n  function KnobManager() {\n    var _this;\n\n    _classCallCheck(this, KnobManager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(KnobManager).apply(this, arguments));\n    _this.widgets = new Map();\n    return _this;\n  }\n\n  _createClass(KnobManager, [{\n    key: \"init\",\n    value: function init() {\n      this.startListening();\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      this.graph.on('node:mouseup', this.onNodeMouseUp, this);\n      this.graph.on('node:selected', this.onNodeSelected, this);\n      this.graph.on('node:unselected', this.onNodeUnSelected, this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.graph.off('node:mouseup', this.onNodeMouseUp, this);\n      this.graph.off('node:selected', this.onNodeSelected, this);\n      this.graph.off('node:unselected', this.onNodeUnSelected, this);\n    }\n  }, {\n    key: \"onNodeMouseUp\",\n    value: function onNodeMouseUp(_ref) {\n      var node = _ref.node;\n\n      if (!this.isSelectionEnabled) {\n        var widgets = this.graph.hook.createKnob(node, {\n          clearAll: true\n        });\n\n        if (widgets) {\n          this.widgets.set(node, widgets);\n        }\n      }\n    }\n  }, {\n    key: \"onNodeSelected\",\n    value: function onNodeSelected(_ref2) {\n      var node = _ref2.node;\n\n      if (this.isSelectionEnabled) {\n        var widgets = this.graph.hook.createKnob(node, {\n          clearAll: false\n        });\n\n        if (widgets) {\n          this.widgets.set(node, widgets);\n        }\n      }\n    }\n  }, {\n    key: \"onNodeUnSelected\",\n    value: function onNodeUnSelected(_ref3) {\n      var node = _ref3.node;\n\n      if (this.isSelectionEnabled) {\n        var widgets = this.widgets.get(node);\n\n        if (widgets) {\n          widgets.forEach(function (widget) {\n            return widget.dispose();\n          });\n        }\n\n        this.widgets.delete(node);\n      }\n    }\n  }, {\n    key: \"isSelectionEnabled\",\n    get: function get() {\n      return this.options.selecting.enabled === true;\n    }\n  }]);\n\n  return KnobManager;\n}(Base);","map":null,"metadata":{},"sourceType":"module"}