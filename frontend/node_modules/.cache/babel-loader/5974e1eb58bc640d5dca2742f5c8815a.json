{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { useXflowPrefixCls } from '@antv/xflow-core';\nimport { PanelFooter } from './panel-footer';\nimport { PanelHeader } from './panel-header';\nimport { PanelBody } from './panel-body';\nimport { usePanelLyaoutStyle } from './utils';\nimport { useJsonSchemaFormModel } from './service';\nexport { FormItemWrapper } from './schema-form';\nexport { executeJsonSchemaFormCommand } from './service';\nimport { WorkspacePanel } from '../base-panel';\n/** useFormPanelData获取数据 */\n\nexport var JsonSchemaFormMain = function JsonSchemaFormMain(props) {\n  var prefixClz = props.prefixClz;\n  var getCustomRenderComponent = props.getCustomRenderComponent,\n      afterUpdatingCb = props.afterUpdatingCb,\n      _props$formValueUpdat = props.formValueUpdateService,\n      formValueUpdateService = _props$formValueUpdat === void 0 ? function () {} : _props$formValueUpdat;\n\n  var _useJsonSchemaFormMod = useJsonSchemaFormModel(props),\n      state = _useJsonSchemaFormMod.state,\n      commandService = _useJsonSchemaFormMod.commandService,\n      modelService = _useJsonSchemaFormMod.modelService; // 联动更新form items的值\n\n\n  var triggerUpdate = React.useCallback(function (form) {\n    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var changedFields, allFields, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              form.setFieldsValue(values);\n              changedFields = Object.entries(values).map(function (_ref) {\n                var _ref2 = _slicedToArray(_ref, 2),\n                    key = _ref2[0],\n                    val = _ref2[1];\n\n                return {\n                  name: key,\n                  value: val\n                };\n              });\n              allFields = Object.entries(state.targetData).map(function (_ref3) {\n                var _ref4 = _slicedToArray(_ref3, 2),\n                    key = _ref4[0],\n                    val = _ref4[1];\n\n                return {\n                  name: key,\n                  value: val\n                };\n              });\n              _context.next = 5;\n              return formValueUpdateService({\n                allFields: allFields,\n                values: changedFields,\n                modelService: modelService,\n                commandService: commandService,\n                targetData: state.targetData,\n                targetType: state.targetType\n              });\n\n            case 5:\n              result = _context.sent;\n\n              if (afterUpdatingCb) {\n                afterUpdatingCb(result);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }, [afterUpdatingCb, commandService, formValueUpdateService, modelService, state.targetData, state.targetType]); // 在fields change时的回调\n\n  var onFieldsChange = React.useCallback(function (changedFields, allFields) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return formValueUpdateService({\n                values: changedFields,\n                allFields: allFields,\n                modelService: modelService,\n                commandService: commandService,\n                targetData: state.targetData,\n                targetType: state.targetType\n              });\n\n            case 2:\n              result = _context2.sent;\n\n              if (afterUpdatingCb) {\n                afterUpdatingCb(result);\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  }, [afterUpdatingCb, commandService, formValueUpdateService, modelService, state.targetData, state.targetType]);\n  /** schema为空的情况  */\n\n  var noSchema = React.useMemo(function () {\n    try {\n      return state.schema.tabs.length === 0 || !state.schema;\n    } catch (error) {\n      return true;\n    }\n  }, [state.schema]);\n\n  var _usePanelLyaoutStyle = usePanelLyaoutStyle(props, noSchema),\n      headerStyle = _usePanelLyaoutStyle.headerStyle,\n      bodyStyle = _usePanelLyaoutStyle.bodyStyle,\n      footerStyle = _usePanelLyaoutStyle.footerStyle;\n  /** 支持自定义渲染 */\n\n\n  if (getCustomRenderComponent) {\n    var Component = getCustomRenderComponent(state.targetType, state.targetData, modelService, commandService);\n\n    if (Component) {\n      return React.createElement(Component, Object.assign(Object.assign({}, props), {\n        headerStyle: headerStyle,\n        bodyStyle: bodyStyle,\n        footerStyle: footerStyle,\n        targetData: state.targetData,\n        targetType: state.targetType,\n        modelService: modelService,\n        commandService: commandService\n      }));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: prefixClz\n  }, React.createElement(PanelHeader, Object.assign({\n    hasSchema: !noSchema\n  }, props, {\n    state: state,\n    style: headerStyle,\n    prefixClz: props.prefixClz\n  })), React.createElement(PanelBody, Object.assign({}, props, {\n    key: state.targetData && state.targetData.id,\n    style: bodyStyle,\n    prefixClz: props.prefixClz,\n    loading: state.loading,\n    schema: state.schema,\n    triggerUpdate: triggerUpdate,\n    onFieldsChange: onFieldsChange\n  })), React.createElement(PanelFooter, Object.assign({}, props, {\n    state: state,\n    style: footerStyle\n  })));\n};\nexport var JsonSchemaForm = function JsonSchemaForm(props) {\n  var prefixClz = useXflowPrefixCls('json-schema-form');\n  return React.createElement(WorkspacePanel, Object.assign({}, props, {\n    className: prefixClz\n  }), React.createElement(JsonSchemaFormMain, Object.assign({}, props, {\n    prefixClz: prefixClz\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}