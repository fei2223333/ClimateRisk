{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFlowNodeCommands } from '../constant';\nexport var NsAddGroup;\n\n(function (NsAddGroup) {\n  /** Command: 用于注册named factory */\n  NsAddGroup.command = XFlowGroupCommands.ADD_GROUP;\n  /** hookName */\n\n  NsAddGroup.hookKey = 'addGroup';\n  NsAddGroup.GROUP_PADDING = 12;\n  NsAddGroup.GROUP_HEADER_HEIGHT = 40;\n})(NsAddGroup || (NsAddGroup = {}));\n\nvar AddGroupCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function AddGroupCommand() {\n    var _this = this;\n\n    _classCallCheck(this, AddGroupCommand);\n\n    this.getBBox = function (node, nodeConfig, graph) {\n      var _nodeConfig$groupHead = nodeConfig.groupHeaderHeight,\n          groupHeaderHeight = _nodeConfig$groupHead === void 0 ? NsAddGroup.GROUP_HEADER_HEIGHT : _nodeConfig$groupHead,\n          _nodeConfig$groupPadd = nodeConfig.groupPadding,\n          groupPadding = _nodeConfig$groupPadd === void 0 ? NsAddGroup.GROUP_PADDING : _nodeConfig$groupPadd;\n      var bbox = graph.getCellsBBox(node.children);\n      bbox.moveAndExpand({\n        x: -groupPadding,\n        y: -(groupPadding + groupHeaderHeight),\n        width: groupPadding * 2,\n        height: groupPadding * 2 + groupHeaderHeight\n      });\n      return bbox;\n    };\n    /** 执行Cmd */\n\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context3.next = 5;\n                return hooks.addGroup.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this3 = this;\n\n                    var nodeConfig, createGroupService, cellFactory, commandService, graph, res, _res$contextProvider$, groupCell, groupId, groupChildren, groupBBox;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            nodeConfig = handlerArgs.nodeConfig, createGroupService = handlerArgs.createService, cellFactory = handlerArgs.cellFactory, commandService = handlerArgs.commandService;\n                            _context2.next = 3;\n                            return ctx.getX6Graph();\n\n                          case 3:\n                            graph = _context2.sent;\n                            _context2.next = 6;\n                            return commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                              cellFactory: cellFactory,\n                              createNodeService: createGroupService,\n                              nodeConfig: nodeConfig\n                            });\n\n                          case 6:\n                            res = _context2.sent;\n                            _res$contextProvider$ = res.contextProvider().getResult(), groupCell = _res$contextProvider$.nodeCell;\n                            groupId = groupCell.id;\n                            groupChildren = nodeConfig.groupChildren;\n\n                            if (groupChildren.length) {\n                              groupChildren.forEach(function (nodeId) {\n                                var child = graph.getCellById(nodeId);\n\n                                if (child) {\n                                  child.setData(Object.assign(Object.assign({}, child.getData()), {\n                                    group: groupId,\n                                    isCollapsed: false\n                                  }));\n                                  child.prop('group', groupId);\n                                  groupCell.addChild(child);\n                                  graph.unselect(child);\n                                }\n                              });\n                              groupBBox = this.getBBox(groupCell, nodeConfig, graph);\n                              groupCell.position(groupBBox.x, groupBBox.y);\n                              groupCell.size(groupBBox.width, groupBBox.height);\n                              groupCell.setZIndex(0);\n                              groupCell.prop('isGroup', true);\n                              groupCell.setData(Object.assign(Object.assign({}, groupCell.getData()), {\n                                width: groupBBox.width,\n                                height: groupBBox.height,\n                                groupChildrenSize: {\n                                  width: groupBBox.width,\n                                  height: groupBBox.height\n                                },\n                                x: groupBBox.x,\n                                y: groupBBox.y,\n                                isGroup: true\n                              }));\n                              graph.select(groupCell);\n                            }\n\n                            if (!nodeConfig.isCollapsed) {\n                              _context2.next = 14;\n                              break;\n                            }\n\n                            _context2.next = 14;\n                            return commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n                              nodeId: nodeConfig.id,\n                              isCollapsed: nodeConfig.isCollapsed\n                            });\n\n                          case 14:\n                            /** add undo: delete node */\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n                                          nodeConfig: nodeConfig\n                                        });\n\n                                      case 1:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n                            }));\n                            return _context2.abrupt(\"return\", {\n                              nodeConfig: nodeConfig,\n                              nodeCell: groupCell\n                            });\n\n                          case 16:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, runtimeHook);\n\n              case 5:\n                result = _context3.sent;\n                ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context4.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(AddGroupCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return AddGroupCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddGroupCommand.prototype, \"contextProvider\", void 0);\n\nAddGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddGroup.command.id\n  }\n})\n/** 创建节点命令 */\n], AddGroupCommand);\nexport { AddGroupCommand };","map":null,"metadata":{},"sourceType":"module"}