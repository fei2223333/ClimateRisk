{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __awaiter } from \"tslib\";\nimport { BehaviorSubject, asyncScheduler } from 'rxjs';\nimport { throttleTime, filter, distinctUntilChanged } from 'rxjs/operators';\nimport { Disposable, DisposableCollection } from './disposable';\nimport { produce, setAutoFreeze, enableMapSet } from 'immer';\nimport { Deferred } from './deferred'; // docs:https://immerjs.github.io/immer/map-set\n\nenableMapSet(); // https://immerjs.github.io/immer/freezing\n\nsetAutoFreeze(false);\nexport var NsModel;\n\n(function (NsModel) {\n  /**\n   * observable 空值，当作model ready的变量\n   * 空值不会触发subscrition\n   */\n  NsModel.EMPTY_VALUE = Symbol('EMPTY_MODEL_VALUE');\n  /** 判断是否是空 */\n\n  function isValidValue(val) {\n    return val !== NsModel.EMPTY_VALUE;\n  }\n\n  NsModel.isValidValue = isValidValue;\n  /** 默认的对事件性能优化方法：只在value不同时才触发，同时增加throttle */\n\n  function defaultPipeFunction(observable) {\n    return observable.pipe(distinctUntilChanged(), filter(function (item) {\n      return isValidValue(item);\n    }), throttleTime(17, asyncScheduler, {\n      leading: false,\n      trailing: true\n    }));\n  }\n\n  NsModel.defaultPipeFunction = defaultPipeFunction;\n})(NsModel || (NsModel = {}));\n\nexport var RxModel =\n/** 初始化 */\nfunction RxModel() {\n  var _this = this;\n\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NsModel.EMPTY_VALUE;\n  var maxSubscription = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n\n  _classCallCheck(this, RxModel);\n\n  /** disposable */\n  this.toDispose = new DisposableCollection();\n  /** 监听model变化 */\n\n  this.watch = function (cb) {\n    var pipeFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NsModel.defaultPipeFunction;\n\n    if (_this.subject$.observers.length + 1 > _this.maxSubscription) {\n      console.warn(\"\".concat(_this.subject$, \" reach maxSubscription limitation, please check\"));\n    }\n\n    var observable = pipeFunction ? pipeFunction(_this.subject$) : _this.subject$;\n    var subscription = observable.subscribe(cb);\n    return Disposable.create(function () {\n      subscription.unsubscribe();\n    });\n  };\n  /** 获取model的值 */\n\n\n  this.getValue = function () {\n    return _this.subject$.getValue();\n  };\n  /** 更新model */\n\n\n  this.setValue = function (value) {\n    if (!_this.subject$) {\n      return;\n    }\n\n    if (typeof value === 'function') {\n      var currentValue = _this.subject$.getValue();\n\n      var nextState = produce(currentValue, function (draft) {\n        value(draft);\n      });\n\n      if (NsModel.isValidValue(nextState)) {\n        _this.setValue(nextState);\n      }\n\n      return;\n    }\n\n    _this.subject$.next(value);\n  };\n  /** 是否已有值 */\n\n\n  this.hasValidValue = function () {\n    var value = _this.getValue();\n\n    return NsModel.isValidValue(value);\n  };\n  /** 获取非空的值 */\n\n\n  this.getValidValue = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var deffer, d;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              deffer = new Deferred();\n              /** 返回非空的值 */\n\n              if (!this.hasValidValue()) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", this.getValue());\n\n            case 3:\n              /** 返回会resolve非空值的Promise */\n              d = this.watch(function (val) {\n                if (NsModel.isValidValue(val)) {\n                  deffer.resolve(val);\n                  d.dispose();\n                }\n              });\n              return _context.abrupt(\"return\", deffer.promise);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n  };\n  /** disposable */\n\n\n  this.dispose = function () {\n    _this.toDispose.dispose();\n  };\n\n  this.subject$ = new BehaviorSubject(initialValue || NsModel.EMPTY_VALUE);\n  this.maxSubscription = maxSubscription;\n  this.toDispose.push(Disposable.create(function () {\n    _this.subject$.complete();\n\n    _this.subject$.unsubscribe(); // @ts-ignore\n\n\n    _this.subject$ = null;\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}