{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport RcDropdown from 'rc-dropdown';\nexport var Dropdown = /*#__PURE__*/function (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown() {\n    _classCallCheck(this, Dropdown);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).apply(this, arguments));\n  }\n\n  _createClass(Dropdown, [{\n    key: \"render\",\n    // getTransitionName() {\n    //   const { placement = '', transitionName } = this.props\n    //   if (transitionName !== undefined) {\n    //     return transitionName\n    //   }\n    //   if (placement.indexOf('top') >= 0) {\n    //     return 'slide-down'\n    //   }\n    //   return 'slide-up'\n    // }\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          trigger = _this$props.trigger,\n          disabled = _this$props.disabled;\n      var prefixCls = \"\".concat(this.props.prefixCls, \"-dropdown\");\n      var child = React.Children.only(children);\n      var dropdownTrigger = React.cloneElement(child, {\n        className: classNames(children.props.className, \"\".concat(prefixCls, \"-trigger\")),\n        disabled: disabled\n      });\n      var triggers = disabled ? [] : Array.isArray(trigger) ? trigger : [trigger];\n      var alignPoint = false;\n\n      if (triggers && triggers.indexOf('contextMenu') !== -1) {\n        alignPoint = true;\n      }\n\n      var overlay = React.Children.only(this.props.overlay);\n      var fixedOverlay = React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-overlay\")\n      }, overlay);\n      return React.createElement(RcDropdown, Object.assign({}, this.props, {\n        prefixCls: prefixCls,\n        overlay: fixedOverlay,\n        alignPoint: alignPoint,\n        trigger: triggers\n      }), dropdownTrigger);\n    }\n  }]);\n\n  return Dropdown;\n}(React.Component);\n\n(function (Dropdown) {\n  Dropdown.defaultProps = {\n    trigger: 'hover',\n    prefixCls: 'x6',\n    mouseEnterDelay: 0.15,\n    mouseLeaveDelay: 0.1,\n    placement: 'bottomLeft'\n  };\n})(Dropdown || (Dropdown = {}));","map":null,"metadata":{},"sourceType":"module"}