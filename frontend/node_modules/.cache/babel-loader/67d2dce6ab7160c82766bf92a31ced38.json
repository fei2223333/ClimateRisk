{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { isEqual } from 'lodash';\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGraphCommands, XFlowNodeCommands, XFlowEdgeCommands, XFlowGroupCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsGraphUtils;\n\n(function (NsGraphUtils) {\n  function isNodeEqual(curNodeConfig, nextNodeConfig) {\n    /** XFlow默认的判断节点是否相等的逻辑 */\n    return isEqual(curNodeConfig, nextNodeConfig);\n  }\n\n  NsGraphUtils.isNodeEqual = isNodeEqual;\n\n  function isEdgeEqual(curEdgeConfig, nextEdgeConfig) {\n    /** XFlow默认的判断边是否相等的逻辑 */\n    return isEqual(curEdgeConfig, nextEdgeConfig);\n  }\n\n  NsGraphUtils.isEdgeEqual = isEdgeEqual;\n})(NsGraphUtils || (NsGraphUtils = {}));\n\nexport var NsGraphRender;\n\n(function (NsGraphRender) {\n  /** Command: 用于注册named factory */\n  NsGraphRender.command = XFlowGraphCommands.GRAPH_RENDER;\n  /** hookName */\n\n  NsGraphRender.hookKey = 'graphRender';\n})(NsGraphRender || (NsGraphRender = {}));\n\nvar GraphRenderCommand =\n/*#__PURE__*/\n\n/** 画布渲染命令 */\nfunction () {\n  function GraphRenderCommand() {\n    var _this = this;\n\n    _classCallCheck(this, GraphRenderCommand);\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context2.next = 4;\n                return hooks.graphRender.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var x6Graph, graphMeta, beforeRender, graphData, isNodeEqual, isEdgeEqual, afterRender;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return this.ctx.getX6Graph();\n\n                          case 2:\n                            x6Graph = _context.sent;\n                            _context.next = 5;\n                            return this.ctx.getGraphMeta();\n\n                          case 5:\n                            graphMeta = _context.sent;\n                            beforeRender = handlerArgs.beforeRender, graphData = handlerArgs.graphData, isNodeEqual = handlerArgs.isNodeEqual, isEdgeEqual = handlerArgs.isEdgeEqual, afterRender = handlerArgs.afterRender;\n                            /** 如果用户自定义beforeRender方法 */\n\n                            /** 如果用户自定义beforeRender方法 */\n                            beforeRender && beforeRender(graphMeta);\n                            _context.next = 10;\n                            return this.doLoadGraph(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n\n                          case 10:\n                            /** 如果用户自定义afterRender方法 */\n                            afterRender && afterRender(graphData, graphMeta);\n                            return _context.abrupt(\"return\", {});\n\n                          case 12:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context2.sent;\n\n                /** 设置结果 */\n                this.ctx.setResult(result);\n                return _context2.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.ctx.undo();\n                return _context3.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.ctx.isUndoable) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context4.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n\n    this.doLoadGraph = function (x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _this3 = this;\n\n        var commandService, _this$graphDataDiff, addNodeConfigs, addEdgeConfigs, removeNodes, removeEdges, updateNodes, updateEdges, _iterator, _step, updateNode, nodeData, _iterator2, _step2, updateEdge, edgeData, _iterator3, _step3, nodeConfig, _iterator4, _step4, edgeConfig, _iterator5, _step5, removeNode, _nodeData, _iterator6, _step6, removeEdge, _edgeData;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen())) {\n                  x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.freeze();\n                }\n\n                commandService = this.ctx.getCommands();\n                _this$graphDataDiff = this.graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual), addNodeConfigs = _this$graphDataDiff.addNodeConfigs, addEdgeConfigs = _this$graphDataDiff.addEdgeConfigs, removeNodes = _this$graphDataDiff.removeNodes, removeEdges = _this$graphDataDiff.removeEdges, updateNodes = _this$graphDataDiff.updateNodes, updateEdges = _this$graphDataDiff.updateEdges;\n                /** 更新节点/边 */\n\n                _iterator = _createForOfIteratorHelper(updateNodes);\n                _context7.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context7.next = 13;\n                  break;\n                }\n\n                updateNode = _step.value;\n                nodeData = updateNode === null || updateNode === void 0 ? void 0 : updateNode.getData();\n                _context7.next = 11;\n                return commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                  nodeConfig: nodeData\n                });\n\n              case 11:\n                _context7.next = 6;\n                break;\n\n              case 13:\n                _context7.next = 18;\n                break;\n\n              case 15:\n                _context7.prev = 15;\n                _context7.t0 = _context7[\"catch\"](4);\n\n                _iterator.e(_context7.t0);\n\n              case 18:\n                _context7.prev = 18;\n\n                _iterator.f();\n\n                return _context7.finish(18);\n\n              case 21:\n                _iterator2 = _createForOfIteratorHelper(updateEdges);\n                _context7.prev = 22;\n\n                _iterator2.s();\n\n              case 24:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context7.next = 31;\n                  break;\n                }\n\n                updateEdge = _step2.value;\n                edgeData = updateEdge === null || updateEdge === void 0 ? void 0 : updateEdge.getData();\n                _context7.next = 29;\n                return commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n                  edgeConfig: edgeData\n                });\n\n              case 29:\n                _context7.next = 24;\n                break;\n\n              case 31:\n                _context7.next = 36;\n                break;\n\n              case 33:\n                _context7.prev = 33;\n                _context7.t1 = _context7[\"catch\"](22);\n\n                _iterator2.e(_context7.t1);\n\n              case 36:\n                _context7.prev = 36;\n\n                _iterator2.f();\n\n                return _context7.finish(36);\n\n              case 39:\n                /** 新增节点/边 */\n                _iterator3 = _createForOfIteratorHelper(addNodeConfigs);\n                _context7.prev = 40;\n\n                _iterator3.s();\n\n              case 42:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context7.next = 48;\n                  break;\n                }\n\n                nodeConfig = _step3.value;\n                _context7.next = 46;\n                return commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                  nodeConfig: nodeConfig\n                }, {\n                  name: 'remove servcie',\n                  handler: function handler(args) {\n                    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              delete args.createNodeService;\n\n                            case 1:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n                  }\n                });\n\n              case 46:\n                _context7.next = 42;\n                break;\n\n              case 48:\n                _context7.next = 53;\n                break;\n\n              case 50:\n                _context7.prev = 50;\n                _context7.t2 = _context7[\"catch\"](40);\n\n                _iterator3.e(_context7.t2);\n\n              case 53:\n                _context7.prev = 53;\n\n                _iterator3.f();\n\n                return _context7.finish(53);\n\n              case 56:\n                _context7.next = 58;\n                return commandService.executeCommand(XFlowGroupCommands.INIT_GROUP.id, {\n                  graphData: {\n                    nodes: addNodeConfigs,\n                    edges: []\n                  }\n                });\n\n              case 58:\n                _iterator4 = _createForOfIteratorHelper(addEdgeConfigs);\n                _context7.prev = 59;\n\n                _iterator4.s();\n\n              case 61:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context7.next = 67;\n                  break;\n                }\n\n                edgeConfig = _step4.value;\n                _context7.next = 65;\n                return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                  edgeConfig: edgeConfig\n                }, {\n                  name: 'remove servcie',\n                  handler: function handler(args) {\n                    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                        while (1) {\n                          switch (_context6.prev = _context6.next) {\n                            case 0:\n                              delete args.createEdgeService;\n\n                            case 1:\n                            case \"end\":\n                              return _context6.stop();\n                          }\n                        }\n                      }, _callee6);\n                    }));\n                  }\n                });\n\n              case 65:\n                _context7.next = 61;\n                break;\n\n              case 67:\n                _context7.next = 72;\n                break;\n\n              case 69:\n                _context7.prev = 69;\n                _context7.t3 = _context7[\"catch\"](59);\n\n                _iterator4.e(_context7.t3);\n\n              case 72:\n                _context7.prev = 72;\n\n                _iterator4.f();\n\n                return _context7.finish(72);\n\n              case 75:\n                /** 删除节点/边/群组 */\n                _iterator5 = _createForOfIteratorHelper(removeNodes);\n                _context7.prev = 76;\n\n                _iterator5.s();\n\n              case 78:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context7.next = 90;\n                  break;\n                }\n\n                removeNode = _step5.value;\n                _nodeData = removeNode === null || removeNode === void 0 ? void 0 : removeNode.getData();\n\n                if (!_nodeData.isGroup) {\n                  _context7.next = 86;\n                  break;\n                }\n\n                _context7.next = 84;\n                return commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n                  nodeConfig: _nodeData\n                });\n\n              case 84:\n                _context7.next = 88;\n                break;\n\n              case 86:\n                _context7.next = 88;\n                return commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n                  nodeConfig: _nodeData\n                });\n\n              case 88:\n                _context7.next = 78;\n                break;\n\n              case 90:\n                _context7.next = 95;\n                break;\n\n              case 92:\n                _context7.prev = 92;\n                _context7.t4 = _context7[\"catch\"](76);\n\n                _iterator5.e(_context7.t4);\n\n              case 95:\n                _context7.prev = 95;\n\n                _iterator5.f();\n\n                return _context7.finish(95);\n\n              case 98:\n                _iterator6 = _createForOfIteratorHelper(removeEdges);\n                _context7.prev = 99;\n\n                _iterator6.s();\n\n              case 101:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context7.next = 108;\n                  break;\n                }\n\n                removeEdge = _step6.value;\n                _edgeData = removeEdge === null || removeEdge === void 0 ? void 0 : removeEdge.getData();\n                _context7.next = 106;\n                return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                  edgeConfig: _edgeData\n                });\n\n              case 106:\n                _context7.next = 101;\n                break;\n\n              case 108:\n                _context7.next = 113;\n                break;\n\n              case 110:\n                _context7.prev = 110;\n                _context7.t5 = _context7[\"catch\"](99);\n\n                _iterator6.e(_context7.t5);\n\n              case 113:\n                _context7.prev = 113;\n\n                _iterator6.f();\n\n                return _context7.finish(113);\n\n              case 116:\n                if (x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen()) {\n                  x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.unfreeze();\n                }\n\n              case 117:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[4, 15, 18, 21], [22, 33, 36, 39], [40, 50, 53, 56], [59, 69, 72, 75], [76, 92, 95, 98], [99, 110, 113, 116]]);\n      }));\n    };\n  }\n\n  _createClass(GraphRenderCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n    /**\n     * 画布内容Diff\n     * @param x6Graph x6画布实例\n     * @param graphData 画布数据\n     * @param isNodeEqual 允许用户自定义判断节点是否相等\n     * @param isEdgeEqual 允许用户自定义判断边是否相等\n     */\n\n  }, {\n    key: \"graphDataDiff\",\n    value: function graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n      var nodeConfigs = graphData.nodes,\n          edgeConfigs = graphData.edges;\n      /** 新增节点数据 */\n\n      var addNodeConfigs = [];\n      nodeConfigs.forEach(function (nodeConfig) {\n        var findNode = x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);\n\n        if (!findNode) {\n          addNodeConfigs.push(nodeConfig);\n        }\n      });\n      /** 保持、更新、移除节点 */\n\n      var retainNodes = [];\n      var updateNodes = [];\n      var removeNodes = [];\n      var allNodes = x6Graph.getNodes();\n      allNodes.forEach(function (x6Node) {\n        var findNodeConfig = nodeConfigs.find(function (nodeConfig) {\n          return (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id) === (x6Node === null || x6Node === void 0 ? void 0 : x6Node.id);\n        });\n\n        if (!findNodeConfig) {\n          removeNodes.push(x6Node);\n        } else {\n          var judgeResult = true;\n\n          if (isNodeEqual) {\n            /** 如果用户自定义节点是否相等的方法 */\n            judgeResult = isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n          } else {\n            /** XFlow默认的判断节点是否相等的逻辑 */\n            if ((x6Node === null || x6Node === void 0 ? void 0 : x6Node.data) && findNodeConfig) {\n              judgeResult = NsGraphUtils.isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n            }\n          }\n\n          if (!judgeResult) {\n            x6Node.setData(findNodeConfig, {\n              deep: false\n            });\n          }\n\n          judgeResult === true ? retainNodes.push(x6Node) : updateNodes.push(x6Node);\n        }\n      });\n      /** 新增边数据 */\n\n      var addEdgeConfigs = [];\n      edgeConfigs.forEach(function (edgeConfig) {\n        var findEdge = x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n\n        if (!findEdge) {\n          addEdgeConfigs.push(edgeConfig);\n        }\n      });\n      /** 保持、更新、移除节点 */\n\n      var retainEdges = [];\n      var updateEdges = [];\n      var removeEdges = [];\n      var allEdges = x6Graph.getEdges();\n      allEdges.forEach(function (x6Edge) {\n        var findEdgeConfig = edgeConfigs.find(function (edgeConfig) {\n          return (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id) === (x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.id);\n        });\n\n        if (!findEdgeConfig) {\n          removeEdges.push(x6Edge);\n        } else {\n          var judgeResult = true;\n\n          if (isEdgeEqual) {\n            /** 如果用户自定义边是否相等的方法 */\n            judgeResult = isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n          } else {\n            /** XFlow默认的判断边是否相等的逻辑 */\n            if ((x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data) && findEdgeConfig) {\n              judgeResult = NsGraphUtils.isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n            }\n          }\n\n          if (!judgeResult) {\n            x6Edge.setData(findEdgeConfig, {\n              deep: false\n            });\n          }\n\n          judgeResult === true ? retainEdges.push(x6Edge) : updateEdges.push(x6Edge);\n        }\n      });\n      return {\n        addNodeConfigs: addNodeConfigs,\n        addEdgeConfigs: addEdgeConfigs,\n        retainNodes: retainNodes,\n        retainEdges: retainEdges,\n        removeNodes: removeNodes,\n        removeEdges: removeEdges,\n        updateNodes: updateNodes,\n        updateEdges: updateEdges\n      };\n    }\n  }]);\n\n  return GraphRenderCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphRenderCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphRenderCommand.prototype, \"init\", null);\n\nGraphRenderCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphRender.command.id\n  }\n})\n/** 画布渲染命令 */\n], GraphRenderCommand);\nexport { GraphRenderCommand };","map":null,"metadata":{},"sourceType":"module"}