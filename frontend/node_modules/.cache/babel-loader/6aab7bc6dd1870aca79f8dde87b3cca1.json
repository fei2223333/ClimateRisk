{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter } from \"tslib\";\nimport { Emitter } from 'mana-common';\nexport var Disposable;\n\n(function (Disposable) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function is(arg) {\n    return !!arg && typeof arg === 'object' && 'dispose' in arg && typeof arg.dispose === 'function';\n  }\n\n  Disposable.is = is;\n\n  function create(func) {\n    return {\n      dispose: func\n    };\n  }\n\n  Disposable.create = create;\n  Disposable.NULL = create(function () {});\n})(Disposable || (Disposable = {}));\n\nexport var DisposableCollection = /*#__PURE__*/function () {\n  function DisposableCollection() {\n    var _this = this;\n\n    _classCallCheck(this, DisposableCollection);\n\n    this.disposables = [];\n    this.onDisposeEmitter = new Emitter();\n    this.disposingElements = false;\n\n    for (var _len = arguments.length, toDispose = new Array(_len), _key = 0; _key < _len; _key++) {\n      toDispose[_key] = arguments[_key];\n    }\n\n    toDispose.forEach(function (d) {\n      return _this.push(d);\n    });\n  }\n  /**\n   * This event is fired only once\n   * on first dispose of not empty collection.\n   */\n\n\n  _createClass(DisposableCollection, [{\n    key: \"checkDisposed\",\n    value: function checkDisposed() {\n      if (this.disposed && !this.disposingElements) {\n        this.onDisposeEmitter.fire(undefined);\n        this.onDisposeEmitter.dispose();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var d;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.disposed || this.disposingElements)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                this.disposingElements = true;\n\n              case 3:\n                if (this.disposed) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.prev = 4;\n                d = this.disposables.pop();\n                _context.next = 8;\n                return d.dispose();\n\n              case 8:\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](4);\n                console.error(_context.t0);\n\n              case 13:\n                _context.next = 3;\n                break;\n\n              case 15:\n                this.disposingElements = false;\n                this.checkDisposed();\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 10]]);\n      }));\n    }\n  }, {\n    key: \"push\",\n    value: function push(disposable) {\n      var _this2 = this;\n\n      var disposables = this.disposables;\n      disposables.push(disposable);\n      var originalDispose = disposable.dispose.bind(disposable);\n      var toRemove = Disposable.create(function () {\n        var index = disposables.indexOf(disposable);\n\n        if (index !== -1) {\n          disposables.splice(index, 1);\n        }\n\n        _this2.checkDisposed();\n      });\n\n      disposable.dispose = function () {\n        toRemove.dispose();\n        originalDispose();\n      };\n\n      return toRemove;\n    }\n  }, {\n    key: \"pushAll\",\n    value: function pushAll(disposables) {\n      var _this3 = this;\n\n      return disposables.map(function (disposable) {\n        return _this3.push(disposable);\n      });\n    }\n  }, {\n    key: \"onDispose\",\n    get: function get() {\n      return this.onDisposeEmitter.event;\n    }\n  }, {\n    key: \"disposed\",\n    get: function get() {\n      return this.disposables.length === 0;\n    }\n  }]);\n\n  return DisposableCollection;\n}();","map":null,"metadata":{},"sourceType":"module"}