{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { Tooltip } from 'antd';\nimport { useXFlowApp, createComponentModel, XFlowAppExtensionMoudle } from '@antv/xflow-core';\nimport { ACTIVE_NODE_PORT } from '../interface';\nimport { createModule } from '../module';\nexport var CONFIG_TYPE = 'CanvasNodePortTooltip';\n\nvar RenderTooltip = function RenderTooltip(props) {\n  var xflow = useXFlowApp();\n\n  var _createComponentModel = createComponentModel(null),\n      _createComponentModel2 = _slicedToArray(_createComponentModel, 3),\n      state = _createComponentModel2[0],\n      renderModel = _createComponentModel2[2];\n\n  React.useEffect(function () {\n    if (!xflow) {\n      return;\n    }\n\n    var subscribe = function subscribe() {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$ACTIVE_NODE_PO, model;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ACTIVE_NODE_PORT.useModel(xflow.modelService);\n\n              case 2:\n                _yield$ACTIVE_NODE_PO = _context.sent;\n                model = _yield$ACTIVE_NODE_PO.model;\n                return _context.abrupt(\"return\", model.watch(function (value) {\n                  renderModel.setValue(value);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    };\n\n    var subscription = subscribe();\n    return function () {\n      subscription.then(function (disposable) {\n        disposable.dispose();\n      });\n    };\n  }, [renderModel, xflow]);\n  var visible = !!(state && state.position && state.position.x);\n\n  if (!visible) {\n    return null;\n  }\n\n  var title = props.getTooltip ? props.getTooltip(state) : state.tooltip;\n  return React.createElement(Tooltip, {\n    visible: visible,\n    title: title,\n    placement: state.placement || 'top'\n  }, React.createElement(\"span\", {\n    className: \"canvas-node-port-tooltip\",\n    style: {\n      position: 'absolute',\n      left: state.position.x,\n      top: state.position.y\n    }\n  }));\n};\n\nexport var CanvasNodePortTooltip = function CanvasNodePortTooltip(props) {\n  var getConfig = React.useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", null);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  }, []);\n  return React.createElement(XFlowAppExtensionMoudle, {\n    createModule: createModule,\n    config: {\n      CONFIG_TYPE: CONFIG_TYPE,\n      getConfig: getConfig\n    }\n  }, React.createElement(RenderTooltip, Object.assign({}, props)));\n};","map":null,"metadata":{},"sourceType":"module"}