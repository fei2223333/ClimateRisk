{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { __awaiter } from \"tslib\";\nimport { uuidv4 } from '@antv/xflow-core';\nimport { isNumber } from 'lodash';\nimport { setProps, getProps } from '../flowchart-canvas/utils';\nimport * as NodesComponent from './nodes';\nimport { NODE_HEIGHT, NODE_WIDTH, NODEPOOL } from './constants';\n/** 和 graph config 注册的节点保持一致 */\n\nvar getAnchorStyle = function getAnchorStyle(position) {\n  return {\n    position: {\n      name: position\n    },\n    attrs: {\n      circle: {\n        r: 4,\n        magnet: true,\n        stroke: '#31d0c6',\n        strokeWidth: 2,\n        fill: '#fff',\n        style: {\n          visibility: 'hidden'\n        }\n      }\n    },\n    zIndex: 10\n  };\n};\n\nvar getPorts = function getPorts() {\n  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['top', 'right', 'bottom', 'left'];\n  return {\n    items: position.map(function (name) {\n      return {\n        group: name,\n        id: uuidv4()\n      };\n    }),\n    groups: {\n      top: getAnchorStyle('top'),\n      right: getAnchorStyle('right'),\n      bottom: getAnchorStyle('bottom'),\n      left: getAnchorStyle('left')\n    }\n  };\n};\n\nexport var getRegisterNode = function getRegisterNode(nodes) {\n  return (nodes || []).map(function (item) {\n    var name = item.name,\n        popover = item.popover,\n        _item$label = item.label,\n        label = _item$label === void 0 ? '' : _item$label,\n        _item$width = item.width,\n        width = _item$width === void 0 ? NODE_HEIGHT : _item$width,\n        _item$height = item.height,\n        height = _item$height === void 0 ? NODE_HEIGHT : _item$height,\n        ports = item.ports;\n    var id = uuidv4(); // 暂不使用上层数据\n\n    return {\n      id: id,\n      renderKey: name,\n      name: name,\n      label: label,\n      popoverContent: popover,\n      width: width,\n      height: height,\n      ports: ports || getPorts(),\n      originData: Object.assign({}, item),\n      isCustom: true\n    };\n  });\n};\nexport var nodeService = function nodeService(nodes) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var customNodes;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            customNodes = getRegisterNode(nodes);\n            return _context.abrupt(\"return\", [].concat(_toConsumableArray(customNodes), _toConsumableArray(NODEPOOL.map(function (_ref) {\n              var name = _ref.name,\n                  ports = _ref.ports,\n                  _ref$width = _ref.width,\n                  width = _ref$width === void 0 ? NODE_WIDTH : _ref$width,\n                  _ref$height = _ref.height,\n                  height = _ref$height === void 0 ? NODE_HEIGHT : _ref$height,\n                  _ref$label = _ref.label,\n                  label = _ref$label === void 0 ? '' : _ref$label;\n              return {\n                id: uuidv4(),\n                renderKey: name,\n                name: name,\n                label: label,\n                popoverContent: function popoverContent() {\n                  return name;\n                },\n                width: width,\n                height: height,\n                ports: getPorts(ports)\n              };\n            }))));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\nexport var registerCustomNode = function registerCustomNode() {\n  var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  if (nodes.length) {\n    setProps({\n      registerNode: nodes\n    });\n  }\n\n  var graphConfig = getProps('graphConfig');\n  var registerNode = getProps('registerNode');\n\n  if (!graphConfig || !(registerNode === null || registerNode === void 0 ? void 0 : registerNode.length)) {\n    return;\n  }\n\n  registerNode.forEach(function (item) {\n    var name = item.name,\n        component = item.component;\n    graphConfig.setNodeRender(name, component);\n  });\n};\nexport var setNodeRender = function setNodeRender(config) {\n  registerCustomNode();\n  /** 默认节点，通过 Terminal 标识，避免多次调用*/\n\n  if (!config.nodeRender.get('Terminal')) {\n    NODEPOOL.forEach(function (item) {\n      config.setNodeRender(item.name, NodesComponent[\"\".concat(item.name.replace(/\\s+/g, ''), \"Node\")]);\n    });\n  }\n}; // 创建节点路径\n\nexport var createPath = function createPath(paths) {\n  var offsetX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var offsetY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!paths.length) {\n    return null;\n  }\n\n  var path = ''; // @ts-ignore\n\n  paths.forEach(function (item) {\n    var _item = _slicedToArray(item, 5),\n        c = _item[0],\n        x = _item[1],\n        y = _item[2],\n        c2x = _item[3],\n        c2y = _item[4];\n\n    path += isNumber(y) ? \" \".concat(c, \" \").concat(x + offsetX, \" \").concat(y + offsetY) : \" \".concat(c);\n\n    if (c2y) {\n      path += \" \".concat(c2x + offsetX, \" \").concat(c2y + offsetY);\n    }\n  });\n  return path;\n};","map":null,"metadata":{},"sourceType":"module"}