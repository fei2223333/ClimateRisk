{"ast":null,"code":"\"use strict\";\n/**\n * @fileOverview grid layout\n * @author shiwu.wyy@antfin.com\n * this algorithm refers to <cytoscape.js> - https://github.com/cytoscape/cytoscape.js/\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridLayout = void 0;\n\nvar util_1 = require(\"../util\");\n\nvar base_1 = require(\"./base\");\n/**\n * 网格布局\n */\n\n\nvar GridLayout =\n/** @class */\nfunction (_super) {\n  __extends(GridLayout, _super);\n\n  function GridLayout(options) {\n    var _this = _super.call(this) || this;\n    /** 布局起始点 */\n\n\n    _this.begin = [0, 0];\n    /** prevents node overlap, may overflow boundingBox if not enough space */\n\n    _this.preventOverlap = true;\n    /** extra spacing around nodes when preventOverlap: true */\n\n    _this.preventOverlapPadding = 10;\n    /** uses all available space on false, uses minimal space on true */\n\n    _this.condense = false;\n    /** a sorting function to order the nodes; e.g. function(a, b){ return a.datapublic ('weight') - b.data('weight') } */\n\n    _this.sortBy = \"degree\";\n    _this.nodes = [];\n    _this.edges = [];\n    _this.width = 300;\n    _this.height = 300;\n    _this.row = 0;\n    _this.col = 0;\n    _this.cellWidth = 0;\n    _this.cellHeight = 0;\n    _this.cellUsed = {};\n    _this.id2manPos = {};\n    /** 迭代结束的回调函数 */\n\n    _this.onLayoutEnd = function () {};\n\n    _this.updateCfg(options);\n\n    return _this;\n  }\n\n  GridLayout.prototype.getDefaultCfg = function () {\n    return {\n      begin: [0, 0],\n      preventOverlap: true,\n      preventOverlapPadding: 10,\n      condense: false,\n      rows: undefined,\n      cols: undefined,\n      position: undefined,\n      sortBy: \"degree\",\n      nodeSize: 30\n    };\n  };\n  /**\n   * 执行布局\n   */\n\n\n  GridLayout.prototype.execute = function () {\n    var self = this;\n    var nodes = self.nodes,\n        edges = self.edges,\n        begin = self.begin;\n    var n = nodes.length;\n\n    if (n === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        nodes: nodes,\n        edges: edges\n      };\n    }\n\n    if (n === 1) {\n      nodes[0].x = begin[0];\n      nodes[0].y = begin[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        nodes: nodes,\n        edges: edges\n      };\n    }\n\n    var sortBy = self.sortBy,\n        width = self.width,\n        height = self.height;\n    var condense = self.condense,\n        preventOverlapPadding = self.preventOverlapPadding,\n        preventOverlap = self.preventOverlap,\n        paramNodeSpacing = self.nodeSpacing,\n        paramNodeSize = self.nodeSize;\n    var layoutNodes = [];\n    nodes.forEach(function (node) {\n      layoutNodes.push(node);\n    });\n    var nodeIdxMap = {};\n    layoutNodes.forEach(function (node, i) {\n      nodeIdxMap[node.id] = i;\n    });\n\n    if (sortBy === \"degree\" || !(0, util_1.isString)(sortBy) || layoutNodes[0][sortBy] === undefined) {\n      sortBy = \"degree\";\n\n      if ((0, util_1.isNaN)(nodes[0].degree)) {\n        var values_1 = (0, util_1.getDegree)(layoutNodes.length, nodeIdxMap, edges);\n        layoutNodes.forEach(function (node, i) {\n          node.degree = values_1[i];\n        });\n      }\n    } // sort nodes by value\n\n\n    layoutNodes.sort(function (n1, n2) {\n      return n2[sortBy] - n1[sortBy];\n    });\n\n    if (!width && typeof window !== \"undefined\") {\n      width = window.innerWidth;\n    }\n\n    if (!height && typeof window !== \"undefined\") {\n      height = window.innerHeight;\n    }\n\n    var oRows = self.rows;\n    var oCols = self.cols != null ? self.cols : self.columns;\n    self.cells = n; // if rows or columns were set in self, use those values\n\n    if (oRows != null && oCols != null) {\n      self.rows = oRows;\n      self.cols = oCols;\n    } else if (oRows != null && oCols == null) {\n      self.rows = oRows;\n      self.cols = Math.ceil(self.cells / self.rows);\n    } else if (oRows == null && oCols != null) {\n      self.cols = oCols;\n      self.rows = Math.ceil(self.cells / self.cols);\n    } else {\n      // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n      // width/height * splits^2 = cells where splits is number of times to split width\n      self.splits = Math.sqrt(self.cells * self.height / self.width);\n      self.rows = Math.round(self.splits);\n      self.cols = Math.round(self.width / self.height * self.splits);\n    }\n\n    if (self.cols * self.rows > self.cells) {\n      // otherwise use the automatic values and adjust accordingly\n      // if rounding was up, see if we can reduce rows or columns\n      var sm = self.small();\n      var lg = self.large(); // reducing the small side takes away the most cells, so try it first\n\n      if ((sm - 1) * lg >= self.cells) {\n        self.small(sm - 1);\n      } else if ((lg - 1) * sm >= self.cells) {\n        self.large(lg - 1);\n      }\n    } else {\n      // if rounding was too low, add rows or columns\n      while (self.cols * self.rows < self.cells) {\n        var sm = self.small();\n        var lg = self.large(); // try to add to larger side first (adds less in multiplication)\n\n        if ((lg + 1) * sm >= self.cells) {\n          self.large(lg + 1);\n        } else {\n          self.small(sm + 1);\n        }\n      }\n    }\n\n    self.cellWidth = width / self.cols;\n    self.cellHeight = height / self.rows;\n\n    if (condense) {\n      self.cellWidth = 0;\n      self.cellHeight = 0;\n    }\n\n    if (preventOverlap || paramNodeSpacing) {\n      var nodeSpacing_1 = (0, util_1.getFuncByUnknownType)(10, paramNodeSpacing);\n      var nodeSize_1 = (0, util_1.getFuncByUnknownType)(30, paramNodeSize, false);\n      layoutNodes.forEach(function (node) {\n        if (!node.x || !node.y) {\n          // for bb\n          node.x = 0;\n          node.y = 0;\n        }\n\n        var _a = nodeSize_1(node),\n            _b = _a[0],\n            nodew = _b === void 0 ? 30 : _b,\n            _c = _a[1],\n            nodeh = _c === void 0 ? 30 : _c;\n\n        var p = nodeSpacing_1 !== undefined ? nodeSpacing_1(node) : preventOverlapPadding;\n        var w = nodew + p;\n        var h = nodeh + p;\n        self.cellWidth = Math.max(self.cellWidth, w);\n        self.cellHeight = Math.max(self.cellHeight, h);\n      });\n    }\n\n    self.cellUsed = {}; // e.g. 'c-0-2' => true\n    // to keep track of current cell position\n\n    self.row = 0;\n    self.col = 0; // get a cache of all the manual positions\n\n    self.id2manPos = {};\n\n    for (var i = 0; i < layoutNodes.length; i++) {\n      var node = layoutNodes[i];\n      var rcPos = void 0;\n\n      if (self.position) {\n        rcPos = self.position(node);\n      }\n\n      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n        // must have at least row or col def'd\n        var pos = {\n          row: rcPos.row,\n          col: rcPos.col\n        };\n\n        if (pos.col === undefined) {\n          // find unused col\n          pos.col = 0;\n\n          while (self.used(pos.row, pos.col)) {\n            pos.col++;\n          }\n        } else if (pos.row === undefined) {\n          // find unused row\n          pos.row = 0;\n\n          while (self.used(pos.row, pos.col)) {\n            pos.row++;\n          }\n        }\n\n        self.id2manPos[node.id] = pos;\n        self.use(pos.row, pos.col);\n      }\n\n      self.getPos(node);\n    }\n\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      edges: edges,\n      nodes: layoutNodes\n    };\n  };\n\n  GridLayout.prototype.small = function (val) {\n    var self = this;\n    var res;\n    var rows = self.rows || 5;\n    var cols = self.cols || 5;\n\n    if (val == null) {\n      res = Math.min(rows, cols);\n    } else {\n      var min = Math.min(rows, cols);\n\n      if (min === self.rows) {\n        self.rows = val;\n      } else {\n        self.cols = val;\n      }\n    }\n\n    return res;\n  };\n\n  GridLayout.prototype.large = function (val) {\n    var self = this;\n    var res;\n    var rows = self.rows || 5;\n    var cols = self.cols || 5;\n\n    if (val == null) {\n      res = Math.max(rows, cols);\n    } else {\n      var max = Math.max(rows, cols);\n\n      if (max === self.rows) {\n        self.rows = val;\n      } else {\n        self.cols = val;\n      }\n    }\n\n    return res;\n  };\n\n  GridLayout.prototype.used = function (row, col) {\n    var self = this;\n    return self.cellUsed[\"c-\".concat(row, \"-\").concat(col)] || false;\n  };\n\n  GridLayout.prototype.use = function (row, col) {\n    var self = this;\n    self.cellUsed[\"c-\".concat(row, \"-\").concat(col)] = true;\n  };\n\n  GridLayout.prototype.moveToNextCell = function () {\n    var self = this;\n    var cols = self.cols || 5;\n    self.col++;\n\n    if (self.col >= cols) {\n      self.col = 0;\n      self.row++;\n    }\n  };\n\n  GridLayout.prototype.getPos = function (node) {\n    var self = this;\n    var begin = self.begin,\n        cellWidth = self.cellWidth,\n        cellHeight = self.cellHeight;\n    var x;\n    var y; // see if we have a manual position set\n\n    var rcPos = self.id2manPos[node.id];\n\n    if (rcPos) {\n      x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n      y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n    } else {\n      // otherwise set automatically\n      while (self.used(self.row, self.col)) {\n        self.moveToNextCell();\n      }\n\n      x = self.col * cellWidth + cellWidth / 2 + begin[0];\n      y = self.row * cellHeight + cellHeight / 2 + begin[1];\n      self.use(self.row, self.col);\n      self.moveToNextCell();\n    }\n\n    node.x = x;\n    node.y = y;\n  };\n\n  GridLayout.prototype.getType = function () {\n    return \"grid\";\n  };\n\n  return GridLayout;\n}(base_1.Base);\n\nexports.GridLayout = GridLayout;","map":null,"metadata":{},"sourceType":"script"}