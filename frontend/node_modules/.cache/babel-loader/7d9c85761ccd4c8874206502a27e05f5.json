{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { ModifierKey } from '../types';\nimport { Base } from './base';\nexport var SelectionManager = /*#__PURE__*/function (_Base) {\n  _inherits(SelectionManager, _Base);\n\n  function SelectionManager() {\n    var _this;\n\n    _classCallCheck(this, SelectionManager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectionManager).apply(this, arguments));\n    _this.movedMap = new WeakMap();\n    _this.unselectMap = new WeakMap();\n    return _this;\n  }\n\n  _createClass(SelectionManager, [{\n    key: \"init\",\n    value: function init() {\n      this.widget = this.graph.hook.createSelection();\n      this.startListening();\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      this.graph.on('blank:mousedown', this.onBlankMouseDown, this);\n      this.graph.on('blank:click', this.onBlankClick, this);\n      this.graph.on('cell:mousemove', this.onCellMouseMove, this);\n      this.graph.on('cell:mouseup', this.onCellMouseUp, this);\n      this.widget.on('box:mousedown', this.onBoxMouseDown, this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.graph.off('blank:mousedown', this.onBlankMouseDown, this);\n      this.graph.off('blank:click', this.onBlankClick, this);\n      this.graph.off('cell:mousemove', this.onCellMouseMove, this);\n      this.graph.off('cell:mouseup', this.onCellMouseUp, this);\n      this.widget.off('box:mousedown', this.onBoxMouseDown, this);\n    }\n  }, {\n    key: \"onBlankMouseDown\",\n    value: function onBlankMouseDown(_ref) {\n      var e = _ref.e;\n\n      if (this.allowRubberband(e, true) || this.allowRubberband(e) && !this.graph.scroller.allowPanning(e, true) && !this.graph.panning.allowPanning(e, true)) {\n        this.startRubberband(e);\n      }\n    }\n  }, {\n    key: \"onBlankClick\",\n    value: function onBlankClick() {\n      this.clean();\n    }\n  }, {\n    key: \"allowRubberband\",\n    value: function allowRubberband(e, strict) {\n      return !this.rubberbandDisabled && ModifierKey.isMatch(e, this.widgetOptions.modifiers, strict) && this.graph.hook.allowRubberband(e);\n    }\n  }, {\n    key: \"onCellMouseMove\",\n    value: function onCellMouseMove(_ref2) {\n      var cell = _ref2.cell;\n      this.movedMap.set(cell, true);\n    }\n  }, {\n    key: \"onCellMouseUp\",\n    value: function onCellMouseUp(_ref3) {\n      var e = _ref3.e,\n          cell = _ref3.cell;\n      var options = this.widgetOptions;\n      var disabled = this.disabled;\n\n      if (!disabled && this.movedMap.has(cell)) {\n        disabled = options.selectCellOnMoved === false;\n\n        if (!disabled) {\n          disabled = options.selectNodeOnMoved === false && cell.isNode();\n        }\n\n        if (!disabled) {\n          disabled = options.selectEdgeOnMoved === false && cell.isEdge();\n        }\n      }\n\n      if (!disabled) {\n        if (options.multiple === false || !e.ctrlKey && !e.metaKey) {\n          this.reset(cell);\n        } else if (this.unselectMap.has(cell)) {\n          this.unselectMap.delete(cell);\n        } else if (this.isSelected(cell)) {\n          this.unselect(cell);\n        } else {\n          this.select(cell);\n        }\n      }\n\n      this.movedMap.delete(cell);\n    }\n  }, {\n    key: \"onBoxMouseDown\",\n    value: function onBoxMouseDown(_ref4) {\n      var e = _ref4.e,\n          cell = _ref4.cell;\n\n      if (!this.disabled) {\n        if (this.widgetOptions.multiple !== false && (e.ctrlKey || e.metaKey)) {\n          this.unselect(cell);\n          this.unselectMap.set(cell, true);\n        }\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.length <= 0;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(cell) {\n      return this.widget.isSelected(cell);\n    }\n  }, {\n    key: \"getCells\",\n    value: function getCells(cells) {\n      var _this2 = this;\n\n      return (Array.isArray(cells) ? cells : [cells]).map(function (cell) {\n        return typeof cell === 'string' ? _this2.graph.getCellById(cell) : cell;\n      }).filter(function (cell) {\n        return cell != null;\n      });\n    }\n  }, {\n    key: \"select\",\n    value: function select(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var selected = this.getCells(cells);\n\n      if (selected.length) {\n        if (this.isMultiple()) {\n          this.widget.select(selected, options);\n        } else {\n          this.reset(selected.slice(0, 1), options);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"unselect\",\n    value: function unselect(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.widget.unselect(this.getCells(cells), options);\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(cells) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.widget.reset(cells ? this.getCells(cells) : [], options);\n      return this;\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.widget.clean(options);\n      return this;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this.disabled) {\n        this.widgetOptions.enabled = true;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (!this.disabled) {\n        this.widgetOptions.enabled = false;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"startRubberband\",\n    value: function startRubberband(e) {\n      if (!this.rubberbandDisabled) {\n        this.widget.startSelecting(e);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"enableRubberband\",\n    value: function enableRubberband() {\n      if (this.rubberbandDisabled) {\n        this.widgetOptions.rubberband = true; // if (\n        //   ModifierKey.equals(\n        //     this.graph.options.scroller.modifiers,\n        //     this.graph.options.selecting.modifiers,\n        //   )\n        // ) {\n        //   this.graph.scroller.disablePanning()\n        // }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"disableRubberband\",\n    value: function disableRubberband() {\n      if (!this.rubberbandDisabled) {\n        this.widgetOptions.rubberband = false;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isMultiple\",\n    value: function isMultiple() {\n      return this.widgetOptions.multiple !== false;\n    }\n  }, {\n    key: \"enableMultiple\",\n    value: function enableMultiple() {\n      this.widgetOptions.multiple = true;\n      return this;\n    }\n  }, {\n    key: \"disableMultiple\",\n    value: function disableMultiple() {\n      this.widgetOptions.multiple = false;\n      return this;\n    }\n  }, {\n    key: \"setModifiers\",\n    value: function setModifiers(modifiers) {\n      this.widgetOptions.modifiers = modifiers;\n      return this;\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      this.widget.setContent(content);\n      return this;\n    }\n  }, {\n    key: \"setFilter\",\n    value: function setFilter(filter) {\n      this.widget.setFilter(filter);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.stopListening();\n      this.widget.dispose();\n    }\n  }, {\n    key: \"widgetOptions\",\n    get: function get() {\n      return this.options.selecting;\n    }\n  }, {\n    key: \"rubberbandDisabled\",\n    get: function get() {\n      return this.widgetOptions.enabled !== true || this.widgetOptions.rubberband !== true;\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.widgetOptions.enabled !== true;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.widget.length;\n    }\n  }, {\n    key: \"cells\",\n    get: function get() {\n      return this.widget.cells;\n    }\n  }]);\n\n  return SelectionManager;\n}(Base);\n\n__decorate([Base.dispose()], SelectionManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}