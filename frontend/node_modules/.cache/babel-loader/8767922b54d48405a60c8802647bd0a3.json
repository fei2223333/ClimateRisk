{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n// represents a body(a point mass) and its position\nvar Body = /*#__PURE__*/function () {\n  function Body(params) {\n    _classCallCheck(this, Body);\n\n    /**\n     * the id of this body, the same with the node id\n     * @type  {number}\n     */\n    this.id = params.id || 0;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n\n    this.rx = params.rx;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n\n    this.ry = params.ry;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n\n    this.fx = 0;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n\n    this.fy = 0;\n    /**\n     * the mass of this body, =1 for a node\n     * @type  {number}\n     */\n\n    this.mass = params.mass;\n    /**\n     * the degree of the node represented by this body\n     * @type  {number}\n     */\n\n    this.degree = params.degree;\n    /**\n     * the parameter for repulsive force, = kr\n     * @type  {number}\n     */\n\n    this.g = params.g || 0;\n  } // returns the euclidean distance\n\n\n  _createClass(Body, [{\n    key: \"distanceTo\",\n    value: function distanceTo(bo) {\n      var dx = this.rx - bo.rx;\n      var dy = this.ry - bo.ry;\n      return Math.hypot(dx, dy);\n    }\n  }, {\n    key: \"setPos\",\n    value: function setPos(x, y) {\n      this.rx = x;\n      this.ry = y;\n    } // resets the forces\n\n  }, {\n    key: \"resetForce\",\n    value: function resetForce() {\n      this.fx = 0;\n      this.fy = 0;\n    }\n  }, {\n    key: \"addForce\",\n    value: function addForce(b) {\n      var dx = b.rx - this.rx;\n      var dy = b.ry - this.ry;\n      var dist = Math.hypot(dx, dy);\n      dist = dist < 0.0001 ? 0.0001 : dist; // the repulsive defined by force atlas 2\n\n      var F = this.g * (this.degree + 1) * (b.degree + 1) / dist;\n      this.fx += F * dx / dist;\n      this.fy += F * dy / dist;\n    } // if quad contains this body\n\n  }, {\n    key: \"in\",\n    value: function _in(quad) {\n      return quad.contains(this.rx, this.ry);\n    } // returns a new body\n\n  }, {\n    key: \"add\",\n    value: function add(bo) {\n      var nenwMass = this.mass + bo.mass;\n      var x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n      var y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n      var dg = this.degree + bo.degree;\n      var params = {\n        rx: x,\n        ry: y,\n        mass: nenwMass,\n        degree: dg\n      };\n      return new Body(params);\n    }\n  }]);\n\n  return Body;\n}();\n\nexport { Body as default };","map":null,"metadata":{},"sourceType":"module"}