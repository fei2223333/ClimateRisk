{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { getMask } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { polygonTriangulation } from '../../core/triangulation';\nvar water_frag = \"\\nuniform sampler2D u_texture;\\nuniform float u_time;\\nuniform float u_speed: 1.0;\\nuniform float u_opacity: 1.0;\\n\\nvarying vec4 v_Color;\\nvarying vec2 v_uv;\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\n#pragma include \\\"picking\\\"\\n\\n  float rand(vec2 n) { return 0.5 + 0.5 * fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453); }\\n\\n  float water(vec3 p) {\\n    float t = u_time * u_speed;\\n    p.z += t * 2.; p.x += t * 2.;\\n    vec3 c1 = texture2D(u_texture, p.xz / 30.).xyz;\\n    p.z += t * 3.; p.x += t * 0.52;\\n    vec3 c2 = texture2D(u_texture, p.xz / 30.).xyz;\\n    p.z += t * 4.; p.x += t * 0.8;\\n    vec3 c3 = texture2D(u_texture, p.xz / 30.).xyz;\\n    c1 += c2 - c3;\\n    float z = (c1.x + c1.y + c1.z) / 3.;\\n    return p.y + z / 4.;\\n  }\\n\\n  float map(vec3 p) {\\n    float d = 100.0;\\n    d = water(p);\\n    return d;\\n  }\\n\\n  float intersect(vec3 ro, vec3 rd) {\\n    float d = 0.0;\\n    for (int i = 0; i <= 100; i++) {\\n      float h = map(ro + rd * d);\\n      if (h < 0.1) return  d;\\n      d += h;\\n    }\\n    return 0.0;\\n  }\\n  \\n  vec3 norm(vec3 p) {\\n    float eps = .1;\\n    return normalize(vec3(\\n      map(p + vec3(eps, 0, 0)) - map(p + vec3(-eps, 0, 0)),\\n      map(p + vec3(0, eps, 0)) - map(p + vec3(0, -eps, 0)),\\n      map(p + vec3(0, 0, eps)) - map(p + vec3(0, 0, -eps))\\n    ));\\n  } \\n\\n  float calSpc() {\\n    vec3 l1 = normalize(vec3(1, 1, 1));\\n    vec3 ro = vec3(-3, 20, -8);\\n    vec3 rc = vec3(0, 0, 0);\\n    vec3 ww = normalize(rc - ro);\\n    vec3 uu = normalize(cross(vec3(0,1,0), ww));\\n    vec3 vv = normalize(cross(rc - ro, uu));\\n    vec3 rd = normalize(uu * v_uv.x + vv * v_uv.y + ww);\\n    float d = intersect(ro, rd);\\n    vec3 p = ro + rd * d;\\n    vec3 n = norm(p);\\n    float spc = pow(max(0.0, dot(reflect(l1, n), rd)), 30.0);\\n    return spc;\\n  }\\n\\nvoid main() {\\n  float opacity = styleMappingMat[0][0];\\n  gl_FragColor = v_Color;\\n  gl_FragColor.a *= opacity;\\n\\n  float spc = calSpc();\\n  gl_FragColor += spc * 0.4;\\n}\\n\";\nvar water_vert = \"attribute vec4 a_Color;\\nattribute vec2 a_uv;\\nattribute vec3 a_Position;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\n\\nvarying vec4 v_Color;\\nvarying vec2 v_uv;\\nuniform float u_opacity: 1.0;\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  v_uv = a_uv;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\nstyleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  v_Color = a_Color;\\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  }\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\\n\";\n\nvar WaterModel = function (_BaseModel) {\n  _inherits(WaterModel, _BaseModel);\n\n  var _super = _createSuper(WaterModel);\n\n  function WaterModel() {\n    var _this;\n\n    _classCallCheck(this, WaterModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    return _this;\n  }\n\n  _createClass(WaterModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n          _ref$speed = _ref.speed,\n          speed = _ref$speed === void 0 ? 0.5 : _ref$speed;\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_texture: this.texture,\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_speed: speed,\n        u_opacity: _isNumber(opacity) ? opacity : 1.0\n      };\n    }\n  }, {\n    key: \"getAnimateUniforms\",\n    value: function getAnimateUniforms() {\n      return {\n        u_time: this.layer.getLayerAnimateTime()\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.loadTexture();\n      return this.buildModels();\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      var _ref2 = this.layer.getLayerConfig(),\n          _ref2$mask = _ref2.mask,\n          mask = _ref2$mask === void 0 ? false : _ref2$mask,\n          _ref2$maskInside = _ref2.maskInside,\n          maskInside = _ref2$maskInside === void 0 ? true : _ref2$maskInside;\n\n      return [this.layer.buildLayerModel({\n        moduleName: 'polygon_water',\n        vertexShader: water_vert,\n        fragmentShader: water_frag,\n        triangulation: polygonTriangulation,\n        depth: {\n          enable: false\n        },\n        stencil: getMask(mask, maskInside)\n      })];\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      this.texture.destroy();\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var bbox = this.layer.getSource().extent;\n\n      var _bbox = _slicedToArray(bbox, 4),\n          minLng = _bbox[0],\n          minLat = _bbox[1],\n          maxLng = _bbox[2],\n          maxLat = _bbox[3];\n\n      var lngLen = maxLng - minLng;\n      var latLen = maxLat - minLat;\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'linear',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_uv',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            var _vertex = _slicedToArray(vertex, 2),\n                lng = _vertex[0],\n                lat = _vertex[1];\n\n            return [(lng - minLng) / lngLen, (lat - minLat) / latLen];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture() {\n      var _this2 = this;\n\n      var _ref3 = this.layer.getLayerConfig(),\n          waterTexture = _ref3.waterTexture;\n\n      var createTexture2D = this.rendererService.createTexture2D;\n      this.texture = createTexture2D({\n        height: 0,\n        width: 0\n      });\n      var image = new Image();\n      image.crossOrigin = '';\n\n      if (waterTexture) {\n        console.warn('L7 recommend：https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ');\n        image.src = waterTexture;\n      } else {\n        image.src = 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ';\n      }\n\n      image.onload = function () {\n        _this2.texture = createTexture2D({\n          data: image,\n          width: image.width,\n          height: image.height,\n          wrapS: gl.MIRRORED_REPEAT,\n          wrapT: gl.MIRRORED_REPEAT,\n          min: gl.LINEAR,\n          mag: gl.LINEAR\n        });\n\n        _this2.layerService.updateLayerRenderList();\n\n        _this2.layerService.renderLayers();\n      };\n    }\n  }]);\n\n  return WaterModel;\n}(BaseModel);\n\nexport { WaterModel as default };","map":null,"metadata":{},"sourceType":"module"}