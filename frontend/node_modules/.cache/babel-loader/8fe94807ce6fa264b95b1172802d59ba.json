{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport clamp from 'clamp';\nimport classNames from 'classnames';\nimport keys from 'rc-util/lib/KeyCode';\nimport { WheelHandler } from '../util/dom/WheelHandler';\nimport { MouseMoveTracker } from '../util/dom/MouseMoveTracker';\nexport var Scrollbar = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Scrollbar, _React$PureComponent);\n\n  function Scrollbar() {\n    var _this;\n\n    _classCallCheck(this, Scrollbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scrollbar).apply(this, arguments));\n\n    _this.triggerCallback = function (nextPosition) {\n      var max = _this.props.contentSize - _this.props.containerSize;\n      var position = clamp(nextPosition, 0, max);\n\n      if (position !== _this.props.scrollPosition) {\n        _this.props.onScroll(position);\n      }\n    };\n\n    _this.onWheel = function (delta) {\n      _this.triggerCallback(_this.props.scrollPosition + delta);\n    };\n\n    _this.onWheelX = function (deltaX, deltaY) {\n      if (Math.abs(deltaX) >= Math.abs(deltaY)) {\n        _this.onWheel(deltaX);\n      }\n    };\n\n    _this.onWheelY = function (deltaX, deltaY) {\n      if (Math.abs(deltaX) <= Math.abs(deltaY)) {\n        _this.onWheel(deltaY);\n      }\n    };\n\n    _this.onKeyDown = function (e) {\n      var keyCode = e.keyCode; // let focus move off the scrollbar\n\n      if (keyCode === keys.TAB) {\n        return;\n      }\n\n      var _this$props = _this.props,\n          contentSize = _this$props.contentSize,\n          containerSize = _this$props.containerSize;\n      var distance = _this.props.keyboardScrollAmount;\n      var direction = 0;\n\n      if (_this.isHorizontal()) {\n        switch (keyCode) {\n          case keys.HOME:\n            direction = -1;\n            distance = contentSize;\n            break;\n\n          case keys.LEFT:\n            direction = -1;\n            break;\n\n          case keys.RIGHT:\n            direction = 1;\n            break;\n\n          default:\n            return;\n        }\n      } else {\n        switch (keyCode) {\n          case keys.SPACE:\n            if (e.shiftKey) {\n              direction = -1;\n            } else {\n              direction = 1;\n            }\n\n            break;\n\n          case keys.HOME:\n            direction = -1;\n            distance = contentSize;\n            break;\n\n          case keys.UP:\n            direction = -1;\n            break;\n\n          case keys.DOWN:\n            direction = 1;\n            break;\n\n          case keys.PAGE_UP:\n            direction = -1;\n            distance = containerSize;\n            break;\n\n          case keys.PAGE_DOWN:\n            direction = 1;\n            distance = containerSize;\n            break;\n\n          default:\n            return;\n        }\n      }\n\n      e.preventDefault();\n\n      _this.triggerCallback(_this.props.scrollPosition + distance * direction);\n    };\n\n    _this.onMouseDown = function (e) {\n      if (e.target !== _this.thumbElem) {\n        var nativeEvent = e.nativeEvent;\n        var position = _this.isHorizontal() ? nativeEvent.offsetX || nativeEvent.layerX : nativeEvent.offsetY || nativeEvent.layerY; // mousedown on the scroll-track directly, move the\n        // center of the scroll-face to the mouse position.\n\n        _this.triggerCallback((position - _this.thumbSize * 0.5) / _this.scale);\n      } else {\n        _this.mouseMoveTracker.capture(e);\n      }\n\n      if (_this.props.stopPropagation) {\n        e.stopPropagation();\n      } // focus the container so it may receive keyboard events\n\n\n      _this.containerElem.focus();\n    };\n\n    _this.onMouseMove = function (deltaX, deltaY) {\n      var delta = _this.isHorizontal() ? deltaX : deltaY;\n\n      if (delta !== 0) {\n        delta /= _this.scale;\n\n        _this.triggerCallback(_this.props.scrollPosition + delta);\n      }\n    };\n\n    _this.onMouseMoveEnd = function () {\n      _this.mouseMoveTracker.release();\n    };\n\n    _this.refContainer = function (container) {\n      _this.containerElem = container;\n    };\n\n    _this.refThumb = function (thumb) {\n      _this.thumbElem = thumb;\n    };\n\n    return _this;\n  }\n\n  _createClass(Scrollbar, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.wheelHandler = new WheelHandler({\n        onWheel: this.isHorizontal() ? this.onWheelX : this.onWheelY,\n        shouldHandleScrollX: true,\n        shouldHandleScrollY: true,\n        stopPropagation: this.props.stopPropagation\n      });\n      this.mouseMoveTracker = new MouseMoveTracker({\n        elem: document.documentElement,\n        onMouseMove: this.onMouseMove,\n        onMouseMoveEnd: this.onMouseMoveEnd\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mouseMoveTracker.release();\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return this.props.orientation === 'horizontal';\n    }\n  }, {\n    key: \"fixPosition\",\n    value: function fixPosition(position) {\n      var max = this.props.contentSize - this.props.containerSize;\n      return clamp(position, 0, max);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props2 = this.props,\n          prefixCls = _this$props2.prefixCls,\n          className = _this$props2.className,\n          scrollPosition = _this$props2.scrollPosition,\n          containerSize = _this$props2.containerSize,\n          contentSize = _this$props2.contentSize,\n          miniThumbSize = _this$props2.miniThumbSize,\n          zIndex = _this$props2.zIndex,\n          scrollbarSize = _this$props2.scrollbarSize; // unscrollable\n\n      if (containerSize < 1 || contentSize <= containerSize) {\n        return null;\n      }\n\n      var scale = containerSize / contentSize;\n      var thumbSize = containerSize * scale;\n\n      if (thumbSize < miniThumbSize) {\n        scale = (containerSize - miniThumbSize) / (contentSize - containerSize);\n        thumbSize = miniThumbSize;\n      } // cache\n\n\n      this.scale = scale;\n      this.thumbSize = thumbSize;\n      var trackStyle;\n      var thumbStyle;\n      var horizontal = this.isHorizontal();\n\n      if (horizontal) {\n        trackStyle = {\n          width: containerSize,\n          height: scrollbarSize\n        };\n        thumbStyle = {\n          width: thumbSize,\n          transform: \"translate(\".concat(scrollPosition * scale, \"px, 0)\")\n        };\n      } else {\n        trackStyle = {\n          width: scrollbarSize,\n          height: containerSize\n        };\n        thumbStyle = {\n          height: thumbSize,\n          transform: \"translate(0, \".concat(scrollPosition * scale, \"px)\")\n        };\n      }\n\n      if (zIndex) {\n        trackStyle.zIndex = zIndex;\n      }\n\n      var baseCls = \"\".concat(prefixCls, \"-scrollbar\");\n      return React.createElement(\"div\", {\n        role: \"button\",\n        className: classNames(baseCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(baseCls, \"-vertical\"), !horizontal), _defineProperty(_classNames, \"\".concat(baseCls, \"-horizontal\"), horizontal), _classNames), className),\n        style: trackStyle,\n        tabIndex: 0,\n        ref: this.refContainer,\n        onKeyDown: this.onKeyDown,\n        onMouseDown: this.onMouseDown,\n        onWheel: this.wheelHandler.onWheel\n      }, React.createElement(\"div\", {\n        ref: this.refThumb,\n        style: thumbStyle,\n        className: \"\".concat(baseCls, \"-thumb\")\n      }));\n    }\n  }]);\n\n  return Scrollbar;\n}(React.PureComponent);\n\n(function (Scrollbar) {\n  Scrollbar.defaultProps = {\n    prefixCls: 'x6',\n    orientation: 'vertical',\n    contentSize: 0,\n    containerSize: 0,\n    defaultPosition: 0,\n    scrollbarSize: 4,\n    miniThumbSize: 16,\n    keyboardScrollAmount: 40\n  };\n})(Scrollbar || (Scrollbar = {}));","map":null,"metadata":{},"sourceType":"module"}