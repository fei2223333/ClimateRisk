{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { HookHub } from '@antv/xflow-hook';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelNode;\n\n(function (NsDelNode) {\n  /** Command: 用于注册named factory */\n  NsDelNode.command = XFlowNodeCommands.DEL_NODE;\n  /** hook name */\n\n  NsDelNode.hookKey = 'delNode';\n  /** 创建 hook */\n\n  NsDelNode.createHook = function () {\n    return new HookHub();\n  };\n})(NsDelNode || (NsDelNode = {}));\n\nvar DelNodeCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function DelNodeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, DelNodeCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context3.next = 5;\n                return hooks.delNode.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this3 = this;\n\n                    var commandService, deleteNodeService, options, graph, canDel, nodeId, nodeCell, edges, nodeConfig;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            commandService = handlerArgs.commandService, deleteNodeService = handlerArgs.deleteNodeService, options = handlerArgs.options;\n                            _context2.next = 3;\n                            return ctx.getX6Graph();\n\n                          case 3:\n                            graph = _context2.sent;\n\n                            if (!deleteNodeService) {\n                              _context2.next = 10;\n                              break;\n                            }\n\n                            _context2.next = 7;\n                            return deleteNodeService(handlerArgs);\n\n                          case 7:\n                            canDel = _context2.sent;\n\n                            if (canDel) {\n                              _context2.next = 10;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              err: ' service rejected'\n                            });\n\n                          case 10:\n                            nodeId = (handlerArgs.x6Node || handlerArgs.nodeConfig).id;\n                            nodeCell = graph.getCellById(nodeId);\n\n                            if (!(nodeCell && nodeCell.isNode())) {\n                              _context2.next = 20;\n                              break;\n                            }\n\n                            /** 先清理连线 */\n                            edges = [].concat(_toConsumableArray(graph.getIncomingEdges(nodeCell) || []), _toConsumableArray(graph.getOutgoingEdges(nodeCell) || []));\n                            _context2.next = 16;\n                            return Promise.all(edges.map(function (edge) {\n                              return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n                                x6Edge: edge\n                              });\n                            }));\n\n                          case 16:\n                            /** 再清理节点 */\n                            nodeConfig = nodeCell.getData();\n                            nodeCell.remove(Object.assign(Object.assign({}, options), {\n                              isCommand: true\n                            }));\n                            /** add undo: delete node */\n\n                            /** add undo: delete node */\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        _context.next = 2;\n                                        return commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                                          nodeConfig: nodeConfig\n                                        });\n\n                                      case 2:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n                            }));\n                            return _context2.abrupt(\"return\", {\n                              err: null,\n                              nodeConfig: nodeConfig\n                            });\n\n                          case 20:\n                            return _context2.abrupt(\"return\", {\n                              err: 'node is not exist'\n                            });\n\n                          case 21:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n                }, runtimeHook);\n\n              case 5:\n                result = _context3.sent;\n                ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  ctx = this.contextProvider();\n                  ctx.undo();\n                }\n\n                return _context4.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(DelNodeCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return DelNodeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelNodeCommand.prototype, \"contextProvider\", void 0);\n\nDelNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelNode.command.id\n  }\n})\n/** 创建节点命令 */\n], DelNodeCommand);\nexport { DelNodeCommand };","map":null,"metadata":{},"sourceType":"module"}