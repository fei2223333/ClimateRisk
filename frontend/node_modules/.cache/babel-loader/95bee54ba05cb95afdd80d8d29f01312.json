{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Tooltip } from 'antd';\nimport 'antd/es/tooltip/style/index.css';\nimport { Menu } from '../menu';\nimport { Dropdown } from '../dropdown';\nimport { ToolbarContext } from './context';\n\nvar ToolbarItemInner = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ToolbarItemInner, _React$PureComponent);\n\n  function ToolbarItemInner() {\n    var _this;\n\n    _classCallCheck(this, ToolbarItemInner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToolbarItemInner).apply(this, arguments));\n\n    _this.handleClick = function () {\n      _this.processClick();\n    };\n\n    _this.handleDropdownItemClick = function (name) {\n      _this.processClick(name, false);\n    };\n\n    return _this;\n  }\n\n  _createClass(ToolbarItemInner, [{\n    key: \"processClick\",\n    value: function processClick() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.name;\n      var dropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.dropdown;\n\n      if (!this.props.disabled && !dropdown) {\n        if (name) {\n          this.props.context.onClick(name);\n        }\n\n        if (this.props.onClick) {\n          this.props.onClick(name);\n        }\n      }\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton() {\n      var _classNames;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          hidden = _this$props.hidden,\n          disabled = _this$props.disabled,\n          active = _this$props.active,\n          icon = _this$props.icon,\n          text = _this$props.text,\n          dropdown = _this$props.dropdown,\n          dropdownArrow = _this$props.dropdownArrow,\n          tooltip = _this$props.tooltip,\n          tooltipProps = _this$props.tooltipProps,\n          tooltipAsTitle = _this$props.tooltipAsTitle,\n          children = _this$props.children;\n      var prefixCls = this.props.context.prefixCls;\n      var baseCls = \"\".concat(prefixCls, \"-item\");\n      var props = {\n        onClick: this.handleClick,\n        className: classNames(baseCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(baseCls, \"-hidden\"), hidden), _defineProperty(_classNames, \"\".concat(baseCls, \"-active\"), active), _defineProperty(_classNames, \"\".concat(baseCls, \"-disabled\"), disabled), _defineProperty(_classNames, \"\".concat(baseCls, \"-dropdown\"), dropdown), _classNames), className)\n      };\n\n      if (tooltip && tooltipAsTitle) {\n        props.title = tooltip;\n      }\n\n      var button = React.createElement(\"button\", Object.assign({\n        type: \"button\"\n      }, props), icon && React.isValidElement(icon) && React.createElement(\"span\", {\n        className: \"\".concat(baseCls, \"-icon\")\n      }, icon), (text || children) && React.createElement(\"span\", {\n        className: \"\".concat(baseCls, \"-text\")\n      }, text || children), dropdown && dropdownArrow && React.createElement(\"span\", {\n        className: \"\".concat(baseCls, \"-dropdown-arrow\")\n      }));\n\n      if (tooltip && !tooltipAsTitle && !disabled) {\n        return React.createElement(Tooltip, Object.assign({\n          title: tooltip,\n          placement: \"bottom\",\n          mouseEnterDelay: 0,\n          mouseLeaveDelay: 0\n        }, tooltipProps), button);\n      }\n\n      return button;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          dropdown = _this$props2.dropdown,\n          dropdownProps = _this$props2.dropdownProps,\n          disabled = _this$props2.disabled;\n      var content = this.renderButton();\n\n      if (dropdown != null && !disabled) {\n        var overlay = React.createElement(\"div\", null, dropdown.type === Menu ? React.cloneElement(dropdown, {\n          onClick: this.handleDropdownItemClick\n        }) : dropdown);\n        var props = Object.assign(Object.assign({\n          trigger: ['click']\n        }, dropdownProps), {\n          disabled: disabled,\n          overlay: overlay\n        });\n        return React.createElement(Dropdown, Object.assign({}, props), content);\n      }\n\n      return content;\n    }\n  }]);\n\n  return ToolbarItemInner;\n}(React.PureComponent);\n\nexport var ToolbarItem = function ToolbarItem(props) {\n  return React.createElement(ToolbarContext.Consumer, null, function (context) {\n    return React.createElement(ToolbarItemInner, Object.assign({\n      context: context\n    }, props));\n  });\n};\nToolbarItem.defaultProps = {\n  dropdownArrow: true\n};","map":null,"metadata":{},"sourceType":"module"}