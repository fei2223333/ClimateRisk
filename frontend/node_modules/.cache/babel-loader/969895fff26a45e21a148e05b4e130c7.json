{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport { XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { get } from 'lodash';\nimport { onConfigChange, getGraphInstance } from './util';\n/** 节点移动时，实时更新位置信息，内置之后可去掉 */\n\nexport var movedNode = function movedNode(e, cmds) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var node, data, x6Graph, nodeConfig;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            node = e.node;\n\n            if (node) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            data = node.data; // 更新组内元素，边信息无需更新\n\n            if (data === null || data === void 0 ? void 0 : data.groupChildren) {\n              x6Graph = getGraphInstance();\n              data === null || data === void 0 ? void 0 : data.groupChildren.forEach(function (id) {\n                return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var _a, _b, currentNode;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          currentNode = x6Graph.getCellById(id);\n\n                          if (!(currentNode && currentNode.isNode())) {\n                            _context.next = 4;\n                            break;\n                          }\n\n                          _context.next = 4;\n                          return cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                            nodeConfig: Object.assign(Object.assign(Object.assign({}, currentNode.data), (_a = currentNode.getSize) === null || _a === void 0 ? void 0 : _a.call(currentNode)), (_b = currentNode.getPosition) === null || _b === void 0 ? void 0 : _b.call(currentNode))\n                          });\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n              });\n            }\n\n            nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.getSize());\n            _context2.next = 8;\n            return cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n              nodeConfig: nodeConfig\n            });\n\n          case 8:\n            onConfigChange({\n              type: 'move:node',\n              config: nodeConfig\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n};\n/** 修改节点大小 */\n\nexport var resizeNode = function resizeNode(e, cmds) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var node, nodeConfig;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            node = e.node;\n\n            if (node) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 3:\n            nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.size());\n            _context3.next = 6;\n            return cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n              nodeConfig: nodeConfig\n            });\n\n          case 6:\n            onConfigChange({\n              type: 'resize:node',\n              config: nodeConfig\n            });\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n};\n\nvar getContainer = function getContainer(e) {\n  var _a;\n\n  var currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;\n\n  if (!currentNode) {\n    return document.getElementsByClassName('xflow-canvas-root');\n  }\n\n  var containter = null;\n\n  while (!containter) {\n    var current = currentNode.getElementsByClassName('xflow-canvas-root');\n\n    if ((current === null || current === void 0 ? void 0 : current.length) > 0) {\n      containter = current;\n    }\n\n    currentNode = currentNode.parentNode;\n  }\n\n  return containter;\n};\n/** 设置 ports visible */\n\n\nexport var changePortsVisible = function changePortsVisible(visible, e) {\n  var containers = getContainer(e);\n  Array.from(containers).forEach(function (container) {\n    var _a, _b;\n\n    var ports = container.querySelectorAll('.x6-port-body');\n    var graph = getGraphInstance(); // 选中中节点时不展示链接桩\n\n    var isSelectedNode = (_b = (_a = graph.getSelectedCells()) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.isNode();\n\n    for (var i = 0, len = ports.length; i < len; i = i + 1) {\n      ports[i].style.visibility = !isSelectedNode && visible ? 'visible' : 'hidden';\n    }\n  });\n};\n/** 添加辅助工具 */\n\nexport var addTools = function addTools(e) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var edge;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            edge = e.edge;\n\n            if (edge) {\n              _context4.next = 3;\n              break;\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 3:\n            edge.addTools('vertices', 'ondbclick');\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n};\n/** 移除辅助工具 */\n\nexport var removeTools = function removeTools(e, cmds) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var edge;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            edge = e.edge;\n\n            if (edge) {\n              _context5.next = 3;\n              break;\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 3:\n            if (edge.hasTools('ondbclick')) {\n              cmds.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n                edgeConfig: Object.assign(Object.assign({}, get(edge, 'data')), {\n                  vertices: edge.getVertices()\n                })\n              });\n              edge.removeTools();\n            }\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}