{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGroupCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsCollapseGroup;\n\n(function (NsCollapseGroup) {\n  NsCollapseGroup.command = XFlowGroupCommands.COLLAPSE_GROUP;\n  NsCollapseGroup.hookKey = 'collapseGroup';\n})(NsCollapseGroup || (NsCollapseGroup = {}));\n\nvar CollapseGroupCommand =\n/*#__PURE__*/\n\n/** 添加子节点命令 */\nfunction () {\n  function CollapseGroupCommand() {\n    var _this = this;\n\n    _classCallCheck(this, CollapseGroupCommand);\n\n    this.toggleVisible = function (cells, visible, graph) {\n      cells.forEach(function (cell) {\n        var view = graph.findViewByCell(cell).container;\n        view.style.visibility = visible ? 'visible' : 'hidden';\n      });\n    };\n\n    this.toggleCollapse = function (groupNode, graph, args) {\n      var childrens = groupNode.getChildren().filter(function (n) {\n        return n.isNode();\n      });\n      var groupData = groupNode.getData();\n      var isCollapsed = args.isCollapsed,\n          _args$gap = args.gap,\n          gap = _args$gap === void 0 ? 0 : _args$gap;\n\n      if (isCollapsed) {\n        var collapsedSize = args.collapsedSize || groupData.groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n        groupNode.prop('previousSize', groupNode.size());\n        groupNode.size(collapsedSize);\n      } else {\n        groupNode.size(groupNode.prop('previousSize'));\n      }\n\n      if (childrens) {\n        childrens.forEach(function (item) {\n          var position = groupNode.position();\n          var innerEdges = graph.getConnectedEdges(item).filter(function (edge) {\n            var sourceNode = edge.getSourceNode();\n            var targetNode = edge.getTargetNode();\n            return childrens.includes(sourceNode) && childrens.includes(targetNode);\n          });\n\n          if (isCollapsed) {\n            _this.toggleVisible([item].concat(_toConsumableArray(innerEdges)), false, graph);\n\n            item.prop('previousSize', item.size());\n            item.prop('previousRelativePosition', item.position({\n              relative: true\n            }));\n            item.position(position.x + gap, position.y + gap);\n            var size = groupNode.size();\n            item.size({\n              width: size.width - gap * 2,\n              height: size.height - gap * 2\n            });\n          } else {\n            _this.toggleVisible([item].concat(_toConsumableArray(innerEdges)), true, graph);\n\n            var pos = item.prop('previousRelativePosition');\n\n            var _size = item.prop('previousSize');\n\n            item.position(pos.x, pos.y, {\n              relative: true\n            });\n            item.size(_size);\n          }\n        });\n      }\n\n      groupNode.prop('isCollapsed', isCollapsed);\n      groupNode.setData(Object.assign(Object.assign({}, groupNode.getData()), {\n        isCollapsed: isCollapsed\n      }));\n    };\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context3.next = 4;\n                return hooks.collapseGroup.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this3 = this;\n\n                    var x6Graph, node, toggleService, canToggle;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return this.ctx.getX6Graph();\n\n                          case 2:\n                            x6Graph = _context2.sent;\n                            node = x6Graph.getCellById(args.nodeId);\n                            toggleService = handlerArgs.toggleService;\n\n                            if (!toggleService) {\n                              _context2.next = 11;\n                              break;\n                            }\n\n                            _context2.next = 8;\n                            return toggleService(handlerArgs);\n\n                          case 8:\n                            canToggle = _context2.sent;\n\n                            if (canToggle) {\n                              _context2.next = 11;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              err: 'service rejected'\n                            });\n\n                          case 11:\n                            if (node) {\n                              this.toggleCollapse(node, x6Graph, args);\n                              this.ctx.addUndo(Disposable.create(function () {\n                                return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                    while (1) {\n                                      switch (_context.prev = _context.next) {\n                                        case 0:\n                                          if (node) {\n                                            this.toggleCollapse(node, x6Graph, Object.assign(args, {\n                                              isCollapsed: !args.isCollapsed\n                                            }));\n                                          }\n\n                                        case 1:\n                                        case \"end\":\n                                          return _context.stop();\n                                      }\n                                    }\n                                  }, _callee, this);\n                                }));\n                              }));\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              err: null\n                            });\n\n                          case 13:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context3.sent;\n                this.ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.ctx.undo();\n                return _context4.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.ctx.isUndoable) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(CollapseGroupCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n  }]);\n\n  return CollapseGroupCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], CollapseGroupCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], CollapseGroupCommand.prototype, \"init\", null);\n\nCollapseGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsCollapseGroup.command.id\n  }\n})\n/** 添加子节点命令 */\n], CollapseGroupCommand);\nexport { CollapseGroupCommand };","map":null,"metadata":{},"sourceType":"module"}