{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable no-underscore-dangle */\nexport var Disposable = /*#__PURE__*/function () {\n  function Disposable() {\n    _classCallCheck(this, Disposable);\n  }\n\n  _createClass(Disposable, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._disposed = true;\n    }\n  }, {\n    key: \"disposed\",\n    get: function get() {\n      return this._disposed === true;\n    }\n  }]);\n\n  return Disposable;\n}();\n\n(function (Disposable) {\n  function dispose() {\n    return function (target, methodName, descriptor) {\n      var raw = descriptor.value;\n      var proto = target.__proto__; // eslint-disable-line\n\n      descriptor.value = function () {\n        if (this.disposed) {\n          return;\n        }\n\n        raw.call(this);\n        proto.dispose.call(this);\n      };\n    };\n  }\n\n  Disposable.dispose = dispose;\n})(Disposable || (Disposable = {}));\n/**\n * A disposable object which delegates to a callback function.\n */\n\n\nexport var DisposableDelegate = /*#__PURE__*/function () {\n  /**\n   * Construct a new disposable delegate.\n   *\n   * @param callback - The callback function to invoke on dispose.\n   */\n  function DisposableDelegate(callback) {\n    _classCallCheck(this, DisposableDelegate);\n\n    this.callback = callback;\n  }\n  /**\n   * Test whether the delegate has been disposed.\n   */\n\n\n  _createClass(DisposableDelegate, [{\n    key: \"dispose\",\n\n    /**\n     * Dispose of the delegate and invoke the callback function.\n     */\n    value: function dispose() {\n      if (!this.callback) {\n        return;\n      }\n\n      var callback = this.callback;\n      this.callback = null;\n      callback();\n    }\n  }, {\n    key: \"disposed\",\n    get: function get() {\n      return !this.callback;\n    }\n  }]);\n\n  return DisposableDelegate;\n}();\n/**\n * An object which manages a collection of disposable items.\n */\n\nexport var DisposableSet = /*#__PURE__*/function () {\n  function DisposableSet() {\n    _classCallCheck(this, DisposableSet);\n\n    this.isDisposed = false; // eslint-disable-line:variable-name\n\n    this.items = new Set();\n  }\n  /**\n   * Test whether the set has been disposed.\n   */\n\n\n  _createClass(DisposableSet, [{\n    key: \"dispose\",\n\n    /**\n     * Dispose of the set and the items it contains.\n     *\n     * #### Notes\n     * Items are disposed in the order they are added to the set.\n     */\n    value: function dispose() {\n      if (this.isDisposed) {\n        return;\n      }\n\n      this.isDisposed = true;\n      this.items.forEach(function (item) {\n        item.dispose();\n      });\n      this.items.clear();\n    }\n    /**\n     * Test whether the set contains a specific item.\n     *\n     * @param item - The item of interest.\n     *\n     * @returns `true` if the set contains the item, `false` otherwise.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(item) {\n      return this.items.has(item);\n    }\n    /**\n     * Add a disposable item to the set.\n     *\n     * @param item - The item to add to the set.\n     *\n     * #### Notes\n     * If the item is already contained in the set, this is a no-op.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      this.items.add(item);\n    }\n    /**\n     * Remove a disposable item from the set.\n     *\n     * @param item - The item to remove from the set.\n     *\n     * #### Notes\n     * If the item is not contained in the set, this is a no-op.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(item) {\n      this.items.delete(item);\n    }\n    /**\n     * Remove all items from the set.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.items.clear();\n    }\n  }, {\n    key: \"disposed\",\n    get: function get() {\n      return this.isDisposed;\n    }\n  }]);\n\n  return DisposableSet;\n}();\n\n(function (DisposableSet) {\n  /**\n   * Create a disposable set from an iterable of items.\n   *\n   * @param items - The iterable or array-like object of interest.\n   *\n   * @returns A new disposable initialized with the given items.\n   */\n  function from(items) {\n    var set = new DisposableSet();\n    items.forEach(function (item) {\n      set.add(item);\n    });\n    return set;\n  }\n\n  DisposableSet.from = from;\n})(DisposableSet || (DisposableSet = {}));","map":null,"metadata":{},"sourceType":"module"}