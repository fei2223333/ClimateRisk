{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Basecoat } from '../common';\nimport { ObjectExt } from '../util';\nexport var Store = /*#__PURE__*/function (_Basecoat) {\n  _inherits(Store, _Basecoat);\n\n  function Store() {\n    var _this;\n\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Store);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Store).call(this));\n    _this.pending = false;\n    _this.changing = false;\n    _this.data = {};\n\n    _this.mutate(ObjectExt.cloneDeep(data));\n\n    _this.changed = {};\n    return _this;\n  }\n\n  _createClass(Store, [{\n    key: \"mutate\",\n    value: function mutate(data) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var unset = options.unset === true;\n      var silent = options.silent === true;\n      var changes = [];\n      var changing = this.changing;\n      this.changing = true;\n\n      if (!changing) {\n        this.previous = ObjectExt.cloneDeep(this.data);\n        this.changed = {};\n      }\n\n      var current = this.data;\n      var previous = this.previous;\n      var changed = this.changed;\n      Object.keys(data).forEach(function (k) {\n        var key = k;\n        var newValue = data[key];\n\n        if (!ObjectExt.isEqual(current[key], newValue)) {\n          changes.push(key);\n        }\n\n        if (!ObjectExt.isEqual(previous[key], newValue)) {\n          changed[key] = newValue;\n        } else {\n          delete changed[key];\n        }\n\n        if (unset) {\n          delete current[key];\n        } else {\n          current[key] = newValue;\n        }\n      });\n\n      if (!silent && changes.length > 0) {\n        this.pending = true;\n        this.pendingOptions = options;\n        changes.forEach(function (key) {\n          _this2.emit('change:*', {\n            key: key,\n            options: options,\n            store: _this2,\n            current: current[key],\n            previous: previous[key]\n          });\n        });\n      }\n\n      if (changing) {\n        return this;\n      }\n\n      if (!silent) {\n        // Changes can be recursively nested within `\"change\"` events.\n        while (this.pending) {\n          this.pending = false;\n          this.emit('changed', {\n            current: current,\n            previous: previous,\n            store: this,\n            options: this.pendingOptions\n          });\n        }\n      }\n\n      this.pending = false;\n      this.changing = false;\n      this.pendingOptions = null;\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, defaultValue) {\n      if (key == null) {\n        return this.data;\n      }\n\n      var ret = this.data[key];\n      return ret == null ? defaultValue : ret;\n    }\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious(key) {\n      if (this.previous) {\n        var ret = this.previous[key];\n        return ret == null ? undefined : ret;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value, options) {\n      if (key != null) {\n        if (typeof key === 'object') {\n          this.mutate(key, value);\n        } else {\n          this.mutate(_defineProperty({}, key, value), options);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key, options) {\n      var empty = undefined;\n      var subset = {};\n      var opts;\n\n      if (typeof key === 'string') {\n        subset[key] = empty;\n        opts = options;\n      } else if (Array.isArray(key)) {\n        key.forEach(function (k) {\n          return subset[k] = empty;\n        });\n        opts = options;\n      } else {\n        // eslint-disable-next-line\n        for (var _key in this.data) {\n          subset[_key] = empty;\n        }\n\n        opts = key;\n      }\n\n      this.mutate(subset, Object.assign(Object.assign({}, opts), {\n        unset: true\n      }));\n      return this;\n    }\n  }, {\n    key: \"getByPath\",\n    value: function getByPath(path) {\n      return ObjectExt.getByPath(this.data, path, '/');\n    }\n  }, {\n    key: \"setByPath\",\n    value: function setByPath(path, value) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var delim = '/';\n      var pathArray = Array.isArray(path) ? _toConsumableArray(path) : path.split(delim);\n      var pathString = Array.isArray(path) ? path.join(delim) : path;\n      var property = pathArray[0];\n      var pathArrayLength = pathArray.length;\n      options.propertyPath = pathString;\n      options.propertyValue = value;\n      options.propertyPathArray = pathArray;\n\n      if (pathArrayLength === 1) {\n        this.set(property, value, options);\n      } else {\n        var update = {};\n        var diver = update;\n        var nextKey = property; // Initialize the nested object. Subobjects are either arrays or objects.\n        // An empty array is created if the sub-key is an integer. Otherwise, an\n        // empty object is created.\n\n        for (var i = 1; i < pathArrayLength; i += 1) {\n          var key = pathArray[i];\n          var isArrayIndex = Number.isFinite(Number(key));\n          diver = diver[nextKey] = isArrayIndex ? [] : {};\n          nextKey = key;\n        } // Fills update with the `value` on `path`.\n\n\n        ObjectExt.setByPath(update, pathArray, value, delim);\n        var data = ObjectExt.cloneDeep(this.data); // If rewrite mode enabled, we replace value referenced by path with the\n        // new one (we don't merge).\n\n        if (options.rewrite) {\n          ObjectExt.unsetByPath(data, path, delim);\n        }\n\n        var merged = ObjectExt.merge(data, update);\n        this.set(property, merged[property], options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeByPath\",\n    value: function removeByPath(path, options) {\n      var keys = Array.isArray(path) ? path : path.split('/');\n      var key = keys[0];\n\n      if (keys.length === 1) {\n        this.remove(key, options);\n      } else {\n        var paths = keys.slice(1);\n        var prop = ObjectExt.cloneDeep(this.get(key));\n\n        if (prop) {\n          ObjectExt.unsetByPath(prop, paths);\n        }\n\n        this.set(key, prop, options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"hasChanged\",\n    value: function hasChanged(key) {\n      if (key == null) {\n        return Object.keys(this.changed).length > 0;\n      }\n\n      return key in this.changed;\n    }\n    /**\n     * Returns an object containing all the data that have changed,\n     * or `null` if there are no changes. Useful for determining what\n     * parts of a view need to be updated.\n     */\n\n  }, {\n    key: \"getChanges\",\n    value: function getChanges(diff) {\n      if (diff == null) {\n        return this.hasChanged() ? ObjectExt.cloneDeep(this.changed) : null;\n      }\n\n      var old = this.changing ? this.previous : this.data;\n      var changed = {};\n      var hasChanged; // eslint-disable-next-line\n\n      for (var key in diff) {\n        var val = diff[key];\n\n        if (!ObjectExt.isEqual(old[key], val)) {\n          changed[key] = val;\n          hasChanged = true;\n        }\n      }\n\n      return hasChanged ? ObjectExt.cloneDeep(changed) : null;\n    }\n    /**\n     * Returns a copy of the store's `data` object.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return ObjectExt.cloneDeep(this.data);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var constructor = this.constructor;\n      return new constructor(this.data);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.off();\n      this.data = {};\n      this.previous = {};\n      this.changed = {};\n      this.pending = false;\n      this.changing = false;\n      this.pendingOptions = null;\n      this.trigger('disposed', {\n        store: this\n      });\n    }\n  }]);\n\n  return Store;\n}(Basecoat);\n\n__decorate([Basecoat.dispose()], Store.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}