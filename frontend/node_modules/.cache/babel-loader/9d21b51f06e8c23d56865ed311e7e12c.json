{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { DefaultNodeConfig } from '../../../flowchart-node-panel';\nimport { FlowchartFormWrapper } from '../../form-wrapper';\nimport { InputFiled, ColorPicker, Position, InputNumberFiled, Size } from './fields';\nimport { PREFIX } from './constants';\n\nvar GroupComponent = function GroupComponent(props) {\n  var config = props.config,\n      _props$plugin = props.plugin,\n      plugin = _props$plugin === void 0 ? {} : _props$plugin;\n  var updateGroup = plugin.updateGroup;\n\n  var _useState = useState(Object.assign(Object.assign({}, DefaultNodeConfig), config)),\n      _useState2 = _slicedToArray(_useState, 2),\n      groupConfig = _useState2[0],\n      setGroupConfig = _useState2[1];\n\n  var onGroupConfigChange = function onGroupConfigChange(key, value) {\n    setGroupConfig(Object.assign(Object.assign({}, groupConfig), _defineProperty({}, key, value)));\n    updateGroup(_defineProperty({}, key, value));\n  };\n\n  useEffect(function () {\n    setGroupConfig(Object.assign(Object.assign({}, DefaultNodeConfig), config));\n  }, [config]);\n  return React.createElement(\"div\", {\n    className: \"\".concat(PREFIX, \"-panel-body\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(PREFIX, \"-panel-group\")\n  }, React.createElement(\"h5\", null, \"\\u5185\\u5BB9\"), React.createElement(InputFiled, {\n    label: \"\\u6807\\u9898\",\n    value: groupConfig.label,\n    onChange: function onChange(value) {\n      onGroupConfigChange('label', value);\n    }\n  })), React.createElement(\"div\", {\n    className: \"\".concat(PREFIX, \"-panel-group\")\n  }, React.createElement(\"h5\", null, \"\\u6837\\u5F0F\"), React.createElement(Position, {\n    x: groupConfig.x,\n    y: groupConfig.y,\n    onChange: function onChange(key, value) {\n      onGroupConfigChange(key, value);\n    }\n  }), React.createElement(Size, {\n    width: groupConfig.width,\n    height: groupConfig.height,\n    onChange: function onChange(key, value) {\n      onGroupConfigChange(key, value);\n    }\n  }), React.createElement(ColorPicker, {\n    label: \"\\u586B\\u5145\",\n    value: groupConfig.fill,\n    onChange: function onChange(value) {\n      onGroupConfigChange('fill', value);\n    }\n  }), React.createElement(ColorPicker, {\n    label: \"\\u8FB9\\u6846\",\n    value: groupConfig.stroke,\n    onChange: function onChange(value) {\n      onGroupConfigChange('stroke', value);\n    }\n  }), React.createElement(\"div\", {\n    className: \"\".concat(PREFIX, \"-node-text-style\")\n  }, React.createElement(InputNumberFiled, {\n    label: \"\\u5B57\\u53F7\",\n    value: groupConfig.fontSize,\n    width: 68,\n    onChange: function onChange(value) {\n      onGroupConfigChange('fontSize', value);\n    }\n  }), React.createElement(ColorPicker, {\n    value: groupConfig.fontFill,\n    onChange: function onChange(value) {\n      onGroupConfigChange('fontFill', value);\n    }\n  }))));\n};\n\nexport var GroupService = function GroupService(props) {\n  return React.createElement(FlowchartFormWrapper, Object.assign({}, props), function (config, plugin) {\n    return React.createElement(GroupComponent, Object.assign({}, props, {\n      plugin: plugin,\n      config: config\n    }));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}