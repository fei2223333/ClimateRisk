{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { cellsToJson } from '../../common/graph-utils';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nexport var NsGraphCopySelection;\n\n(function (NsGraphCopySelection) {\n  /** Command: 用于注册named factory */\n  NsGraphCopySelection.command = XFlowGraphCommands.GRAPH_COPY;\n  /** hookName */\n\n  NsGraphCopySelection.hookKey = 'graphCopySelection';\n})(NsGraphCopySelection || (NsGraphCopySelection = {}));\n\nvar GraphCopySelectionCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function GraphCopySelectionCommand() {\n    var _this = this;\n\n    _classCallCheck(this, GraphCopySelectionCommand);\n\n    this.parseCells = function (cells) {\n      // if groupNode add its group children\n      cells.forEach(function (cell) {\n        var data = cell.getData();\n\n        if (cell.isNode() && data.isGroup) {\n          var children = cell.getChildren();\n          children.forEach(function (child) {\n            cells.push(child);\n          });\n        }\n      }); // filter edges target not in selections\n\n      var nodeIds = cells.filter(function (cell) {\n        return cell.isNode();\n      }).map(function (cell) {\n        return cell.id;\n      });\n      var map = cells.reduce(function (acc, cell) {\n        if (cell.isEdge()) {\n          var source = cell.getSourceCellId();\n          var target = cell.getTargetCellId();\n\n          if (source && target) {\n            if (nodeIds.includes(source) && nodeIds.includes(target)) {\n              acc.set(cell.id, cell);\n            }\n          }\n        } else {\n          acc.set(cell.id, cell);\n        }\n\n        return acc;\n      }, new Map());\n      var uniqeList = Array.from(map.values());\n      return cellsToJson(uniqeList);\n    };\n    /** 执行Cmd */\n\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context3.next = 5;\n                return hooks.graphCopySelection.call(args, function () {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this3 = this;\n\n                    var graph, cells, jsonObject, oldJsonString;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return ctx.getX6Graph();\n\n                          case 2:\n                            graph = _context2.sent;\n                            cells = graph.getSelectedCells(); // 处理 Group cells/过滤无效的edges\n\n                            // 处理 Group cells/过滤无效的edges\n                            jsonObject = this.parseCells(cells);\n                            oldJsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY); // 写cache\n\n                            // 写cache\n                            window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(jsonObject)); // undo 写cache\n\n                            // undo 写cache\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        window.localStorage.setItem(LOCAL_STORAGE_KEY, oldJsonString);\n\n                                      case 1:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n                            }));\n                            return _context2.abrupt(\"return\", {\n                              err: null\n                            });\n\n                          case 9:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, runtimeHook);\n\n              case 5:\n                result = _context3.sent;\n                ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context4.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(GraphCopySelectionCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return GraphCopySelectionCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphCopySelectionCommand.prototype, \"contextProvider\", void 0);\n\nGraphCopySelectionCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphCopySelection.command.id\n  }\n})\n/** 创建节点命令 */\n], GraphCopySelectionCommand);\nexport { GraphCopySelectionCommand };","map":null,"metadata":{},"sourceType":"module"}