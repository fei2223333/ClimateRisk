{"ast":null,"code":"var DEFAULT_WEIGHT_FUNC = function DEFAULT_WEIGHT_FUNC() {\n  return 1;\n};\n\nexport function floydWarshall(graph, weightFn, edgeFn) {\n  return runFloydWarshall(graph, weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function (v) {\n    return graph.outEdges(v);\n  });\n}\n\nfunction runFloydWarshall(graph, weightFn, edgeFn) {\n  var results = {};\n  var nodes = graph.nodes();\n  nodes.forEach(function (node) {\n    var v = String(node);\n    results[v] = {};\n    results[v][v] = {\n      distance: 0\n    };\n    nodes.forEach(function (w) {\n      if (node !== w) {\n        results[v][String(w)] = {\n          distance: Number.POSITIVE_INFINITY\n        };\n      }\n    });\n    edgeFn(node).forEach(function (edge) {\n      var w = edge.v === node ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][String(w)] = {\n        distance: d,\n        predecessor: node\n      };\n    });\n  });\n  nodes.forEach(function (nodek) {\n    var k = String(nodek);\n    var rowK = results[k];\n    nodes.forEach(function (nodei) {\n      var i = String(nodei);\n      var rowI = results[i];\n      nodes.forEach(function (nodej) {\n        var j = String(nodej);\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n  return results;\n}\n\nexport default floydWarshall;","map":null,"metadata":{},"sourceType":"module"}