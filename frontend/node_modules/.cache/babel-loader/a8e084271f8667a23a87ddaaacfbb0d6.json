{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ArrayExt } from '../../util';\nimport { Config } from '../../global/config';\nimport { Graph } from '../../graph/graph';\nimport { Model } from '../../model/model';\nexport var Clipboard = /*#__PURE__*/function () {\n  function Clipboard() {\n    _classCallCheck(this, Clipboard);\n\n    this.cells = [];\n  }\n\n  _createClass(Clipboard, [{\n    key: \"copy\",\n    value: function copy(cells, graph) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.options = Object.assign({}, options);\n      var model = Model.isModel(graph) ? graph : graph.model;\n      var cloned = model.cloneSubGraph(cells, options); // sort asc by cell type\n\n      this.cells = ArrayExt.sortBy(Object.keys(cloned).map(function (key) {\n        return cloned[key];\n      }), function (cell) {\n        return cell.isEdge() ? 2 : 1;\n      });\n      this.serialize(options);\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(cells, graph) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.copy(cells, graph, options);\n      var model = Graph.isGraph(graph) ? graph.model : graph;\n      model.batchUpdate('cut', function () {\n        cells.forEach(function (cell) {\n          return cell.remove();\n        });\n      });\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(graph) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var localOptions = Object.assign(Object.assign({}, this.options), options);\n      var offset = localOptions.offset,\n          edgeProps = localOptions.edgeProps,\n          nodeProps = localOptions.nodeProps;\n      var dx = 20;\n      var dy = 20;\n\n      if (offset) {\n        dx = typeof offset === 'number' ? offset : offset.dx;\n        dy = typeof offset === 'number' ? offset : offset.dy;\n      }\n\n      this.deserialize(localOptions);\n      var cells = this.cells;\n      cells.forEach(function (cell) {\n        cell.model = null;\n        cell.removeProp('zIndex');\n\n        if (dx || dy) {\n          cell.translate(dx, dy);\n        }\n\n        if (nodeProps && cell.isNode()) {\n          cell.prop(nodeProps);\n        }\n\n        if (edgeProps && cell.isEdge()) {\n          cell.prop(edgeProps);\n        }\n      });\n      var model = Graph.isGraph(graph) ? graph.model : graph;\n      model.batchUpdate('paste', function () {\n        model.addCells(_this.cells);\n      });\n      this.copy(cells, graph, options);\n      return cells;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(options) {\n      if (options.useLocalStorage !== false) {\n        Storage.save(this.cells);\n      }\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(options) {\n      if (options.useLocalStorage) {\n        var cells = Storage.fetch();\n\n        if (cells) {\n          this.cells = cells;\n        }\n      }\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.cells.length <= 0;\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.options = {};\n      this.cells = [];\n      Storage.clean();\n    }\n  }]);\n\n  return Clipboard;\n}();\nvar Storage;\n\n(function (Storage) {\n  var LOCAL_STORAGE_KEY = \"\".concat(Config.prefixCls, \".clipboard.cells\");\n\n  function save(cells) {\n    if (window.localStorage) {\n      var data = cells.map(function (cell) {\n        return cell.toJSON();\n      });\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n    }\n  }\n\n  Storage.save = save;\n\n  function fetch() {\n    if (window.localStorage) {\n      var raw = localStorage.getItem(LOCAL_STORAGE_KEY);\n      var cells = raw ? JSON.parse(raw) : [];\n\n      if (cells) {\n        return Model.fromJSON(cells);\n      }\n    }\n  }\n\n  Storage.fetch = fetch;\n\n  function clean() {\n    if (window.localStorage) {\n      localStorage.removeItem(LOCAL_STORAGE_KEY);\n    }\n  }\n\n  Storage.clean = clean;\n})(Storage || (Storage = {}));","map":null,"metadata":{},"sourceType":"module"}