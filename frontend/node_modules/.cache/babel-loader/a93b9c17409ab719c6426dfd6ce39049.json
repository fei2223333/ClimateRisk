{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport BaseModel from '../../core/BaseModel';\nimport { CanvasUpdateType } from '../../core/interface';\n\nvar CanvaModel = function (_BaseModel) {\n  _inherits(CanvaModel, _BaseModel);\n\n  var _super = _createSuper(CanvaModel);\n\n  function CanvaModel() {\n    var _this;\n\n    _classCallCheck(this, CanvaModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"updateMode\", CanvasUpdateType.ALWAYS);\n\n    _defineProperty(_assertThisInitialized(_this), \"canvas\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"ctx\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"prevSize\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"renderUpdate\", function () {\n      var _ref = _this.layer.getLayerConfig(),\n          _ref$zIndex = _ref.zIndex,\n          zIndex = _ref$zIndex === void 0 ? 10 : _ref$zIndex,\n          _ref$update = _ref.update,\n          update = _ref$update === void 0 ? CanvasUpdateType.ALWAYS : _ref$update,\n          _ref$animateOption = _ref.animateOption,\n          animateOption = _ref$animateOption === void 0 ? {\n        enable: false,\n        duration: 20\n      } : _ref$animateOption;\n\n      if (+_this.canvas.style.zIndex === zIndex) {\n        _this.canvas.style.zIndex = zIndex + '';\n      }\n\n      if (_this.updateMode !== update) {\n        _this.updateMode = update;\n\n        _this.unBindListener();\n\n        _this.bindListener();\n      }\n\n      if (_this.updateMode === CanvasUpdateType.ALWAYS && animateOption.enable) {\n        _this.renderCanvas();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unBindListener\", function () {\n      _this.mapService.off('mapchange', _this.renderCanvas);\n\n      _this.mapService.off('zoomstart', _this.clearCanvas);\n\n      _this.mapService.off('zoomend', _this.renderCanvas);\n\n      _this.mapService.off('movestart', _this.clearCanvas);\n\n      _this.mapService.off('moveend', _this.renderCanvas);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"bindListener\", function () {\n      if (_this.updateMode === CanvasUpdateType.ALWAYS) {\n        _this.mapService.on('mapchange', _this.renderCanvas);\n      } else {\n        _this.mapService.on('zoomstart', _this.clearCanvas);\n\n        _this.mapService.on('zoomend', _this.renderCanvas);\n\n        _this.mapService.on('movestart', _this.clearCanvas);\n\n        _this.mapService.on('moveend', _this.renderCanvas);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearCanvas\", function () {\n      if (_this.ctx) {\n        var _this$rendererService = _this.rendererService.getViewportSize(),\n            w = _this$rendererService.width,\n            h = _this$rendererService.height;\n\n        _this.ctx.clearRect(0, 0, w, h);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderCanvas\", function () {\n      var _this$rendererService2 = _this.rendererService.getViewportSize(),\n          viewWidth = _this$rendererService2.width,\n          viewHeight = _this$rendererService2.height;\n\n      if (_this.prevSize[0] !== viewWidth || _this.prevSize[1] !== viewHeight) {\n        _this.prevSize = [viewWidth, viewHeight];\n\n        var size = _this.mapService.getSize();\n\n        var _size = _slicedToArray(size, 2),\n            width = _size[0],\n            height = _size[1];\n\n        _this.canvas.width = viewWidth;\n        _this.canvas.height = viewHeight;\n        _this.canvas.style.width = width + 'px';\n        _this.canvas.style.height = height + 'px';\n      }\n\n      var _ref2 = _this.layer.getLayerConfig(),\n          drawingOnCanvas = _ref2.drawingOnCanvas;\n\n      if (_this.ctx) {\n        drawingOnCanvas({\n          canvas: _this.canvas,\n          ctx: _this.ctx,\n          mapService: _this.mapService,\n          size: [viewWidth, viewHeight]\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(CanvaModel, [{\n    key: \"clearModels\",\n    value: function clearModels() {\n      if (this.canvas) {\n        document.removeChild(this.canvas);\n        this.canvas = null;\n      }\n\n      this.unBindListener();\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      var _ref3 = this.layer.getLayerConfig(),\n          _ref3$update = _ref3.update,\n          update = _ref3$update === void 0 ? CanvasUpdateType.ALWAYS : _ref3$update;\n\n      this.updateMode = update;\n      this.initCanvas();\n      this.renderCanvas();\n      this.bindListener();\n      this.mapService.getContainer();\n      return [];\n    }\n  }, {\n    key: \"initCanvas\",\n    value: function initCanvas() {\n      var _this$mapService$getC;\n\n      var _ref4 = this.layer.getLayerConfig(),\n          zIndex = _ref4.zIndex;\n\n      var size = this.mapService.getSize();\n\n      var _size2 = _slicedToArray(size, 2),\n          width = _size2[0],\n          height = _size2[1];\n\n      var _this$rendererService3 = this.rendererService.getViewportSize(),\n          viewWidth = _this$rendererService3.width,\n          viewHeight = _this$rendererService3.height;\n\n      this.prevSize = [viewWidth, viewHeight];\n      var canvas = document.createElement('canvas');\n      this.canvas = canvas;\n      canvas.width = viewWidth;\n      canvas.height = viewHeight;\n      canvas.style.pointerEvents = 'none';\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n      canvas.style.position = 'absolute';\n      canvas.style.top = '0';\n      canvas.style.left = '0';\n      canvas.style.zIndex = zIndex + '';\n      (_this$mapService$getC = this.mapService.getContainer()) === null || _this$mapService$getC === void 0 ? void 0 : _this$mapService$getC.appendChild(canvas);\n      var ctx = canvas.getContext('2d');\n      this.ctx = ctx;\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return this.initModels();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      return;\n    }\n  }]);\n\n  return CanvaModel;\n}(BaseModel);\n\nexport { CanvaModel as default };","map":null,"metadata":{},"sourceType":"module"}