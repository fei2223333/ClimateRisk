{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ObjectExt, Dom } from '../util';\nimport { Timing, Interp } from '../common';\nexport var Animation = /*#__PURE__*/function () {\n  function Animation(cell) {\n    _classCallCheck(this, Animation);\n\n    this.cell = cell;\n    this.ids = {};\n    this.cache = {};\n  }\n\n  _createClass(Animation, [{\n    key: \"get\",\n    value: function get() {\n      return Object.keys(this.ids);\n    }\n  }, {\n    key: \"start\",\n    value: function start(path, targetValue) {\n      var _this = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var delim = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';\n      var startValue = this.cell.getPropByPath(path);\n      var localOptions = ObjectExt.defaults(options, Animation.defaultOptions);\n      var timing = this.getTiming(localOptions.timing);\n      var interpolate = this.getInterp(localOptions.interp, startValue, targetValue);\n      var startTime = 0;\n      var key = Array.isArray(path) ? path.join(delim) : path;\n      var paths = Array.isArray(path) ? path : path.split(delim);\n\n      var iterate = function iterate() {\n        var now = new Date().getTime();\n\n        if (startTime === 0) {\n          startTime = now;\n        }\n\n        var elaspe = now - startTime;\n        var progress = elaspe / localOptions.duration;\n\n        if (progress < 1) {\n          _this.ids[key] = Dom.requestAnimationFrame(iterate);\n        } else {\n          progress = 1;\n        }\n\n        var currentValue = interpolate(timing(progress));\n\n        _this.cell.setPropByPath(paths, currentValue);\n\n        if (options.progress) {\n          options.progress(Object.assign({\n            progress: progress,\n            currentValue: currentValue\n          }, _this.getArgs(key)));\n        }\n\n        if (progress === 1) {\n          // TODO: remove in the next major version\n          _this.cell.notify('transition:end', _this.getArgs(key));\n\n          _this.cell.notify('transition:complete', _this.getArgs(key));\n\n          options.complete && options.complete(_this.getArgs(key));\n\n          _this.cell.notify('transition:finish', _this.getArgs(key));\n\n          options.finish && options.finish(_this.getArgs(key));\n\n          _this.clean(key);\n        }\n      };\n\n      setTimeout(function () {\n        _this.stop(path, undefined, delim);\n\n        _this.cache[key] = {\n          startValue: startValue,\n          targetValue: targetValue,\n          options: localOptions\n        };\n        _this.ids[key] = Dom.requestAnimationFrame(iterate); // TODO: remove in the next major version\n\n        _this.cell.notify('transition:begin', _this.getArgs(key));\n\n        _this.cell.notify('transition:start', _this.getArgs(key));\n\n        options.start && options.start(_this.getArgs(key));\n      }, options.delay);\n      return this.stop.bind(this, path, delim, options);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(path) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var delim = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '/';\n      var paths = Array.isArray(path) ? path : path.split(delim);\n      Object.keys(this.ids).filter(function (key) {\n        return ObjectExt.isEqual(paths, key.split(delim).slice(0, paths.length));\n      }).forEach(function (key) {\n        Dom.cancelAnimationFrame(_this2.ids[key]);\n        var data = _this2.cache[key];\n\n        var commonArgs = _this2.getArgs(key);\n\n        var localOptions = Object.assign(Object.assign({}, data.options), options);\n        var jumpedToEnd = localOptions.jumpedToEnd;\n\n        if (jumpedToEnd && data.targetValue != null) {\n          _this2.cell.setPropByPath(key, data.targetValue);\n\n          _this2.cell.notify('transition:end', Object.assign({}, commonArgs));\n\n          _this2.cell.notify('transition:complete', Object.assign({}, commonArgs));\n\n          localOptions.complete && localOptions.complete(Object.assign({}, commonArgs));\n        }\n\n        var stopArgs = Object.assign({\n          jumpedToEnd: jumpedToEnd\n        }, commonArgs);\n\n        _this2.cell.notify('transition:stop', Object.assign({}, stopArgs));\n\n        localOptions.stop && localOptions.stop(Object.assign({}, stopArgs));\n\n        _this2.cell.notify('transition:finish', Object.assign({}, commonArgs));\n\n        localOptions.finish && localOptions.finish(Object.assign({}, commonArgs));\n\n        _this2.clean(key);\n      });\n      return this;\n    }\n  }, {\n    key: \"clean\",\n    value: function clean(key) {\n      delete this.ids[key];\n      delete this.cache[key];\n    }\n  }, {\n    key: \"getTiming\",\n    value: function getTiming(timing) {\n      return typeof timing === 'string' ? Timing[timing] : timing;\n    }\n  }, {\n    key: \"getInterp\",\n    value: function getInterp(interp, startValue, targetValue) {\n      if (interp) {\n        return interp(startValue, targetValue);\n      }\n\n      if (typeof targetValue === 'number') {\n        return Interp.number(startValue, targetValue);\n      }\n\n      if (typeof targetValue === 'string') {\n        if (targetValue[0] === '#') {\n          return Interp.color(startValue, targetValue);\n        }\n\n        return Interp.unit(startValue, targetValue);\n      }\n\n      return Interp.object(startValue, targetValue);\n    }\n  }, {\n    key: \"getArgs\",\n    value: function getArgs(key) {\n      var data = this.cache[key];\n      return {\n        path: key,\n        startValue: data.startValue,\n        targetValue: data.targetValue,\n        cell: this.cell\n      };\n    }\n  }]);\n\n  return Animation;\n}();\n\n(function (Animation) {\n  Animation.defaultOptions = {\n    delay: 10,\n    duration: 100,\n    timing: 'linear'\n  };\n})(Animation || (Animation = {}));","map":null,"metadata":{},"sourceType":"module"}