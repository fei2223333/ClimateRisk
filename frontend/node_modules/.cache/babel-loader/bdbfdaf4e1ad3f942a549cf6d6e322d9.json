{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { getNodeReactComponent } from '../components/context';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFLOW_DEFAULT_NODE } from '../../constants';\nexport var NsAddNode;\n\n(function (NsAddNode) {\n  /** Command: 用于注册named factory */\n  NsAddNode.command = XFlowNodeCommands.ADD_NODE;\n  /** hookName */\n\n  NsAddNode.hookKey = 'addNode';\n})(NsAddNode || (NsAddNode = {}));\n\nvar AddNodeCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function AddNodeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, AddNodeCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context3.next = 5;\n                return hooks.addNode.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this3 = this;\n\n                    var createNodeService, cellFactory, commandService, options, graph, rawNode, res, nodeConfig, x6NodeCell, eventOptions, cell;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            createNodeService = handlerArgs.createNodeService, cellFactory = handlerArgs.cellFactory, commandService = handlerArgs.commandService, options = handlerArgs.options;\n                            _context2.next = 3;\n                            return ctx.getX6Graph();\n\n                          case 3:\n                            graph = _context2.sent;\n                            rawNode = handlerArgs.nodeConfig; // 通过createNodeService来获取诸如nodeId的信息，如果返回的nodeid为空则不添加到画布\n\n                            if (!createNodeService) {\n                              _context2.next = 12;\n                              break;\n                            }\n\n                            _context2.next = 8;\n                            return createNodeService(handlerArgs);\n\n                          case 8:\n                            res = _context2.sent;\n\n                            if (!(typeof res === 'boolean')) {\n                              _context2.next = 11;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              err: 'createNodeService rejected'\n                            });\n\n                          case 11:\n                            rawNode = res;\n\n                          case 12:\n                            _context2.next = 14;\n                            return this.processNodeConfig(rawNode);\n\n                          case 14:\n                            nodeConfig = _context2.sent;\n                            eventOptions = Object.assign(Object.assign({}, options), {\n                              isCommand: true\n                            });\n\n                            if (!cellFactory) {\n                              _context2.next = 23;\n                              break;\n                            }\n\n                            _context2.next = 19;\n                            return cellFactory(nodeConfig, this);\n\n                          case 19:\n                            cell = _context2.sent;\n                            x6NodeCell = graph.addNode(cell, eventOptions);\n                            _context2.next = 24;\n                            break;\n\n                          case 23:\n                            x6NodeCell = graph.addNode(nodeConfig, eventOptions);\n\n                          case 24:\n                            /** add undo: delete node */\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                var nodeData;\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        nodeData = Object.assign({\n                                          id: x6NodeCell.id\n                                        }, x6NodeCell.getData());\n                                        commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n                                          nodeConfig: nodeData\n                                        });\n\n                                      case 2:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n                            }));\n                            return _context2.abrupt(\"return\", {\n                              nodeConfig: nodeConfig,\n                              nodeCell: x6NodeCell\n                            });\n\n                          case 26:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, runtimeHook);\n\n              case 5:\n                result = _context3.sent;\n                ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n\n    this.processNodeConfig = function (nodeConfig) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var ctx, graphConfig, reactComponent, commands, modelService;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                ctx = this.contextProvider();\n                /**\n                 * 1. react shape node 逻辑\n                 * 2. X6不会处理data数据, 仅透传。可以通过x6Node?.getData()方法获取这份数据\n                 */\n\n                nodeConfig.data = Object.assign({}, nodeConfig);\n                /** 非 react shape */\n\n                if (!nodeConfig.shape) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", nodeConfig);\n\n              case 4:\n                if (nodeConfig.view) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                _context4.next = 7;\n                return ctx.getGraphConfig();\n\n              case 7:\n                graphConfig = _context4.sent;\n                nodeConfig.view = graphConfig.graphId;\n\n              case 9:\n                if (nodeConfig.component) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 12;\n                return this.getNodeReactComponent(nodeConfig);\n\n              case 12:\n                reactComponent = _context4.sent;\n                commands = ctx.getCommands();\n                modelService = ctx.getModelService();\n                nodeConfig.shape = 'react-shape';\n                nodeConfig.component = getNodeReactComponent(reactComponent, commands, modelService);\n\n              case 17:\n                return _context4.abrupt(\"return\", nodeConfig);\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n\n    this.getNodeReactComponent = function (nodeConfig) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var ctx, hooks, graphConfig, renderMap, renderKey, reactComponent;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ctx = this.contextProvider();\n                hooks = ctx.getHooks();\n                /** 获取Graph Config中用户预设的节点渲染需要的React组件 */\n\n                _context5.next = 4;\n                return ctx.getGraphConfig();\n\n              case 4:\n                graphConfig = _context5.sent;\n                _context5.next = 7;\n                return hooks.reactNodeRender.call(graphConfig.nodeRender);\n\n              case 7:\n                renderMap = _context5.sent;\n\n                /** 获取renderKey，没有renderKey时使用默认Key */\n                renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFLOW_DEFAULT_NODE;\n                /** 获取组件 */\n\n                reactComponent = renderMap.get(renderKey);\n\n                if (!reactComponent) {\n                  console.error('react node component is missing:', graphConfig.nodeRender, renderKey, reactComponent);\n                }\n\n                return _context5.abrupt(\"return\", reactComponent);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context7.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    };\n  }\n\n  _createClass(AddNodeCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return AddNodeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddNodeCommand.prototype, \"contextProvider\", void 0);\n\nAddNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddNode.command.id\n  }\n})\n/** 创建节点命令 */\n], AddNodeCommand);\nexport { AddNodeCommand };","map":null,"metadata":{},"sourceType":"module"}