{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { singleton, Contribution, contrib } from 'mana-syringe';\nimport { DisposableCollection } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { initHooks, IHookService, IHookContribution } from './interface';\n\nvar HookRegistry = /*#__PURE__*/function () {\n  function HookRegistry() {\n    var _this = this;\n\n    _classCallCheck(this, HookRegistry);\n\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** hooks */\n\n    this.hookProvider = function () {\n      return _this.hooks;\n    };\n    /** 注册hook插件 */\n\n\n    this.registerHook = function (fn) {\n      return fn(_this.hooks);\n    };\n    /** 注册hook  */\n\n\n    this.registerHookHub = function (hookName, hook) {\n      _this.hooks[hookName] = hook;\n      return {\n        dispose: function dispose() {\n          delete _this.hooks[hookName];\n        }\n      };\n    };\n    /** app启动时，收集hook扩展点的注册项 */\n\n\n    this.onStart = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var contributions, _iterator, _step, contribution, _iterator2, _step2, _contribution;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contributions = this.contributionProvider.getContributions();\n                _iterator = _createForOfIteratorHelper(contributions);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    contribution = _step.value;\n                    contribution.registerHookHub(this);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _iterator2 = _createForOfIteratorHelper(contributions);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _contribution = _step2.value;\n\n                    _contribution.registerHook(this.hooks);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n\n    this.hooks = initHooks();\n  }\n  /** app的停止逻辑 */\n\n\n  _createClass(HookRegistry, [{\n    key: \"onStop\",\n    value: function onStop() {\n      this.toDispose.dispose();\n    }\n  }]);\n\n  return HookRegistry;\n}();\n\n__decorate([contrib(IHookContribution), __metadata(\"design:type\", Object)], HookRegistry.prototype, \"contributionProvider\", void 0);\n\nHookRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IHookService]\n}), __metadata(\"design:paramtypes\", [])], HookRegistry);\nexport { HookRegistry };","map":null,"metadata":{},"sourceType":"module"}