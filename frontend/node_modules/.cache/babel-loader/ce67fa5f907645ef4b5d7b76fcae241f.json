{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Platform, StringExt, ObjectExt, Dom } from '../../util';\nimport { Node } from '../../model';\nimport { NodeView } from '../../view';\nimport { getName } from './util';\nvar contentSelector = '.text-block-content';\nvar registryName = getName('text-block');\nexport var TextBlock = /*#__PURE__*/function (_Node) {\n  _inherits(TextBlock, _Node);\n\n  function TextBlock() {\n    _classCallCheck(this, TextBlock);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextBlock).apply(this, arguments));\n  }\n\n  _createClass(TextBlock, [{\n    key: \"getContent\",\n    value: function getContent() {\n      return this.store.get('content', '');\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent(content) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.store.set('content', content, options);\n    }\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      var _this = this;\n\n      _get(_getPrototypeOf(TextBlock.prototype), \"setup\", this).call(this);\n\n      this.store.on('change:*', function (metadata) {\n        var key = metadata.key;\n\n        if (key === 'content') {\n          _this.updateContent(_this.getContent());\n        } else if (key === 'size') {\n          _this.updateSize(_this.getSize());\n        }\n      });\n      this.updateSize(this.getSize());\n      this.updateContent(this.getContent());\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(size) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        this.setAttrs(_defineProperty({\n          foreignObject: Object.assign({}, size)\n        }, contentSelector, {\n          style: Object.assign({}, size)\n        }));\n      }\n    }\n  }, {\n    key: \"updateContent\",\n    value: function updateContent(content) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        this.setAttrs(_defineProperty({}, contentSelector, {\n          html: content ? StringExt.sanitizeHTML(content) : ''\n        }));\n      } else {\n        this.setAttrs(_defineProperty({}, contentSelector, {\n          text: content\n        }));\n      }\n    }\n  }, {\n    key: \"content\",\n    get: function get() {\n      return this.getContent();\n    },\n    set: function set(val) {\n      this.setContent(val);\n    }\n  }]);\n\n  return TextBlock;\n}(Node);\n\n(function (TextBlock) {\n  TextBlock.config({\n    type: registryName,\n    view: registryName,\n    markup: ['<g class=\"rotatable\">', '<g class=\"scalable\"><rect/></g>', Platform.SUPPORT_FOREIGNOBJECT ? [\"<foreignObject>\", \"<body xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\", \"<div class=\\\"\".concat(contentSelector.substr(1), \"\\\" />\"), \"</body>\", \"</foreignObject>\"].join('') : \"<text class=\\\"\".concat(contentSelector.substr(1), \"\\\"/>\"), '</g>'].join(''),\n    attrs: _defineProperty({\n      '.': {\n        fill: '#ffffff',\n        stroke: 'none'\n      },\n      rect: {\n        fill: '#ffffff',\n        stroke: '#000000',\n        width: 80,\n        height: 100\n      },\n      text: {\n        fill: '#000000',\n        fontSize: 14,\n        fontFamily: 'Arial, helvetica, sans-serif'\n      },\n      body: {\n        style: {\n          background: 'transparent',\n          position: 'static',\n          margin: 0,\n          padding: 0\n        }\n      },\n      foreignObject: {\n        style: {\n          overflow: 'hidden'\n        }\n      }\n    }, contentSelector, {\n      refX: 0.5,\n      refY: 0.5,\n      yAlign: 'middle',\n      xAlign: 'middle',\n      style: {\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        display: 'table-cell',\n        padding: '0 5px',\n        margin: 0\n      }\n    })\n  });\n  Node.registry.register(registryName, TextBlock);\n})(TextBlock || (TextBlock = {}));\n\n(function (TextBlock) {\n  var contentAction = 'content';\n\n  var View = /*#__PURE__*/function (_NodeView) {\n    _inherits(View, _NodeView);\n\n    function View() {\n      _classCallCheck(this, View);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(View).apply(this, arguments));\n    }\n\n    _createClass(View, [{\n      key: \"confirmUpdate\",\n      value: function confirmUpdate(flag) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var ret = _get(_getPrototypeOf(View.prototype), \"confirmUpdate\", this).call(this, flag, options);\n\n        if (this.hasAction(ret, contentAction)) {\n          this.updateContent();\n          ret = this.removeAction(ret, contentAction);\n        }\n\n        return ret;\n      }\n    }, {\n      key: \"update\",\n      value: function update(partialAttrs) {\n        if (Platform.SUPPORT_FOREIGNOBJECT) {\n          _get(_getPrototypeOf(View.prototype), \"update\", this).call(this, partialAttrs);\n        } else {\n          var node = this.cell;\n          var attrs = Object.assign({}, partialAttrs || node.getAttrs());\n          delete attrs[contentSelector];\n\n          _get(_getPrototypeOf(View.prototype), \"update\", this).call(this, attrs);\n\n          if (!partialAttrs || ObjectExt.has(partialAttrs, contentSelector)) {\n            this.updateContent(partialAttrs);\n          }\n        }\n      }\n    }, {\n      key: \"updateContent\",\n      value: function updateContent(partialAttrs) {\n        if (Platform.SUPPORT_FOREIGNOBJECT) {\n          _get(_getPrototypeOf(View.prototype), \"update\", this).call(this, partialAttrs);\n        } else {\n          var node = this.cell;\n          var textAttrs = (partialAttrs || node.getAttrs())[contentSelector]; // Break the text to fit the node size taking into\n          // account the attributes set on the node.\n\n          var text = Dom.breakText(node.getContent(), node.getSize(), textAttrs, {\n            svgDocument: this.graph.view.svg\n          });\n\n          var attrs = _defineProperty({}, contentSelector, ObjectExt.merge({}, textAttrs, {\n            text: text\n          }));\n\n          _get(_getPrototypeOf(View.prototype), \"update\", this).call(this, attrs);\n        }\n      }\n    }]);\n\n    return View;\n  }(NodeView);\n\n  TextBlock.View = View;\n\n  (function (View) {\n    View.config({\n      bootstrap: ['render', contentAction],\n      actions: Platform.SUPPORT_FOREIGNOBJECT ? {} : {\n        size: contentAction,\n        content: contentAction\n      }\n    });\n    NodeView.registry.register(registryName, View);\n  })(View = TextBlock.View || (TextBlock.View = {}));\n})(TextBlock || (TextBlock = {}));","map":null,"metadata":{},"sourceType":"module"}