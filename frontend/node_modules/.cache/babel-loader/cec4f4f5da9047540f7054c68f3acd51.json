{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Base } from '../base';\nimport { Point } from '../../geometry';\nimport { ObjectExt } from '../../util';\nexport var Poly = /*#__PURE__*/function (_Base) {\n  _inherits(Poly, _Base);\n\n  function Poly() {\n    _classCallCheck(this, Poly);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Poly).apply(this, arguments));\n  }\n\n  _createClass(Poly, [{\n    key: \"getPoints\",\n    value: function getPoints() {\n      return this.getAttrByPath('body/refPoints');\n    }\n  }, {\n    key: \"setPoints\",\n    value: function setPoints(points, options) {\n      if (points == null) {\n        this.removePoints();\n      } else {\n        this.setAttrByPath('body/refPoints', Poly.pointsToString(points), options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removePoints\",\n    value: function removePoints() {\n      this.removeAttrByPath('body/refPoints');\n      return this;\n    }\n  }, {\n    key: \"points\",\n    get: function get() {\n      return this.getPoints();\n    },\n    set: function set(pts) {\n      this.setPoints(pts);\n    }\n  }]);\n\n  return Poly;\n}(Base);\n\n(function (Poly) {\n  function pointsToString(points) {\n    return typeof points === 'string' ? points : points.map(function (p) {\n      if (Array.isArray(p)) {\n        return p.join(',');\n      }\n\n      if (Point.isPointLike(p)) {\n        return \"\".concat(p.x, \", \").concat(p.y);\n      }\n\n      return '';\n    }).join(' ');\n  }\n\n  Poly.pointsToString = pointsToString;\n  Poly.config({\n    propHooks: function propHooks(metadata) {\n      var points = metadata.points,\n          others = __rest(metadata, [\"points\"]);\n\n      if (points) {\n        var data = pointsToString(points);\n\n        if (data) {\n          ObjectExt.setByPath(others, 'attrs/body/refPoints', data);\n        }\n      }\n\n      return others;\n    }\n  });\n})(Poly || (Poly = {}));","map":null,"metadata":{},"sourceType":"module"}