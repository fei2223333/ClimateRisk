{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { createModule } from '../module';\nimport { insertCss } from '@antv/xflow-core';\nimport { XFlowAppExtensionMoudle, usePositionStyle } from '@antv/xflow-core';\nimport { SimpleNodeView } from '../x6-node-view';\n/** 配置类型 */\n\nexport var CONFIG_TYPE = 'CanvasMiniMap';\n/** 获取默认配置 */\n\nexport var getDefaultMinimapOptions = function getDefaultMinimapOptions() {\n  return {\n    grid: false,\n    enabled: true,\n    width: 200,\n    height: 120,\n    padding: 8,\n    graphOptions: {\n      async: true,\n      getCellView: function getCellView(cell) {\n        if (cell.isNode()) {\n          return SimpleNodeView;\n        }\n      },\n      createCellView: function createCellView(cell) {\n        if (cell.isEdge()) {\n          return null;\n        }\n      }\n    }\n  };\n};\nexport var CanvasMiniMap = function CanvasMiniMap(props) {\n  var nodeFillColor = props.nodeFillColor,\n      _props$borderColor = props.borderColor,\n      borderColor = _props$borderColor === void 0 ? '#ced4de' : _props$borderColor,\n      _props$handlerColor = props.handlerColor,\n      handlerColor = _props$handlerColor === void 0 ? 'rgba(0,0,0,.3)' : _props$handlerColor,\n      _props$miniMapClz = props.miniMapClz,\n      miniMapClz = _props$miniMapClz === void 0 ? '' : _props$miniMapClz,\n      _props$position = props.position,\n      position = _props$position === void 0 ? {\n    bottom: 12,\n    right: 12\n  } : _props$position,\n      _props$minimapOptions = props.minimapOptions,\n      minimapOptions = _props$minimapOptions === void 0 ? {} : _props$minimapOptions;\n  /** x6画布的dom节点 */\n\n  var minimapRef = React.useRef(null);\n  var minimapConfigRef = React.useRef(props.minimapOptions);\n  var classNameSet = React.useMemo(function () {\n    return new Set([miniMapClz, 'xflow-minimap', 'minimap-instacne-' + Date.now().toString()]);\n  }, [miniMapClz]);\n  var getConfig = React.useMemo(function () {\n    return function () {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", Object.assign(Object.assign(Object.assign({}, getDefaultMinimapOptions()), minimapConfigRef.current), {\n                  container: minimapRef.current\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    };\n  }, [minimapRef]);\n  var style = usePositionStyle(position);\n  React.useEffect(function () {\n    /** 设置minimap容器 */\n    minimapConfigRef.current = minimapOptions;\n  }, [minimapConfigRef, minimapOptions]);\n  React.useEffect(function () {\n    /** 设置Node样式 */\n    if (nodeFillColor) {\n      SimpleNodeView.setNodeFillColor(nodeFillColor);\n    }\n  }, [nodeFillColor]);\n  React.useEffect(function () {\n    var containerSelector = Array.from(classNameSet).reduce(function (acc, clz) {\n      return clz ? \"\".concat(acc, \".\").concat(clz) : acc;\n    }, '');\n    var cssString = \"\\n      \".concat(containerSelector, \" .x6-widget-minimap-viewport {\\n        border: 1px solid \").concat(borderColor, \";\\n        margin: 0;\\n      }\\n      \").concat(containerSelector, \" .x6-widget-minimap-viewport-zoom {\\n        border: 1px solid \").concat(handlerColor, \"; \\n      }\\n    \");\n    var $style = insertCss(cssString);\n    return function () {\n      document.head.removeChild($style);\n    };\n  }, [borderColor, classNameSet, handlerColor]);\n  var clzName = Array.from(classNameSet).join(' ');\n  return React.createElement(XFlowAppExtensionMoudle, {\n    config: {\n      getConfig: getConfig,\n      CONFIG_TYPE: CONFIG_TYPE\n    },\n    createModule: createModule\n  }, React.createElement(\"div\", {\n    ref: minimapRef,\n    className: clzName,\n    style: style\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}