{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { ToolsView } from '../../view/tool';\nimport { Point } from '../../geometry';\nimport { Dom, FunctionExt } from '../../util';\nexport var CellEditor = /*#__PURE__*/function (_ToolsView$ToolItem) {\n  _inherits(CellEditor, _ToolsView$ToolItem);\n\n  function CellEditor() {\n    var _this;\n\n    _classCallCheck(this, CellEditor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CellEditor).apply(this, arguments));\n    _this.labelIndex = -1;\n    _this.distance = 0.5;\n    return _this;\n  }\n\n  _createClass(CellEditor, [{\n    key: \"render\",\n    value: function render() {\n      this.createElement();\n      this.update();\n      this.autoFocus();\n      this.delegateDocumentEvents(this.options.documentEvents);\n      return this;\n    }\n  }, {\n    key: \"createElement\",\n    value: function createElement() {\n      var cell = this.cell;\n      var classNames = [this.prefixClassName(\"\".concat(cell.isEdge() ? 'edge' : 'node', \"-tool-editor\")), this.prefixClassName('cell-tool-editor')];\n      this.editor = ToolsView.createElement('div', false);\n      this.addClass(classNames, this.editor);\n      this.editor.contentEditable = 'true';\n      this.container.appendChild(this.editor);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var graph = this.graph,\n          cell = this.cell,\n          editor = this.editor;\n      var style = editor.style; // set tool position\n\n      var pos = new Point();\n      var minWidth = 20;\n\n      if (cell.isNode()) {\n        pos = cell.getBBox().center;\n        minWidth = cell.size().width - 4;\n      } else if (cell.isEdge()) {\n        var e = this.options.event;\n        var target = e.target;\n        var parent = target.parentElement;\n        var isEdgeLabel = parent && Dom.hasClass(parent, this.prefixClassName('edge-label'));\n\n        if (isEdgeLabel) {\n          var index = parent.getAttribute('data-index') || '0';\n          this.labelIndex = parseInt(index, 10);\n          var matrix = parent.getAttribute('transform');\n\n          var _Dom$parseTransformSt = Dom.parseTransformString(matrix),\n              translation = _Dom$parseTransformSt.translation;\n\n          pos = new Point(translation.tx, translation.ty);\n          minWidth = Dom.getBBox(target).width;\n        } else {\n          if (!this.options.labelAddable) {\n            return this;\n          }\n\n          pos = graph.clientToLocal(Point.create(e.clientX, e.clientY));\n          var view = this.cellView;\n          var d = view.path.closestPointLength(pos);\n          this.distance = d;\n        }\n      }\n\n      pos = graph.localToGraph(pos);\n      style.left = \"\".concat(pos.x, \"px\");\n      style.top = \"\".concat(pos.y, \"px\");\n      style.minWidth = \"\".concat(minWidth, \"px\"); // set tool transform\n\n      var scale = graph.scale();\n      style.transform = \"scale(\".concat(scale.sx, \", \").concat(scale.sy, \") translate(-50%, -50%)\"); // set font style\n\n      var attrs = this.options.attrs;\n      style.fontSize = \"\".concat(attrs.fontSize, \"px\");\n      style.fontFamily = attrs.fontFamily;\n      style.color = attrs.color;\n      style.backgroundColor = attrs.backgroundColor; // set init value\n\n      var getText = this.options.getText;\n      var text;\n\n      if (typeof getText === 'function') {\n        text = FunctionExt.call(getText, this.cellView, {\n          cell: this.cell,\n          index: this.labelIndex\n        });\n      }\n\n      editor.innerText = text || '';\n      return this;\n    }\n  }, {\n    key: \"onDocumentMouseDown\",\n    value: function onDocumentMouseDown(e) {\n      if (e.target !== this.editor) {\n        var cell = this.cell;\n        var value = this.editor.innerText.replace(/\\n$/, '') || ''; // set value\n\n        var setText = this.options.setText;\n\n        if (typeof setText === 'function') {\n          FunctionExt.call(setText, this.cellView, {\n            cell: this.cell,\n            value: value,\n            index: this.labelIndex,\n            distance: this.distance\n          });\n        } // remove tool\n\n\n        cell.removeTool(cell.isEdge() ? 'edge-editor' : 'node-editor');\n        this.undelegateDocumentEvents();\n      }\n    }\n  }, {\n    key: \"onDblClick\",\n    value: function onDblClick(e) {\n      e.stopPropagation();\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e) {\n      e.stopPropagation();\n    }\n  }, {\n    key: \"autoFocus\",\n    value: function autoFocus() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.editor.focus();\n\n        _this2.selectText();\n      });\n    }\n  }, {\n    key: \"selectText\",\n    value: function selectText() {\n      if (window.getSelection) {\n        var range = document.createRange();\n        var selection = window.getSelection();\n        range.selectNodeContents(this.editor);\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n    }\n  }]);\n\n  return CellEditor;\n}(ToolsView.ToolItem);\n\n(function (CellEditor) {\n  CellEditor.config({\n    tagName: 'div',\n    isSVGElement: false,\n    events: {\n      dblclick: 'onDblClick',\n      mousedown: 'onMouseDown'\n    },\n    documentEvents: {\n      mousedown: 'onDocumentMouseDown'\n    }\n  });\n})(CellEditor || (CellEditor = {}));\n\n(function (CellEditor) {\n  CellEditor.NodeEditor = CellEditor.define({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff'\n    },\n    getText: function getText(_ref) {\n      var cell = _ref.cell;\n      return cell.attr('text/text');\n    },\n    setText: function setText(_ref2) {\n      var cell = _ref2.cell,\n          value = _ref2.value;\n      cell.attr('text/text', value);\n    }\n  });\n  CellEditor.EdgeEditor = CellEditor.define({\n    attrs: {\n      fontSize: 14,\n      fontFamily: 'Arial, helvetica, sans-serif',\n      color: '#000',\n      backgroundColor: '#fff'\n    },\n    labelAddable: true,\n    getText: function getText(_ref3) {\n      var cell = _ref3.cell,\n          index = _ref3.index;\n\n      if (index === -1) {\n        return '';\n      }\n\n      return cell.prop(\"labels/\".concat(index, \"/attrs/label/text\"));\n    },\n    setText: function setText(_ref4) {\n      var cell = _ref4.cell,\n          value = _ref4.value,\n          index = _ref4.index,\n          distance = _ref4.distance;\n      var edge = cell;\n\n      if (index === -1) {\n        edge.appendLabel({\n          position: {\n            distance: distance\n          },\n          attrs: {\n            label: {\n              text: value\n            }\n          }\n        });\n      } else {\n        if (value) {\n          edge.prop(\"labels/\".concat(index, \"/attrs/label/text\"), value);\n        } else if (typeof index === 'number') {\n          edge.removeLabelAt(index);\n        }\n      }\n    }\n  });\n})(CellEditor || (CellEditor = {}));","map":null,"metadata":{},"sourceType":"module"}