{"ast":null,"code":"import JQuery from 'jquery';\nexport function sanitizeHTML(html) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // If documentContext (second parameter) is not specified or given as\n  // `null` or `undefined`, a new document is used. Inline events will not\n  // execute when the HTML is parsed; this includes, for example, sending\n  // GET requests for images.\n  // If keepScripts (last parameter) is `false`, scripts are not executed.\n  var nodes = JQuery.parseHTML(html, null, false);\n  nodes.forEach(function (node) {\n    var elem = node;\n\n    if (elem) {\n      var attrs = elem.attributes;\n\n      if (attrs) {\n        for (var i = 0, ii = attrs.length; i < ii; i += 1) {\n          var attr = attrs.item(i);\n\n          if (attr) {\n            var val = attr.value.toLowerCase();\n            var name = attr.name.toLowerCase(); // Removes attribute name starts with \"on\" (e.g. onload,\n            // onerror...).\n            // Removes attribute value starts with \"javascript:\" pseudo\n            // protocol (e.g. `href=\"javascript:alert(1)\"`).\n\n            if (name.startsWith('on') || val.startsWith('javascript:') || // eslint-disable-line no-script-url\n            // ref: https://lgtm.com/rules/1510852698359/\n            val.startsWith('data:') || val.startsWith('vbscript:')) {\n              elem.removeAttribute(name);\n            }\n          }\n        }\n      }\n    }\n  });\n\n  if (options.raw) {\n    return nodes;\n  }\n\n  return JQuery('<div/>').append(nodes).html();\n}","map":null,"metadata":{},"sourceType":"module"}