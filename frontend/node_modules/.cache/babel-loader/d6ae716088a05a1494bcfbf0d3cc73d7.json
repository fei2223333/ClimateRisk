{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport clamp from 'clamp';\nimport classNames from 'classnames';\nimport { debounce } from '../util';\nimport { WheelHandler } from '../util/dom/WheelHandler';\nimport { TouchHandler } from '../util/dom/TouchHandler';\nimport { MouseMoveTracker } from '../util/dom/MouseMoveTracker';\nimport { Scrollbar } from '../scrollbar';\nexport var ScrollBox = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ScrollBox, _React$PureComponent);\n\n  function ScrollBox() {\n    var _this;\n\n    _classCallCheck(this, ScrollBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollBox).apply(this, arguments));\n\n    _this.onScroll = function (deltaX, deltaY) {\n      if (!_this.scrolling) {\n        _this.triggerScrollStart();\n      }\n\n      if (Math.abs(deltaY) > Math.abs(deltaX) && _this.state.hasVerticalBar) {\n        _this.scrollVertical(deltaY, true);\n      } else if (deltaX && _this.state.hasHorizontalBar) {\n        _this.scrollHorizontal(deltaX, true);\n      }\n\n      _this.triggerScrollStop();\n    };\n\n    _this.onVerticalScroll = function (scrollY) {\n      if (scrollY === _this.state.scrollTop) {\n        return;\n      }\n\n      if (!_this.scrolling) {\n        _this.triggerScrollStart();\n      }\n\n      _this.scrollVertical(scrollY, false);\n\n      _this.triggerScrollStop();\n    };\n\n    _this.onHorizontalScroll = function (scrollX) {\n      if (scrollX === _this.state.scrollLeft) {\n        return;\n      }\n\n      if (!_this.scrolling) {\n        _this.triggerScrollStart();\n      }\n\n      _this.scrollHorizontal(scrollX, false);\n\n      _this.triggerScrollStop();\n    };\n\n    _this.shouldHandleWheelX = function (delta) {\n      if (!_this.state.hasHorizontalBar || delta === 0) {\n        return false;\n      }\n\n      delta = Math.round(delta); // eslint-disable-line\n\n      if (delta === 0) {\n        return false;\n      }\n\n      return delta < 0 && _this.state.scrollLeft > 0 || delta >= 0 && _this.state.scrollLeft < _this.state.maxScrollLeft;\n    };\n\n    _this.shouldHandleWheelY = function (delta) {\n      if (!_this.state.hasVerticalBar || delta === 0) {\n        return false;\n      }\n\n      delta = Math.round(delta); // eslint-disable-line\n\n      if (delta === 0) {\n        return false;\n      }\n\n      return delta < 0 && _this.state.scrollTop > 0 || delta >= 0 && _this.state.scrollTop < _this.state.maxScrollTop;\n    };\n\n    _this.shouldHandleTouchX = function (delta) {\n      return _this.props.touchable ? _this.shouldHandleWheelX(delta) : false;\n    };\n\n    _this.shouldHandleTouchY = function (delta) {\n      return _this.props.touchable ? _this.shouldHandleWheelY(delta) : false;\n    };\n\n    _this.onMouseDown = function (e) {\n      if (_this.mouseMoveTracker != null) {\n        _this.mouseMoveTracker.capture(e);\n      }\n    };\n\n    _this.onMouseMove = function (deltaX, deltaY) {\n      if (!_this.scrolling) {\n        _this.triggerScrollStart();\n      }\n\n      _this.scrollVertical(deltaY, true);\n\n      _this.scrollHorizontal(deltaX, true);\n    };\n\n    _this.onMouseMoveEnd = function () {\n      if (_this.mouseMoveTracker != null) {\n        _this.mouseMoveTracker.release();\n      }\n\n      _this.triggerScrollStop();\n    };\n\n    _this.refContainer = function (container) {\n      _this.containerElem = container;\n    };\n\n    _this.refContent = function (content) {\n      _this.contentElem = content;\n    };\n\n    _this.onWheel = function (e) {\n      if (_this.wheelHandler != null) {\n        _this.wheelHandler.onWheel(e);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ScrollBox, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.triggerScrollStop = debounce(this.triggerScrollStopSync, 200, this);\n      this.wheelHandler = new WheelHandler({\n        onWheel: this.onScroll,\n        shouldHandleScrollX: this.shouldHandleWheelX,\n        shouldHandleScrollY: this.shouldHandleWheelY,\n        stopPropagation: this.props.stopPropagation\n      });\n\n      if (this.props.touchable) {\n        this.touchHandler = new TouchHandler({\n          onTouchScroll: this.onScroll,\n          shouldHandleScrollX: this.shouldHandleTouchX,\n          shouldHandleScrollY: this.shouldHandleTouchY,\n          stopPropagation: this.props.stopPropagation\n        });\n      }\n\n      if (this.props.dragable) {\n        this.mouseMoveTracker = new MouseMoveTracker({\n          elem: document.documentElement,\n          onMouseMove: this.onMouseMove,\n          onMouseMoveEnd: this.onMouseMoveEnd\n        });\n      }\n\n      this.setState(this.calculateState());\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true;\n      this.setState(this.calculateState());\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this.setState(this.calculateState(nextProps));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.wheelHandler = null;\n\n      if (this.props.touchable) {\n        this.touchHandler = null;\n      }\n\n      if (this.props.dragable && this.mouseMoveTracker != null) {\n        this.mouseMoveTracker.release();\n        this.mouseMoveTracker = null;\n      }\n\n      var triggerScrollStop = this.triggerScrollStop;\n      triggerScrollStop.reset();\n      this.triggerScrollStopSync();\n    }\n  }, {\n    key: \"calculateState\",\n    value: function calculateState() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var containerWidth = props.containerWidth !== undefined && props.containerWidth !== this.props.containerWidth ? props.containerWidth : this.props.containerWidth !== undefined ? this.props.containerWidth : this.containerElem && this.containerElem.clientWidth || 0;\n      var containerHeight = props.containerHeight !== undefined && props.containerHeight !== this.props.containerHeight ? props.containerHeight : this.props.containerHeight !== undefined ? this.props.containerHeight : this.containerElem && this.containerElem.clientHeight || 0;\n      var contentWidth = props.contentWidth !== undefined && props.contentWidth !== this.props.contentWidth ? props.contentWidth : this.props.contentWidth !== undefined ? this.props.contentWidth : this.contentElem && this.contentElem.scrollWidth || 0;\n      var contentHeight = props.contentHeight !== undefined && props.contentHeight !== this.props.contentHeight ? props.contentHeight : this.props.contentHeight !== undefined ? this.props.contentHeight : this.contentElem && this.contentElem.scrollHeight || 0;\n      var hasVerticalBar = contentHeight > containerHeight;\n      var hasHorizontalBar = contentWidth > containerWidth;\n      var scrollTop = 0;\n      var scrollLeft = 0;\n      var maxScrollTop = 0;\n      var maxScrollLeft = 0;\n      var verticalBarHeight = containerHeight;\n      var horizontalBarWidth = containerWidth;\n\n      if (hasVerticalBar) {\n        if (hasHorizontalBar) {\n          verticalBarHeight -= props.scrollbarSize;\n        }\n\n        maxScrollTop = contentHeight - verticalBarHeight;\n\n        if (props.scrollTop !== this.props.scrollTop) {\n          scrollTop = props.scrollTop;\n        } else {\n          scrollTop = (this.state ? this.state.scrollTop : props.scrollTop) || 0;\n        }\n      }\n\n      if (hasHorizontalBar) {\n        if (hasVerticalBar) {\n          horizontalBarWidth -= props.scrollbarSize;\n        }\n\n        maxScrollLeft = contentWidth - horizontalBarWidth;\n\n        if (props.scrollLeft !== this.props.scrollLeft) {\n          scrollLeft = props.scrollLeft;\n        } else {\n          scrollLeft = (this.state ? this.state.scrollLeft : props.scrollLeft) || 0;\n        }\n      }\n\n      var nextState = {\n        containerWidth: containerWidth,\n        containerHeight: containerHeight,\n        contentWidth: contentWidth,\n        contentHeight: contentHeight,\n        verticalBarHeight: verticalBarHeight,\n        horizontalBarWidth: horizontalBarWidth,\n        hasVerticalBar: hasVerticalBar,\n        hasHorizontalBar: hasHorizontalBar,\n        maxScrollTop: maxScrollTop,\n        maxScrollLeft: maxScrollLeft,\n        scrollTop: clamp(scrollTop, 0, maxScrollTop),\n        scrollLeft: clamp(scrollLeft, 0, maxScrollLeft)\n      };\n      return nextState;\n    }\n  }, {\n    key: \"scrollVertical\",\n    value: function scrollVertical(scrollY, relative) {\n      var scrollTop = clamp(relative ? this.state.scrollTop + scrollY : scrollY, 0, this.state.maxScrollTop);\n\n      if (this.props.onVerticalScroll) {\n        this.props.onVerticalScroll(scrollTop);\n      }\n\n      this.setState({\n        scrollTop: scrollTop\n      });\n    }\n  }, {\n    key: \"scrollHorizontal\",\n    value: function scrollHorizontal(scrollX, relative) {\n      var scrollLeft = clamp(relative ? this.state.scrollLeft + scrollX : scrollX, 0, this.state.maxScrollLeft);\n\n      if (this.props.onHorizontalScroll) {\n        this.props.onHorizontalScroll(scrollLeft);\n      }\n\n      this.setState({\n        scrollLeft: scrollLeft\n      });\n    }\n  }, {\n    key: \"triggerScrollStart\",\n    value: function triggerScrollStart() {\n      if (this.scrolling) {\n        return;\n      }\n\n      this.scrolling = true;\n\n      if (this.props.onScrollStart) {\n        this.props.onScrollStart(this.state.scrollLeft, this.state.scrollTop);\n      }\n    }\n  }, {\n    key: \"triggerScrollStopSync\",\n    value: function triggerScrollStopSync() {\n      if (!this.scrolling) {\n        return;\n      }\n\n      this.scrolling = false;\n\n      if (this.props.onScrollEnd) {\n        this.props.onScrollEnd(this.state.scrollLeft, this.state.scrollTop);\n      }\n    }\n  }, {\n    key: \"getScrollbarProps\",\n    value: function getScrollbarProps() {\n      return {\n        zIndex: this.props.zIndex,\n        miniThumbSize: this.props.miniThumbSize,\n        scrollbarSize: this.props.scrollbarSize,\n        keyboardScrollAmount: this.props.keyboardScrollAmount,\n        stopPropagation: true\n      };\n    }\n  }, {\n    key: \"renderVerticalBar\",\n    value: function renderVerticalBar() {\n      if (this.state.hasVerticalBar) {\n        return React.createElement(Scrollbar, Object.assign({\n          orientation: \"vertical\",\n          scrollPosition: this.state.scrollTop,\n          contentSize: this.state.contentHeight,\n          containerSize: this.state.verticalBarHeight,\n          onScroll: this.onVerticalScroll\n        }, this.getScrollbarProps()));\n      }\n    }\n  }, {\n    key: \"renderHorizontalBar\",\n    value: function renderHorizontalBar() {\n      if (this.state.hasHorizontalBar) {\n        return React.createElement(Scrollbar, Object.assign({\n          orientation: \"horizontal\",\n          scrollPosition: this.state.scrollLeft,\n          contentSize: this.state.contentWidth,\n          containerSize: this.state.horizontalBarWidth,\n          onScroll: this.onHorizontalScroll\n        }, this.getScrollbarProps()));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var props = {};\n\n      if (this.props.touchable) {\n        props.onTouchStart = this.touchHandler.onTouchStart;\n        props.onTouchEnd = this.touchHandler.onTouchEnd;\n        props.onTouchMove = this.touchHandler.onTouchMove;\n        props.onTouchCancel = this.touchHandler.onTouchCancel;\n      }\n\n      if (this.props.dragable) {\n        props.onMouseDown = this.onMouseDown;\n      }\n\n      var contentStyle = {};\n      var containerStyle = {};\n\n      if (this.props.containerWidth != null || this.mounted) {\n        containerStyle.width = this.state.containerWidth;\n      }\n\n      if (this.props.containerHeight != null || this.mounted) {\n        containerStyle.height = this.state.containerHeight;\n      }\n\n      if (this.props.contentWidth != null || this.mounted) {\n        contentStyle.width = this.state.contentWidth;\n      }\n\n      if (this.props.contentHeight != null || this.mounted) {\n        contentStyle.height = this.state.contentHeight;\n      }\n\n      if (this.mounted) {\n        contentStyle.transform = \"translate(-\".concat(this.state.scrollLeft, \"px, -\").concat(this.state.scrollTop, \"px)\");\n      }\n\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          scrollbarAutoHide = _this$props.scrollbarAutoHide;\n      var baseCls = \"\".concat(prefixCls, \"-scroll-box\");\n      return React.createElement(\"div\", Object.assign({}, props, {\n        style: Object.assign(Object.assign({}, this.props.containerStyle), containerStyle),\n        ref: this.refContainer,\n        onWheel: this.onWheel,\n        className: classNames(baseCls, _defineProperty({}, \"\".concat(baseCls, \"-auto-hide\"), scrollbarAutoHide), this.props.containerClassName)\n      }), React.createElement(\"div\", {\n        style: Object.assign(Object.assign({}, this.props.contentStyle), contentStyle),\n        ref: this.refContent,\n        className: classNames(\"\".concat(baseCls, \"-content\"), this.props.contentClassName)\n      }, this.props.children), this.renderVerticalBar(), this.renderHorizontalBar());\n    }\n  }]);\n\n  return ScrollBox;\n}(React.PureComponent);\n\n(function (ScrollBox) {\n  ScrollBox.defaultProps = {\n    prefixCls: 'x6',\n    scrollTop: 0,\n    scrollLeft: 0,\n    dragable: true,\n    touchable: true,\n    scrollbarAutoHide: true,\n    scrollbarSize: Scrollbar.defaultProps.scrollbarSize,\n    miniThumbSize: Scrollbar.defaultProps.miniThumbSize,\n    keyboardScrollAmount: Scrollbar.defaultProps.keyboardScrollAmount\n  };\n})(ScrollBox || (ScrollBox = {}));","map":null,"metadata":{},"sourceType":"module"}