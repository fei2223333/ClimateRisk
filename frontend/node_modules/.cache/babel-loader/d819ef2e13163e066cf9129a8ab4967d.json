{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _isNil from \"lodash/isNil\";\n\nvar _dec, _class;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar blur = \"varying vec2 v_UV;\\n\\nuniform float u_BloomFinal: 0.0;\\nuniform sampler2D u_Texture;\\nuniform sampler2D u_Texture2;\\n\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform float u_radius: 5.0;\\nuniform float u_intensity: 0.3;\\nuniform float u_baseRadio: 0.5;\\n\\n// https://github.com/Jam3/glsl-fast-gaussian-blur/blob/master/9.glsl\\nvec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\\n  vec4 color = vec4(0.0);\\n  vec2 off1 = vec2(1.3846153846) * direction;\\n  vec2 off2 = vec2(3.2307692308) * direction;\\n  color += texture2D(image, uv) * 0.2270270270;\\n  color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\\n  color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\\n  color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\\n  return color;\\n}\\n\\nfloat luminance(vec4 color) {\\n  return  0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;\\n}\\n\\nvoid main() {\\n  // vec4 baseColor = texture2D(u_Texture, v_UV);\\n\\n  float r = sqrt(u_radius);\\n\\n  vec4 c1 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(u_radius, 0.0));\\n  // c1 *= luminance(c1);\\n  vec4 c2 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(0.0, u_radius));\\n  // c2 *= luminance(c2);\\n  vec4 c3 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(r, r));\\n  // c3 *= luminance(c3);\\n  vec4 c4 = blur9(u_Texture, v_UV, u_ViewportSize, vec2(r, -r));\\n  // c4 *= luminance(c4);\\n  vec4 inbloomColor = (c1 + c2 + c3 + c4) * 0.25;\\n\\n  // float lum = luminance(inbloomColor);\\n  // inbloomColor.rgb *= lum;\\n\\n  if(u_BloomFinal > 0.0) {\\n    vec4 baseColor = texture2D(u_Texture2, v_UV);\\n    float baselum = luminance(baseColor);\\n    gl_FragColor = mix(inbloomColor, baseColor, u_baseRadio);\\n    if(baselum <= 0.2) {\\n      gl_FragColor = inbloomColor * u_intensity;\\n    }\\n  } else {\\n    gl_FragColor = inbloomColor;\\n  }\\n}\";\nvar quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from '../BasePostProcessingPass';\nvar BloomPass = (_dec = injectable(), _dec(_class = function (_BasePostProcessingPa) {\n  _inherits(BloomPass, _BasePostProcessingPa);\n\n  var _super = _createSuper(BloomPass);\n\n  function BloomPass() {\n    _classCallCheck(this, BloomPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BloomPass, [{\n    key: \"setupShaders\",\n    value: function setupShaders() {\n      this.shaderModuleService.registerModule('blur-pass', {\n        vs: quad,\n        fs: blur\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('blur-pass'),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          uniforms = _this$shaderModuleSer.uniforms;\n\n      var _this$rendererService = this.rendererService.getViewportSize(),\n          width = _this$rendererService.width,\n          height = _this$rendererService.height;\n\n      return {\n        vs: vs,\n        fs: fs,\n        uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n          u_ViewportSize: [width, height]\n        })\n      };\n    }\n  }, {\n    key: \"convertOptionsToUniforms\",\n    value: function convertOptionsToUniforms(options) {\n      var uniforms = {};\n\n      if (!_isNil(options.bloomRadius)) {\n        uniforms.u_radius = options.bloomRadius;\n      }\n\n      if (!_isNil(options.bloomIntensity)) {\n        uniforms.u_intensity = options.bloomIntensity;\n      }\n\n      if (!_isNil(options.bloomBaseRadio)) {\n        uniforms.u_baseRadio = options.bloomBaseRadio;\n      }\n\n      return uniforms;\n    }\n  }]);\n\n  return BloomPass;\n}(BasePostProcessingPass)) || _class);\nexport { BloomPass as default };","map":null,"metadata":{},"sourceType":"module"}