{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { HookHub } from '@antv/xflow-hook';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsMoveNode;\n\n(function (NsMoveNode) {\n  /** Command: 用于注册named factory */\n  NsMoveNode.command = XFlowNodeCommands.MOVE_NODE;\n  /** hookName */\n\n  NsMoveNode.hookKey = 'moveNode';\n  /** 创建 hook */\n\n  NsMoveNode.createHook = function () {\n    return new HookHub();\n  };\n})(NsMoveNode || (NsMoveNode = {}));\n\nvar MoveNodeCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function MoveNodeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, MoveNodeCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context2.next = 5;\n                return hooks.moveNode.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var nodePositionService, canMove, _handlerArgs$position, _handlerArgs$position2, dx, _handlerArgs$position3, dy, x, y, _handlerArgs$position4, duration, x6Graph, node, nextX, nextY, _node$position, preX, preY, undo;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            nodePositionService = handlerArgs.nodePositionService;\n                            /** nodePositionService 返回false时不更新position */\n\n                            if (!nodePositionService) {\n                              _context.next = 7;\n                              break;\n                            }\n\n                            _context.next = 4;\n                            return nodePositionService(handlerArgs);\n\n                          case 4:\n                            canMove = _context.sent;\n\n                            if (canMove) {\n                              _context.next = 7;\n                              break;\n                            }\n\n                            return _context.abrupt(\"return\", {\n                              err: 'service rejected'\n                            });\n\n                          case 7:\n                            _handlerArgs$position = handlerArgs.position, _handlerArgs$position2 = _handlerArgs$position.dx, dx = _handlerArgs$position2 === void 0 ? 0 : _handlerArgs$position2, _handlerArgs$position3 = _handlerArgs$position.dy, dy = _handlerArgs$position3 === void 0 ? 0 : _handlerArgs$position3, x = _handlerArgs$position.x, y = _handlerArgs$position.y, _handlerArgs$position4 = _handlerArgs$position.duration, duration = _handlerArgs$position4 === void 0 ? 150 : _handlerArgs$position4;\n                            _context.next = 10;\n                            return ctx.getX6Graph();\n\n                          case 10:\n                            x6Graph = _context.sent;\n                            node = x6Graph.getCellById(handlerArgs.id);\n\n                            if (!node) {\n                              _context.next = 20;\n                              break;\n                            }\n\n                            nextX = x;\n                            nextY = y;\n                            _node$position = node.position(), preX = _node$position.x, preY = _node$position.y;\n\n                            undo = function undo() {\n                              node.position(preX, preY, {\n                                silent: false\n                              });\n                            };\n\n                            if (dx || dy) {\n                              nextX = dx + preX;\n                              nextY = dy + preY;\n                              node.translate(dx, dy, {\n                                transition: {\n                                  duration: duration\n                                }\n                              });\n\n                              undo = function undo() {\n                                return node.translate(-dx, -dy, {\n                                  transition: {\n                                    duration: duration\n                                  }\n                                });\n                              };\n                            } else {\n                              node.position(nextX, nextY, {\n                                silent: false\n                              });\n                            }\n                            /** add undo  */\n\n\n                            /** add undo  */\n                            ctx.addUndo(Disposable.create(function () {\n                              undo();\n                            }));\n                            return _context.abrupt(\"return\", {\n                              err: null,\n                              nextX: nextX,\n                              nextY: nextY\n                            });\n\n                          case 20:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n                }, runtimeHook);\n\n              case 5:\n                result = _context2.sent;\n                ctx.setResult(result);\n                return _context2.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context3.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context4.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n  }\n\n  _createClass(MoveNodeCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return MoveNodeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], MoveNodeCommand.prototype, \"contextProvider\", void 0);\n\nMoveNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsMoveNode.command.id\n  }\n})\n/** 创建节点命令 */\n], MoveNodeCommand);\nexport { MoveNodeCommand };","map":null,"metadata":{},"sourceType":"module"}