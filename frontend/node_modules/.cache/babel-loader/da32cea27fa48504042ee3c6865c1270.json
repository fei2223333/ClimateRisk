{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar GraphPasteSelectionCommand_1;\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands, XFlowEdgeCommands, XFlowGroupCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nimport { safeJson } from '../../common/safe-json';\nimport { GraphMappingHelper } from '../mapping-service';\nexport var NsGraphPasteSelection;\n\n(function (NsGraphPasteSelection) {\n  /** Command: 用于注册named factory */\n  NsGraphPasteSelection.command = XFlowGraphCommands.GRAPH_PASTE;\n  /** hookName */\n\n  NsGraphPasteSelection.hookKey = 'graphPasteSelection';\n})(NsGraphPasteSelection || (NsGraphPasteSelection = {}));\n\nfunction randomNumber(max) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nvar GraphPasteSelectionCommand = GraphPasteSelectionCommand_1 =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function GraphPasteSelectionCommand() {\n    var _this = this;\n\n    _classCallCheck(this, GraphPasteSelectionCommand);\n\n    this.updateNodeCopiedProps = function (position, nodeConfig) {\n      var dx = randomNumber(100);\n      var dy = randomNumber(100);\n\n      if (position) {\n        dx = nodeConfig.x - position.x + randomNumber(30);\n        dy = nodeConfig.y - position.y + randomNumber(30);\n      } // 修改坐标\n\n\n      nodeConfig.x += dx;\n      nodeConfig.y += dy; // 删除 id\n\n      nodeConfig.originId = nodeConfig.id;\n      delete nodeConfig.id; // 修改label\n\n      nodeConfig.label = \"\".concat(nodeConfig.label, \"_copied\");\n      nodeConfig.isCollapsed = false;\n      return nodeConfig;\n    };\n    /** 执行Cmd */\n\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n\n                if (!GraphPasteSelectionCommand_1.doing) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this);\n\n              case 5:\n                GraphPasteSelectionCommand_1.doing = true;\n                _context5.next = 8;\n                return hooks.graphPasteSelection.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                    var _this3 = this;\n\n                    var commandService, position, jsonString, plainObject, _plainObject$nodes, nodes, _plainObject$edges, edges, _this$mappingHelper$g, normalNodes, groupNodes;\n\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            commandService = handlerArgs.commandService, position = handlerArgs.position;\n                            jsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n                            plainObject = safeJson(jsonString, {\n                              nodes: [],\n                              edges: []\n                            });\n                            _plainObject$nodes = plainObject.nodes, nodes = _plainObject$nodes === void 0 ? [] : _plainObject$nodes, _plainObject$edges = plainObject.edges, edges = _plainObject$edges === void 0 ? [] : _plainObject$edges;\n                            _this$mappingHelper$g = this.mappingHelper.getNodesByType(nodes), normalNodes = _this$mappingHelper$g.normalNodes, groupNodes = _this$mappingHelper$g.groupNodes;\n                            this.mappingHelper.addNodes(nodes); // 添加普通节点\n\n                            _context4.next = 8;\n                            return Promise.all(normalNodes.map(function (nodeConfig) {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                var res, context, cmdResult;\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        _context.next = 2;\n                                        return commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n                                          nodeConfig: this.updateNodeCopiedProps(position, nodeConfig)\n                                        });\n\n                                      case 2:\n                                        res = _context.sent;\n                                        context = res.contextProvider();\n                                        cmdResult = context.getResult();\n                                        this.mappingHelper.buildNodeMapping(nodeConfig, cmdResult.nodeConfig);\n\n                                      case 6:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee, this);\n                              }));\n                            }));\n\n                          case 8:\n                            _context4.next = 10;\n                            return Promise.all(groupNodes.map(function (group) {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                                var groupNodeConfig;\n                                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        groupNodeConfig = this.mappingHelper.buildGroupRelations(group);\n                                        _context2.next = 3;\n                                        return commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n                                          nodeConfig: this.updateNodeCopiedProps(position, groupNodeConfig)\n                                        });\n\n                                      case 3:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2, this);\n                              }));\n                            }));\n\n                          case 10:\n                            _context4.next = 12;\n                            return Promise.all(edges.map(function (edgeConfig) {\n                              var newEdge = _this3.mappingHelper.createEdgeBetweenNodes(edgeConfig);\n\n                              return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                                edgeConfig: newEdge\n                              });\n                            }));\n\n                          case 12:\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                  while (1) {\n                                    switch (_context3.prev = _context3.next) {\n                                      case 0:\n                                        window.localStorage.setItem(LOCAL_STORAGE_KEY, null);\n\n                                      case 1:\n                                      case \"end\":\n                                        return _context3.stop();\n                                    }\n                                  }\n                                }, _callee3);\n                              }));\n                            }));\n                            return _context4.abrupt(\"return\", {\n                              err: null\n                            });\n\n                          case 14:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, this);\n                  }));\n                }, runtimeHook);\n\n              case 8:\n                result = _context5.sent;\n                ctx.setResult(result);\n                GraphPasteSelectionCommand_1.doing = false;\n                return _context5.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context7.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    };\n  }\n\n  _createClass(GraphPasteSelectionCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return GraphPasteSelectionCommand;\n}();\n/** 防止多次执行 */\n\n\nGraphPasteSelectionCommand.doing = false;\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphPasteSelectionCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([inject(GraphMappingHelper), __metadata(\"design:type\", GraphMappingHelper)], GraphPasteSelectionCommand.prototype, \"mappingHelper\", void 0);\n\nGraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphPasteSelection.command.id\n  }\n})\n/** 创建节点命令 */\n], GraphPasteSelectionCommand);\nexport { GraphPasteSelectionCommand };","map":null,"metadata":{},"sourceType":"module"}