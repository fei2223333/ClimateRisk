{"ast":null,"code":"export var DataUri;\n\n(function (DataUri) {\n  function isDataUrl(url) {\n    var prefix = 'data:';\n    return url.substr(0, prefix.length) === prefix;\n  }\n\n  DataUri.isDataUrl = isDataUrl;\n  /**\n   * Converts an image at `url` to base64-encoded data uri.\n   * The mime type of the image is inferred from the `url` file extension.\n   */\n\n  function imageToDataUri(url, callback) {\n    // No need to convert to data uri if it is already in data uri.\n    if (!url || isDataUrl(url)) {\n      // Keep the async nature of the function.\n      setTimeout(function () {\n        return callback(null, url);\n      });\n      return;\n    }\n\n    var onError = function onError() {\n      callback(new Error(\"Failed to load image: \".concat(url)));\n    };\n\n    var onLoad = window.FileReader ? // chrome, IE10+\n    function (xhr) {\n      if (xhr.status === 200) {\n        var reader = new FileReader();\n\n        reader.onload = function (evt) {\n          var dataUri = evt.target.result;\n          callback(null, dataUri);\n        };\n\n        reader.onerror = onError;\n        reader.readAsDataURL(xhr.response);\n      } else {\n        onError();\n      }\n    } : function (xhr) {\n      var toString = function toString(u8a) {\n        var CHUNK_SZ = 0x8000;\n        var c = [];\n\n        for (var i = 0; i < u8a.length; i += CHUNK_SZ) {\n          c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + CHUNK_SZ)));\n        }\n\n        return c.join('');\n      };\n\n      if (xhr.status === 200) {\n        var suffix = url.split('.').pop() || 'png';\n\n        if (suffix === 'svg') {\n          suffix = 'svg+xml';\n        }\n\n        var meta = \"data:image/\".concat(suffix, \";base64,\");\n        var bytes = new Uint8Array(xhr.response);\n        var base64 = meta + btoa(toString(bytes));\n        callback(null, base64);\n      } else {\n        onError();\n      }\n    };\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = window.FileReader ? 'blob' : 'arraybuffer';\n    xhr.open('GET', url, true);\n    xhr.addEventListener('error', onError);\n    xhr.addEventListener('load', function () {\n      return onLoad(xhr);\n    });\n    xhr.send();\n  }\n\n  DataUri.imageToDataUri = imageToDataUri;\n\n  function dataUriToBlob(dataUrl) {\n    var uri = dataUrl.replace(/\\s/g, '');\n    uri = decodeURIComponent(uri);\n    var index = uri.indexOf(',');\n    var dataType = uri.slice(0, index); // e.g. 'data:image/jpeg;base64'\n\n    var mime = dataType.split(':')[1].split(';')[0]; // e.g. 'image/jpeg'\n\n    var data = uri.slice(index + 1);\n    var decodedString;\n\n    if (dataType.indexOf('base64') >= 0) {\n      // data may be encoded in base64\n      decodedString = atob(data);\n    } else {\n      // convert the decoded string to UTF-8\n      decodedString = unescape(encodeURIComponent(data));\n    } // write the bytes of the string to a typed array\n\n\n    var ia = new Uint8Array(decodedString.length);\n\n    for (var i = 0; i < decodedString.length; i += 1) {\n      ia[i] = decodedString.charCodeAt(i);\n    }\n\n    return new Blob([ia], {\n      type: mime\n    });\n  }\n\n  DataUri.dataUriToBlob = dataUriToBlob;\n\n  function downloadBlob(blob, fileName) {\n    var msSaveBlob = window.navigator.msSaveBlob;\n\n    if (msSaveBlob) {\n      // requires IE 10+\n      // pulls up a save dialog\n      msSaveBlob(blob, fileName);\n    } else {\n      // other browsers\n      // downloads directly in Chrome and Safari\n      // presents a save/open dialog in Firefox\n      // Firefox bug: `from` field in save dialog always shows `from:blob:`\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1053327\n      var url = window.URL.createObjectURL(blob);\n      var link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link); // mark the url for garbage collection\n\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  DataUri.downloadBlob = downloadBlob;\n\n  function downloadDataUri(dataUrl, fileName) {\n    var blob = dataUriToBlob(dataUrl);\n    downloadBlob(blob, fileName);\n  }\n\n  DataUri.downloadDataUri = downloadDataUri;\n\n  function parseViewBox(svg) {\n    var matches = svg.match(/<svg[^>]*viewBox\\s*=\\s*([\"']?)(.+?)\\1[^>]*>/i);\n\n    if (matches && matches[2]) {\n      return matches[2].replace(/\\s+/, ' ').split(' ');\n    }\n\n    return null;\n  }\n\n  function getNumber(str) {\n    var ret = parseFloat(str);\n    return Number.isNaN(ret) ? null : ret;\n  }\n\n  function svgToDataUrl(svg) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var viewBox = null;\n\n    var getNumberFromViewBox = function getNumberFromViewBox(index) {\n      if (viewBox == null) {\n        viewBox = parseViewBox(svg);\n      }\n\n      if (viewBox != null) {\n        return getNumber(viewBox[index]);\n      }\n\n      return null;\n    };\n\n    var getNumberFromMatches = function getNumberFromMatches(reg) {\n      var matches = svg.match(reg);\n\n      if (matches && matches[2]) {\n        return getNumber(matches[2]);\n      }\n\n      return null;\n    };\n\n    var w = options.width;\n\n    if (w == null) {\n      w = getNumberFromMatches(/<svg[^>]*width\\s*=\\s*([\"']?)(.+?)\\1[^>]*>/i);\n    }\n\n    if (w == null) {\n      w = getNumberFromViewBox(2);\n    }\n\n    if (w == null) {\n      throw new Error('Can not parse width from svg string');\n    }\n\n    var h = options.height;\n\n    if (h == null) {\n      h = getNumberFromMatches(/<svg[^>]*height\\s*=\\s*([\"']?)(.+?)\\1[^>]*>/i);\n    }\n\n    if (h == null) {\n      h = getNumberFromViewBox(3);\n    }\n\n    if (h == null) {\n      throw new Error('Can not parse height from svg string');\n    }\n\n    var decoded = encodeURIComponent(svg).replace(/'/g, '%27').replace(/\"/g, '%22');\n    var header = 'data:image/svg+xml';\n    var dataUrl = \"\".concat(header, \",\").concat(decoded);\n    return dataUrl;\n  }\n\n  DataUri.svgToDataUrl = svgToDataUrl;\n})(DataUri || (DataUri = {}));","map":null,"metadata":{},"sourceType":"module"}