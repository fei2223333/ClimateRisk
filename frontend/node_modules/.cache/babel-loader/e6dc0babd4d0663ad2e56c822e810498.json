{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Rectangle, Point } from '../geometry';\nimport { ArrayExt, ObjectExt, Dom, FunctionExt, Vector } from '../util';\nimport { Registry } from '../registry/registry';\nimport { ConnectionStrategy } from '../registry/connection-strategy';\nimport { View } from './view';\nimport { Cache } from './cache';\nimport { Markup } from './markup';\nimport { ToolsView } from './tool';\nimport { AttrManager } from './attr';\nimport { FlagManager } from './flag';\nexport var CellView = /*#__PURE__*/function (_View) {\n  _inherits(CellView, _View);\n\n  function CellView(cell) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CellView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CellView).call(this));\n    _this.cell = cell;\n    _this.options = _this.ensureOptions(options);\n    _this.graph = _this.options.graph;\n    _this.attr = new AttrManager(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.flag = new FlagManager(_assertThisInitialized(_assertThisInitialized(_this)), _this.options.actions, _this.options.bootstrap);\n    _this.cache = new Cache(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.setContainer(_this.ensureContainer());\n\n    _this.setup();\n\n    _this.$(_this.container).data('view', _assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.init();\n\n    return _this;\n  }\n\n  _createClass(CellView, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      this.removeTools();\n    }\n  }, {\n    key: \"getConstructor\",\n    value: function getConstructor() {\n      return this.constructor;\n    }\n  }, {\n    key: \"ensureOptions\",\n    value: function ensureOptions(options) {\n      return this.getConstructor().getOptions(options);\n    }\n  }, {\n    key: \"getContainerTagName\",\n    value: function getContainerTagName() {\n      return this.options.isSvgElement ? 'g' : 'div';\n    }\n  }, {\n    key: \"getContainerStyle\",\n    value: function getContainerStyle() {}\n  }, {\n    key: \"getContainerAttrs\",\n    value: function getContainerAttrs() {\n      return {\n        'data-cell-id': this.cell.id,\n        'data-shape': this.cell.shape\n      };\n    }\n  }, {\n    key: \"getContainerClassName\",\n    value: function getContainerClassName() {\n      return this.prefixClassName('cell');\n    }\n  }, {\n    key: \"ensureContainer\",\n    value: function ensureContainer() {\n      return View.createElement(this.getContainerTagName(), this.options.isSvgElement);\n    }\n  }, {\n    key: \"setContainer\",\n    value: function setContainer(container) {\n      if (this.container !== container) {\n        this.undelegateEvents();\n        this.container = container;\n\n        if (this.options.events != null) {\n          this.delegateEvents(this.options.events);\n        }\n\n        var attrs = this.getContainerAttrs();\n\n        if (attrs != null) {\n          this.setAttrs(attrs, container);\n        }\n\n        var style = this.getContainerStyle();\n\n        if (style != null) {\n          this.setStyle(style, container);\n        }\n\n        var className = this.getContainerClassName();\n\n        if (className != null) {\n          this.addClass(className, container);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isNodeView\",\n    value: function isNodeView() {\n      return false;\n    }\n  }, {\n    key: \"isEdgeView\",\n    value: function isEdgeView() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this;\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"confirmUpdate\",\n    value: function confirmUpdate(flag) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return 0;\n    }\n  }, {\n    key: \"getBootstrapFlag\",\n    value: function getBootstrapFlag() {\n      return this.flag.getBootstrapFlag();\n    }\n  }, {\n    key: \"getFlag\",\n    value: function getFlag(actions) {\n      return this.flag.getFlag(actions);\n    }\n  }, {\n    key: \"hasAction\",\n    value: function hasAction(flag, actions) {\n      return this.flag.hasAction(flag, actions);\n    }\n  }, {\n    key: \"removeAction\",\n    value: function removeAction(flag, actions) {\n      return this.flag.removeAction(flag, actions);\n    }\n  }, {\n    key: \"handleAction\",\n    value: function handleAction(flag, action, handle, additionalRemovedActions) {\n      if (this.hasAction(flag, action)) {\n        handle();\n        var removedFlags = [action];\n\n        if (additionalRemovedActions) {\n          if (typeof additionalRemovedActions === 'string') {\n            removedFlags.push(additionalRemovedActions);\n          } else {\n            removedFlags.push.apply(removedFlags, _toConsumableArray(additionalRemovedActions));\n          }\n        }\n\n        return this.removeAction(flag, removedFlags);\n      }\n\n      return flag;\n    }\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      var _this2 = this;\n\n      this.cell.on('changed', function (_ref) {\n        var options = _ref.options;\n        return _this2.onAttrsChange(options);\n      });\n    }\n  }, {\n    key: \"onAttrsChange\",\n    value: function onAttrsChange(options) {\n      var flag = this.flag.getChangedFlag();\n\n      if (options.updated || !flag) {\n        return;\n      }\n\n      if (options.dirty && this.hasAction(flag, 'update')) {\n        flag |= this.getFlag('render'); // eslint-disable-line no-bitwise\n      } // tool changes should be sync render\n\n\n      if (options.toolId) {\n        options.async = false;\n      }\n\n      if (this.graph != null) {\n        this.graph.renderer.requestViewUpdate(this, flag, this.priority, options);\n      }\n    }\n  }, {\n    key: \"parseJSONMarkup\",\n    value: function parseJSONMarkup(markup, rootElem) {\n      var result = Markup.parseJSONMarkup(markup);\n      var selectors = result.selectors;\n      var rootSelector = this.rootSelector;\n\n      if (rootElem && rootSelector) {\n        if (selectors[rootSelector]) {\n          throw new Error('Invalid root selector');\n        }\n\n        selectors[rootSelector] = rootElem;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"can\",\n    value: function can(feature) {\n      var interacting = this.graph.options.interacting;\n\n      if (typeof interacting === 'function') {\n        interacting = FunctionExt.call(interacting, this.graph, this);\n      }\n\n      if (typeof interacting === 'object') {\n        var val = interacting[feature];\n\n        if (typeof val === 'function') {\n          val = FunctionExt.call(val, this.graph, this);\n        }\n\n        return val !== false;\n      }\n\n      if (typeof interacting === 'boolean') {\n        return interacting;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"cleanCache\",\n    value: function cleanCache() {\n      this.cache.clean();\n      return this;\n    }\n  }, {\n    key: \"getCache\",\n    value: function getCache(elem) {\n      return this.cache.get(elem);\n    }\n  }, {\n    key: \"getDataOfElement\",\n    value: function getDataOfElement(elem) {\n      return this.cache.getData(elem);\n    }\n  }, {\n    key: \"getMatrixOfElement\",\n    value: function getMatrixOfElement(elem) {\n      return this.cache.getMatrix(elem);\n    }\n  }, {\n    key: \"getShapeOfElement\",\n    value: function getShapeOfElement(elem) {\n      return this.cache.getShape(elem);\n    }\n  }, {\n    key: \"getScaleOfElement\",\n    value: function getScaleOfElement(node, scalableNode) {\n      var sx;\n      var sy;\n\n      if (scalableNode && scalableNode.contains(node)) {\n        var scale = Dom.scale(scalableNode);\n        sx = 1 / scale.sx;\n        sy = 1 / scale.sy;\n      } else {\n        sx = 1;\n        sy = 1;\n      }\n\n      return {\n        sx: sx,\n        sy: sy\n      };\n    }\n  }, {\n    key: \"getBoundingRectOfElement\",\n    value: function getBoundingRectOfElement(elem) {\n      return this.cache.getBoundingRect(elem);\n    }\n  }, {\n    key: \"getBBoxOfElement\",\n    value: function getBBoxOfElement(elem) {\n      var rect = this.getBoundingRectOfElement(elem);\n      var matrix = this.getMatrixOfElement(elem);\n      var rm = this.getRootRotatedMatrix();\n      var tm = this.getRootTranslatedMatrix();\n      return Dom.transformRectangle(rect, tm.multiply(rm).multiply(matrix));\n    }\n  }, {\n    key: \"getUnrotatedBBoxOfElement\",\n    value: function getUnrotatedBBoxOfElement(elem) {\n      var rect = this.getBoundingRectOfElement(elem);\n      var matrix = this.getMatrixOfElement(elem);\n      var tm = this.getRootTranslatedMatrix();\n      return Dom.transformRectangle(rect, tm.multiply(matrix));\n    }\n  }, {\n    key: \"getBBox\",\n    value: function getBBox() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var bbox;\n\n      if (options.useCellGeometry) {\n        var cell = this.cell;\n        var angle = cell.isNode() ? cell.getAngle() : 0;\n        bbox = cell.getBBox().bbox(angle);\n      } else {\n        bbox = this.getBBoxOfElement(this.container);\n      }\n\n      return this.graph.localToGraph(bbox);\n    }\n  }, {\n    key: \"getRootTranslatedMatrix\",\n    value: function getRootTranslatedMatrix() {\n      var cell = this.cell;\n      var pos = cell.isNode() ? cell.getPosition() : {\n        x: 0,\n        y: 0\n      };\n      return Dom.createSVGMatrix().translate(pos.x, pos.y);\n    }\n  }, {\n    key: \"getRootRotatedMatrix\",\n    value: function getRootRotatedMatrix() {\n      var matrix = Dom.createSVGMatrix();\n      var cell = this.cell;\n      var angle = cell.isNode() ? cell.getAngle() : 0;\n\n      if (angle) {\n        var bbox = cell.getBBox();\n        var cx = bbox.width / 2;\n        var cy = bbox.height / 2;\n        matrix = matrix.translate(cx, cy).rotate(angle).translate(-cx, -cy);\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"findMagnet\",\n    value: function findMagnet() {\n      var elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n      // If the overall cell has set `magnet === false`, then returns\n      // `undefined` to announce there is no magnet found for this cell.\n      // This is especially useful to set on cells that have 'ports'.\n      // In this case, only the ports have set `magnet === true` and the\n      // overall element has `magnet === false`.\n      return this.findByAttr('magnet', elem);\n    }\n  }, {\n    key: \"updateAttrs\",\n    value: function updateAttrs(rootNode, attrs) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (options.rootBBox == null) {\n        options.rootBBox = new Rectangle();\n      }\n\n      if (options.selectors == null) {\n        options.selectors = this.selectors;\n      }\n\n      this.attr.update(rootNode, attrs, options);\n    }\n  }, {\n    key: \"isEdgeElement\",\n    value: function isEdgeElement(magnet) {\n      return this.cell.isEdge() && (magnet == null || magnet === this.container);\n    } // #region highlight\n\n  }, {\n    key: \"prepareHighlight\",\n    value: function prepareHighlight(elem) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var magnet = elem && this.$(elem)[0] || this.container;\n      options.partial = magnet === this.container;\n      return magnet;\n    }\n  }, {\n    key: \"highlight\",\n    value: function highlight(elem) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var magnet = this.prepareHighlight(elem, options);\n      this.notify('cell:highlight', {\n        magnet: magnet,\n        options: options,\n        view: this,\n        cell: this.cell\n      });\n\n      if (this.isEdgeView()) {\n        this.notify('edge:highlight', {\n          magnet: magnet,\n          options: options,\n          view: this,\n          edge: this.cell,\n          cell: this.cell\n        });\n      } else if (this.isNodeView()) {\n        this.notify('node:highlight', {\n          magnet: magnet,\n          options: options,\n          view: this,\n          node: this.cell,\n          cell: this.cell\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"unhighlight\",\n    value: function unhighlight(elem) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var magnet = this.prepareHighlight(elem, options);\n      this.notify('cell:unhighlight', {\n        magnet: magnet,\n        options: options,\n        view: this,\n        cell: this.cell\n      });\n\n      if (this.isNodeView()) {\n        this.notify('node:unhighlight', {\n          magnet: magnet,\n          options: options,\n          view: this,\n          node: this.cell,\n          cell: this.cell\n        });\n      } else if (this.isEdgeView()) {\n        this.notify('edge:unhighlight', {\n          magnet: magnet,\n          options: options,\n          view: this,\n          edge: this.cell,\n          cell: this.cell\n        });\n      }\n\n      return this;\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"notifyUnhighlight\",\n    value: function notifyUnhighlight(magnet, options) {} // #endregion\n\n  }, {\n    key: \"getEdgeTerminal\",\n    value: function getEdgeTerminal(magnet, x, y, edge, type) {\n      var cell = this.cell;\n      var portId = this.findAttr('port', magnet);\n      var selector = magnet.getAttribute('data-selector');\n      var terminal = {\n        cell: cell.id\n      };\n\n      if (selector != null) {\n        terminal.magnet = selector;\n      }\n\n      if (portId != null) {\n        terminal.port = portId;\n\n        if (cell.isNode()) {\n          if (!cell.hasPort(portId) && selector == null) {\n            // port created via the `port` attribute (not API)\n            terminal.selector = this.getSelector(magnet);\n          }\n        }\n      } else if (selector == null && this.container !== magnet) {\n        terminal.selector = this.getSelector(magnet);\n      }\n\n      return this.customizeEdgeTerminal(terminal, magnet, x, y, edge, type);\n    }\n  }, {\n    key: \"customizeEdgeTerminal\",\n    value: function customizeEdgeTerminal(terminal, magnet, x, y, edge, type) {\n      var raw = edge.getStrategy() || this.graph.options.connecting.strategy;\n\n      if (raw) {\n        var name = typeof raw === 'string' ? raw : raw.name;\n        var args = typeof raw === 'string' ? {} : raw.args || {};\n        var registry = ConnectionStrategy.registry;\n\n        if (name) {\n          var fn = registry.get(name);\n\n          if (fn == null) {\n            return registry.onNotFound(name);\n          }\n\n          var result = FunctionExt.call(fn, this.graph, terminal, this, magnet, new Point(x, y), edge, type, args);\n\n          if (result) {\n            return result;\n          }\n        }\n      }\n\n      return terminal;\n    }\n  }, {\n    key: \"getMagnetFromEdgeTerminal\",\n    value: function getMagnetFromEdgeTerminal(terminal) {\n      var cell = this.cell;\n      var root = this.container;\n      var portId = terminal.port;\n      var selector = terminal.magnet;\n      var magnet;\n\n      if (portId != null && cell.isNode() && cell.hasPort(portId)) {\n        magnet = this.findPortElem(portId, selector) || root;\n      } else {\n        if (!selector) {\n          selector = terminal.selector;\n        }\n\n        if (!selector && portId != null) {\n          selector = \"[port=\\\"\".concat(portId, \"\\\"]\");\n        }\n\n        magnet = this.findOne(selector, root, this.selectors);\n      }\n\n      return magnet;\n    } // #region animate\n\n  }, {\n    key: \"animate\",\n    value: function animate(elem, options) {\n      var target = typeof elem === 'string' ? this.findOne(elem) : elem;\n\n      if (target == null) {\n        throw new Error('Invalid animation element.');\n      }\n\n      var parent = target.parentNode;\n\n      var revert = function revert() {\n        if (!parent) {\n          Dom.remove(target);\n        }\n      };\n\n      var vTarget = Vector.create(target);\n\n      if (!parent) {\n        vTarget.appendTo(this.graph.view.stage);\n      }\n\n      var onComplete = options.complete;\n\n      options.complete = function (e) {\n        revert();\n\n        if (onComplete) {\n          onComplete(e);\n        }\n      };\n\n      return vTarget.animate(options);\n    }\n  }, {\n    key: \"animateTransform\",\n    value: function animateTransform(elem, options) {\n      var target = typeof elem === 'string' ? this.findOne(elem) : elem;\n\n      if (target == null) {\n        throw new Error('Invalid animation element.');\n      }\n\n      var parent = target.parentNode;\n\n      var revert = function revert() {\n        if (!parent) {\n          Dom.remove(target);\n        }\n      };\n\n      var vTarget = Vector.create(target);\n\n      if (!parent) {\n        vTarget.appendTo(this.graph.view.stage);\n      }\n\n      var onComplete = options.complete;\n\n      options.complete = function (e) {\n        revert();\n\n        if (onComplete) {\n          onComplete(e);\n        }\n      };\n\n      return vTarget.animateTransform(options);\n    }\n  }, {\n    key: \"hasTools\",\n    value: function hasTools(name) {\n      var tools = this.tools;\n\n      if (tools == null) {\n        return false;\n      }\n\n      if (name == null) {\n        return true;\n      }\n\n      return tools.name === name;\n    }\n  }, {\n    key: \"addTools\",\n    value: function addTools(config) {\n      if (!this.can('toolsAddable')) {\n        return this;\n      }\n\n      this.removeTools();\n\n      if (config) {\n        var tools = ToolsView.isToolsView(config) ? config : new ToolsView(config);\n        this.tools = tools;\n        this.graph.on('tools:hide', this.hideTools, this);\n        this.graph.on('tools:show', this.showTools, this);\n        this.graph.on('tools:remove', this.removeTools, this);\n        tools.config({\n          view: this\n        });\n        tools.mount();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"updateTools\",\n    value: function updateTools() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.tools) {\n        this.tools.update(options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeTools\",\n    value: function removeTools() {\n      if (this.tools) {\n        this.tools.remove();\n        this.graph.off('tools:hide', this.hideTools, this);\n        this.graph.off('tools:show', this.showTools, this);\n        this.graph.off('tools:remove', this.removeTools, this);\n        this.tools = null;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"hideTools\",\n    value: function hideTools() {\n      if (this.tools) {\n        this.tools.hide();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"showTools\",\n    value: function showTools() {\n      if (this.tools) {\n        this.tools.show();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"renderTools\",\n    value: function renderTools() {\n      var tools = this.cell.getTools();\n      this.addTools(tools);\n      return this;\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(name, args) {\n      this.trigger(name, args);\n      this.graph.trigger(name, args);\n      return this;\n    }\n  }, {\n    key: \"getEventArgs\",\n    value: function getEventArgs(e, x, y) {\n      var view = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n      var cell = view.cell;\n\n      if (x == null || y == null) {\n        return {\n          e: e,\n          view: view,\n          cell: cell\n        };\n      }\n\n      return {\n        e: e,\n        x: x,\n        y: y,\n        view: view,\n        cell: cell\n      };\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(e, x, y) {\n      this.notify('cell:click', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onDblClick\",\n    value: function onDblClick(e, x, y) {\n      this.notify('cell:dblclick', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onContextMenu\",\n    value: function onContextMenu(e, x, y) {\n      this.notify('cell:contextmenu', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e, x, y) {\n      if (this.cell.model) {\n        this.cachedModelForMouseEvent = this.cell.model;\n        this.cachedModelForMouseEvent.startBatch('mouse');\n      }\n\n      this.notify('cell:mousedown', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(e, x, y) {\n      this.notify('cell:mouseup', this.getEventArgs(e, x, y));\n\n      if (this.cachedModelForMouseEvent) {\n        this.cachedModelForMouseEvent.stopBatch('mouse', {\n          cell: this.cell\n        });\n        this.cachedModelForMouseEvent = null;\n      }\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(e, x, y) {\n      this.notify('cell:mousemove', this.getEventArgs(e, x, y));\n    }\n  }, {\n    key: \"onMouseOver\",\n    value: function onMouseOver(e) {\n      this.notify('cell:mouseover', this.getEventArgs(e));\n    }\n  }, {\n    key: \"onMouseOut\",\n    value: function onMouseOut(e) {\n      this.notify('cell:mouseout', this.getEventArgs(e));\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter(e) {\n      this.notify('cell:mouseenter', this.getEventArgs(e));\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave(e) {\n      this.notify('cell:mouseleave', this.getEventArgs(e));\n    }\n  }, {\n    key: \"onMouseWheel\",\n    value: function onMouseWheel(e, x, y, delta) {\n      this.notify('cell:mousewheel', Object.assign({\n        delta: delta\n      }, this.getEventArgs(e, x, y)));\n    }\n  }, {\n    key: \"onCustomEvent\",\n    value: function onCustomEvent(e, name, x, y) {\n      this.notify('cell:customevent', Object.assign({\n        name: name\n      }, this.getEventArgs(e, x, y)));\n      this.notify(name, Object.assign({}, this.getEventArgs(e, x, y)));\n    }\n  }, {\n    key: \"onMagnetMouseDown\",\n    value: function onMagnetMouseDown(e, magnet, x, y) {}\n  }, {\n    key: \"onMagnetDblClick\",\n    value: function onMagnetDblClick(e, magnet, x, y) {}\n  }, {\n    key: \"onMagnetContextMenu\",\n    value: function onMagnetContextMenu(e, magnet, x, y) {}\n  }, {\n    key: \"onLabelMouseDown\",\n    value: function onLabelMouseDown(e, x, y) {}\n  }, {\n    key: \"checkMouseleave\",\n    value: function checkMouseleave(e) {\n      var graph = this.graph;\n\n      if (graph.renderer.isAsync()) {\n        // Do the updates of the current view synchronously now\n        graph.renderer.dumpView(this);\n      }\n\n      var target = this.getEventTarget(e, {\n        fromPoint: true\n      });\n      var view = graph.renderer.findViewByElem(target);\n\n      if (view === this) {\n        return;\n      } // Leaving the current view\n\n\n      this.onMouseLeave(e);\n\n      if (!view) {\n        return;\n      } // Entering another view\n\n\n      view.onMouseEnter(e);\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return CellView.toStringTag;\n    }\n  }, {\n    key: \"priority\",\n    get: function get() {\n      return this.options.priority;\n    }\n  }, {\n    key: \"rootSelector\",\n    get: function get() {\n      return this.options.rootSelector;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return this.defaults;\n    }\n  }, {\n    key: \"config\",\n    value: function config(options) {\n      this.defaults = this.getOptions(options);\n    }\n  }, {\n    key: \"getOptions\",\n    value: function getOptions(options) {\n      var mergeActions = function mergeActions(arr1, arr2) {\n        if (arr2 != null) {\n          return ArrayExt.uniq([].concat(_toConsumableArray(Array.isArray(arr1) ? arr1 : [arr1]), _toConsumableArray(Array.isArray(arr2) ? arr2 : [arr2])));\n        }\n\n        return Array.isArray(arr1) ? _toConsumableArray(arr1) : [arr1];\n      };\n\n      var ret = ObjectExt.cloneDeep(this.getDefaults());\n\n      var bootstrap = options.bootstrap,\n          actions = options.actions,\n          events = options.events,\n          documentEvents = options.documentEvents,\n          others = __rest(options, [\"bootstrap\", \"actions\", \"events\", \"documentEvents\"]);\n\n      if (bootstrap) {\n        ret.bootstrap = mergeActions(ret.bootstrap, bootstrap);\n      }\n\n      if (actions) {\n        Object.keys(actions).forEach(function (key) {\n          var val = actions[key];\n          var raw = ret.actions[key];\n\n          if (val && raw) {\n            ret.actions[key] = mergeActions(raw, val);\n          } else if (val) {\n            ret.actions[key] = mergeActions(val);\n          }\n        });\n      }\n\n      if (events) {\n        ret.events = Object.assign(Object.assign({}, ret.events), events);\n      }\n\n      if (options.documentEvents) {\n        ret.documentEvents = Object.assign(Object.assign({}, ret.documentEvents), documentEvents);\n      }\n\n      return ObjectExt.merge(ret, others);\n    }\n  }]);\n\n  return CellView;\n}(View);\nCellView.defaults = {\n  isSvgElement: true,\n  rootSelector: 'root',\n  priority: 0,\n  bootstrap: [],\n  actions: {}\n};\n\n(function (CellView) {\n  CellView.Flag = FlagManager;\n  CellView.Attr = AttrManager;\n})(CellView || (CellView = {}));\n\n(function (CellView) {\n  CellView.toStringTag = \"X6.\".concat(CellView.name);\n\n  function isCellView(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof CellView) {\n      return true;\n    }\n\n    var tag = instance[Symbol.toStringTag];\n    var view = instance;\n\n    if ((tag == null || tag === CellView.toStringTag) && typeof view.isNodeView === 'function' && typeof view.isEdgeView === 'function' && typeof view.confirmUpdate === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  CellView.isCellView = isCellView;\n})(CellView || (CellView = {})); // decorators\n// ----\n\n\n(function (CellView) {\n  function priority(value) {\n    return function (ctor) {\n      ctor.config({\n        priority: value\n      });\n    };\n  }\n\n  CellView.priority = priority;\n\n  function bootstrap(actions) {\n    return function (ctor) {\n      ctor.config({\n        bootstrap: actions\n      });\n    };\n  }\n\n  CellView.bootstrap = bootstrap;\n})(CellView || (CellView = {}));\n\n(function (CellView) {\n  CellView.registry = Registry.create({\n    type: 'view'\n  });\n})(CellView || (CellView = {}));","map":null,"metadata":{},"sourceType":"module"}