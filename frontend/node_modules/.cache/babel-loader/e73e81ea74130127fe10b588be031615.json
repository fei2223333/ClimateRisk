{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/* eslint-disable no-await-in-loop */\n\n/* eslint-disable max-classes-per-file */\n\nimport { inject, singleton, contrib, Contribution } from 'mana-syringe';\nimport { Node as X6Node, Edge as X6Edge } from '@antv/x6';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IGraphCommandService } from '../command/interface';\nimport { IModelService } from '../model-service';\nimport { IFrontendApplicationContribution } from './interface';\nimport { cellsToJson } from '../common/graph-utils';\nexport { IFrontendApplicationContribution } from './interface';\nvar TIMER_WARNING_THRESHOLD = 100;\n\nvar FrontendApplication = /*#__PURE__*/function () {\n  function FrontendApplication() {\n    var _this = this;\n\n    _classCallCheck(this, FrontendApplication);\n\n    /** 获取画布实例 */\n    this.getGraphInstance = function () {\n      return _this.graphProvider.getGraphInstance();\n    };\n    /** 获取画布配置项 */\n\n\n    this.getGraphConfig = function () {\n      return _this.graphProvider.getGraphOptions();\n    };\n    /** 获取画布配置项 */\n\n\n    this.getGraphData = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var graph, cells;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graph = _context.sent;\n                cells = graph.getCells();\n                return _context.abrupt(\"return\", cellsToJson(cells));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n    /** 获取画布所有节点 */\n\n\n    this.getAllNodes = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var graph;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graph = _context2.sent;\n                return _context2.abrupt(\"return\", graph.getNodes());\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /** 获取画布节点 */\n\n\n    this.getNodeById = function (nodeId) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var graph;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graph = _context3.sent;\n                return _context3.abrupt(\"return\", graph.getCellById(nodeId));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** 获取画布所有连线 */\n\n\n    this.getAllEdges = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var graph;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graph = _context4.sent;\n                return _context4.abrupt(\"return\", graph.getEdges());\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** 获取画布连线 */\n\n\n    this.getEdgeById = function (edgeId) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var graph;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graph = _context5.sent;\n                return _context5.abrupt(\"return\", graph.getCellById(edgeId));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n    /** 更新节点样式 */\n\n\n    this.updateNodeAttrs = function (node, attrs) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var x6Node;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(node instanceof X6Node)) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                node.setAttrs(attrs);\n                _context6.next = 8;\n                break;\n\n              case 4:\n                _context6.next = 6;\n                return this.getNodeById(node);\n\n              case 6:\n                x6Node = _context6.sent;\n                x6Node.setAttrs(attrs);\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    };\n    /** 更新连线样式 */\n\n\n    this.updateEdgeAttrs = function (edge, attrs) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var x6Edge;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(edge instanceof X6Edge)) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                edge.setAttrs(attrs);\n                _context7.next = 8;\n                break;\n\n              case 4:\n                _context7.next = 6;\n                return this.getEdgeById(edge);\n\n              case 6:\n                x6Edge = _context7.sent;\n                x6Edge.setAttrs(attrs);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    };\n    /** 平移画布 */\n\n\n    this.translateGraph = function (tx, ty) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var graph, currentTranslate;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graph = _context8.sent;\n                currentTranslate = graph.translate();\n                graph.translate(currentTranslate.tx + tx, currentTranslate.ty + ty);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    };\n  }\n  /** 启动app */\n\n\n  _createClass(FrontendApplication, [{\n    key: \"start\",\n    value: function start() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.startContributions();\n\n              case 2:\n                this.registerEventListeners();\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n    /** 暴露命令的执行接口 */\n\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(commandId, cmdArgs) {\n      var hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return this.commandService.executeCommand(commandId, cmdArgs, hook);\n    }\n    /** 暴露命令的批量执行接口 */\n\n  }, {\n    key: \"executeCommandPipeline\",\n    value: function executeCommandPipeline(cmdOptions) {\n      return this.commandService.executeCommandPipeline(cmdOptions);\n    }\n    /**\n     * Register global event listeners.\n     */\n\n  }, {\n    key: \"registerEventListeners\",\n    value: function registerEventListeners() {\n      var _this2 = this;\n\n      /** 触发app的卸载逻辑 */\n      window.addEventListener('unload', function () {\n        _this2.stopContributions();\n      });\n    }\n    /**\n     * Initialize and start the frontend application contributions.\n     */\n\n  }, {\n    key: \"startContributions\",\n    value: function startContributions() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var _this3 = this;\n\n        var _iterator, _step, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                console.log(this.contributions.getContributions());\n                _iterator = _createForOfIteratorHelper(this.contributions.getContributions());\n                _context11.prev = 2;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var contribution;\n                  return _regeneratorRuntime.wrap(function _loop$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          contribution = _step.value;\n\n                          if (!contribution.onStart) {\n                            _context10.next = 10;\n                            break;\n                          }\n\n                          _context10.prev = 2;\n                          _context10.next = 5;\n                          return _this3.measure(\"\".concat(contribution.constructor.name, \".onStart\"), function () {\n                            return contribution.onStart(_this3);\n                          });\n\n                        case 5:\n                          _context10.next = 10;\n                          break;\n\n                        case 7:\n                          _context10.prev = 7;\n                          _context10.t0 = _context10[\"catch\"](2);\n                          console.error('Could not start contribution', _context10.t0);\n\n                        case 10:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _loop, null, [[2, 7]]);\n                });\n\n                _iterator.s();\n\n              case 5:\n                if ((_step = _iterator.n()).done) {\n                  _context11.next = 9;\n                  break;\n                }\n\n                return _context11.delegateYield(_loop(), \"t0\", 7);\n\n              case 7:\n                _context11.next = 5;\n                break;\n\n              case 9:\n                _context11.next = 14;\n                break;\n\n              case 11:\n                _context11.prev = 11;\n                _context11.t1 = _context11[\"catch\"](2);\n\n                _iterator.e(_context11.t1);\n\n              case 14:\n                _context11.prev = 14;\n\n                _iterator.f();\n\n                return _context11.finish(14);\n\n              case 17:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee10, this, [[2, 11, 14, 17]]);\n      }));\n    }\n    /**\n     * Stop the frontend application contributions. This is called when the window is unloaded.\n     */\n\n  }, {\n    key: \"stopContributions\",\n    value: function stopContributions() {\n      console.info('>>> Stopping frontend contributions...');\n\n      var _iterator2 = _createForOfIteratorHelper(this.contributions.getContributions()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var contribution = _step2.value;\n\n          if (contribution.onStop) {\n            try {\n              contribution.onStop(this);\n            } catch (error) {\n              console.error('Could not stop contribution', error);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      console.info('<<< All frontend contributions have been stopped.');\n    }\n  }, {\n    key: \"measure\",\n    value: function measure(name, fn) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var startMark, endMark, result, _iterator3, _step3, item, contribution;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                startMark = \"\".concat(name, \"-start\");\n                endMark = \"\".concat(name, \"-end\");\n                performance.mark(startMark);\n                _context12.next = 5;\n                return fn();\n\n              case 5:\n                result = _context12.sent;\n                performance.mark(endMark);\n                performance.measure(name, startMark, endMark);\n                _iterator3 = _createForOfIteratorHelper(performance.getEntriesByName(name));\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    item = _step3.value;\n                    contribution = \"Frontend \".concat(item.name);\n\n                    if (item.duration > TIMER_WARNING_THRESHOLD) {\n                      console.warn(\"\".concat(contribution, \" is slow, took: \").concat(item.duration.toFixed(1), \" ms\"));\n                    } else {\n                      console.debug(\"\".concat(contribution, \" took: \").concat(item.duration.toFixed(1), \" ms\"));\n                    }\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                performance.clearMeasures(name);\n                return _context12.abrupt(\"return\", result);\n\n              case 12:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee11);\n      }));\n    }\n  }]);\n\n  return FrontendApplication;\n}();\n\n__decorate([contrib(IFrontendApplicationContribution), __metadata(\"design:type\", Object)], FrontendApplication.prototype, \"contributions\", void 0);\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], FrontendApplication.prototype, \"graphProvider\", void 0);\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], FrontendApplication.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], FrontendApplication.prototype, \"modelService\", void 0);\n\nFrontendApplication = __decorate([singleton()], FrontendApplication);\nexport { FrontendApplication };","map":null,"metadata":{},"sourceType":"module"}