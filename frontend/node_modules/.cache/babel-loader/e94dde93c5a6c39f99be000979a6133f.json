{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport { debounce } from 'lodash'; // 解决配置共享问题\n\nexport var globalProps = {\n  config: {}\n};\nexport var setProps = function setProps(props) {\n  globalProps.config = Object.assign({}, globalProps.config, props);\n};\nexport var getProps = function getProps(key) {\n  var _a;\n\n  return (_a = globalProps.config) === null || _a === void 0 ? void 0 : _a[key];\n};\nvar graphInstance = new Map();\nvar appInstance = new Map();\nexport var setInstance = function setInstance(app) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var x6graph;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return app.getGraphInstance();\n\n          case 2:\n            x6graph = _context.sent;\n            graphInstance.set('x6graph', x6graph);\n            appInstance.set('app', app);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\nexport var getGraphInstance = function getGraphInstance() {\n  return graphInstance.get('x6graph');\n};\nexport var getAppInstance = function getAppInstance() {\n  return appInstance.get('app');\n};\nexport var getGraphData = function getGraphData() {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var app;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            app = getAppInstance();\n            return _context2.abrupt(\"return\", app.getGraphData());\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n};\n/** 更新配置时通知上传执行保存 */\n\nexport var onConfigChange = debounce(function (config) {\n  var configChange = getProps('onConfigChange');\n\n  if (!configChange || typeof configChange !== 'function') {\n    return;\n  }\n\n  return configChange(Object.assign({\n    data: getGraphData()\n  }, config));\n}, 300, {\n  trailing: true\n});","map":null,"metadata":{},"sourceType":"module"}