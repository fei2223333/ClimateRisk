{"ast":null,"code":"import util from './util';\n\nvar addBorderSegments = function addBorderSegments(g) {\n  var _a;\n\n  var dfs = function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n\n    if (children === null || children === void 0 ? void 0 : children.length) {\n      children.forEach(function (child) {\n        return dfs(child);\n      });\n    }\n\n    if (node.hasOwnProperty('minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\n        addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\n      }\n    }\n  };\n\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n    return dfs(child);\n  });\n};\n\nvar addBorderNode = function addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = {\n    rank: rank,\n    width: 0,\n    height: 0,\n    borderType: prop\n  };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, \"border\", label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n\n  if (prev) {\n    g.setEdge(prev, curr, {\n      weight: 1\n    });\n  }\n};\n\nexport default addBorderSegments;","map":null,"metadata":{},"sourceType":"module"}