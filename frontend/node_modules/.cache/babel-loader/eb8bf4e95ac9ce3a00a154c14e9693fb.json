{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _Symbol$iterator;\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nimport { Disposable } from './disposable';\nexport var Event;\n\n(function (Event) {\n  Event.None = function () {\n    return Disposable.NONE;\n  };\n\n  function map(event, mapFunc) {\n    return function (listener, context) {\n      return event(function (i) {\n        return listener.call(context, mapFunc(i));\n      }, undefined);\n    };\n  }\n\n  Event.map = map;\n})(Event || (Event = {}));\n\n_Symbol$iterator = Symbol.iterator;\n\nvar CallbackList = /*#__PURE__*/function () {\n  function CallbackList() {\n    var mono = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    _classCallCheck(this, CallbackList);\n\n    this.mono = void 0;\n    this._callbacks = void 0;\n    this.mono = mono;\n  }\n\n  _createClass(CallbackList, [{\n    key: \"add\",\n    value: function add(callback) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      this.callbacks.push([callback, context]);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(callback) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      if (this.isEmpty()) return;\n      var foundCallbackWithDifferentContext = false;\n\n      for (var i = 0; i < this.length; i += 1) {\n        if (this.callbacks[i][0] === callback) {\n          if (this.callbacks[i][1] === context) {\n            // remove when callback & context match\n            this.callbacks.splice(i, 1);\n            return;\n          }\n\n          foundCallbackWithDifferentContext = true;\n        }\n      }\n\n      if (foundCallbackWithDifferentContext) {\n        throw new Error('You should remove it with the same context you add it');\n      }\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      if (this.isEmpty()) {\n        return [][Symbol.iterator]();\n      }\n\n      var callbacks = this.callbacks.slice(0);\n      return callbacks.map(function (callback) {\n        return function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return callback[0].apply(callback[1], args);\n        };\n      })[Symbol.iterator]();\n    }\n  }, {\n    key: \"invoke\",\n    value: function invoke() {\n      var ret = [];\n\n      var _iterator = _createForOfIteratorHelper(this),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var callback = _step.value;\n\n          try {\n            ret.push(callback.apply(void 0, arguments));\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.callbacks.length === 0;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._callbacks = undefined;\n    }\n  }, {\n    key: \"callbacks\",\n    get: function get() {\n      if (!this._callbacks) {\n        this._callbacks = [];\n      }\n\n      return this._callbacks;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.callbacks.length;\n    }\n  }]);\n\n  return CallbackList;\n}();\n\nexport var Emitter = /*#__PURE__*/function () {\n  function Emitter() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Emitter);\n\n    this.options = void 0;\n    this._event = void 0;\n    this._callbacks = void 0;\n    this.disposed = false;\n    this.options = options;\n  }\n\n  _createClass(Emitter, [{\n    key: \"fire\",\n    value: function fire(event) {\n      if (!this._callbacks) {\n        return;\n      }\n\n      this.callbacks.invoke(event);\n    }\n    /**\n     * Process each listener one by one.\n     * Return `false` to stop iterating over the listeners, `true` to continue.\n     */\n\n  }, {\n    key: \"sequence\",\n    value: function () {\n      var _sequence = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(processor) {\n        var _iterator2, _step2, listener, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(this.callbacks);\n                _context.prev = 1;\n\n                _iterator2.s();\n\n              case 3:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 12;\n                  break;\n                }\n\n                listener = _step2.value;\n                _context.next = 7;\n                return processor(listener);\n\n              case 7:\n                result = _context.sent;\n\n                if (result) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"break\", 12);\n\n              case 10:\n                _context.next = 3;\n                break;\n\n              case 12:\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](1);\n\n                _iterator2.e(_context.t0);\n\n              case 17:\n                _context.prev = 17;\n\n                _iterator2.f();\n\n                return _context.finish(17);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 14, 17, 20]]);\n      }));\n\n      function sequence(_x) {\n        return _sequence.apply(this, arguments);\n      }\n\n      return sequence;\n    }()\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._callbacks) {\n        this._callbacks.dispose();\n\n        this._callbacks = undefined;\n      }\n\n      this.disposed = true;\n    }\n  }, {\n    key: \"callbacks\",\n    get: function get() {\n      if (!this._callbacks) {\n        this._callbacks = new CallbackList();\n      }\n\n      return this._callbacks;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n\n  }, {\n    key: \"event\",\n    get: function get() {\n      var _this = this;\n\n      if (!this._event) {\n        this._event = function (listener, thisArgs) {\n          if (_this.options.onFirstListenerAdd && _this.callbacks.isEmpty()) {\n            _this.options.onFirstListenerAdd(_this);\n          }\n\n          _this.callbacks.add(listener, thisArgs);\n\n          var result = {\n            dispose: function dispose() {\n              result.dispose = Emitter.noop;\n\n              if (!_this.disposed) {\n                _this.callbacks.remove(listener, thisArgs);\n\n                result.dispose = Emitter.noop;\n\n                if (_this.options.onLastListenerRemove && _this.callbacks.isEmpty()) {\n                  _this.options.onLastListenerRemove(_this);\n                }\n              }\n            }\n          };\n          return result;\n        };\n      }\n\n      return this._event;\n    }\n  }]);\n\n  return Emitter;\n}();\n\nEmitter.noop = function () {};","map":null,"metadata":{},"sourceType":"module"}