{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport clamp from 'clamp';\nimport classNames from 'classnames';\nimport { Box } from './box';\nimport { Resizer } from './resizer';\nexport var SplitBox = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(SplitBox, _React$PureComponent);\n\n  function SplitBox(props) {\n    var _this;\n\n    _classCallCheck(this, SplitBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SplitBox).call(this, props));\n\n    _this.onMouseDown = function () {\n      var _this$getRange = _this.getRange(),\n          maxSize = _this$getRange.maxSize,\n          minSize = _this$getRange.minSize;\n\n      _this.minSize = minSize;\n      _this.maxSize = maxSize;\n      _this.curSize = _this.getPrimarySize();\n      _this.rawSize = _this.curSize;\n      _this.resizing = true;\n\n      _this.createMask();\n\n      _this.updateCursor(_this.curSize, minSize, maxSize);\n    };\n\n    _this.onMouseMove = function (deltaX, deltaY) {\n      if (_this.props.resizable && _this.resizing) {\n        var delta = _this.getDelta(deltaX, deltaY);\n\n        if (delta === 0) {\n          return;\n        }\n\n        if (_this.rawSize < _this.minSize || _this.rawSize > _this.maxSize) {\n          _this.rawSize -= delta;\n          return;\n        }\n\n        _this.rawSize -= delta;\n        _this.curSize = _this.rawSize;\n        _this.curSize = clamp(_this.curSize, _this.minSize, _this.maxSize);\n\n        _this.setPrimarySize(_this.curSize);\n\n        _this.updateCursor(_this.curSize, _this.minSize, _this.maxSize);\n\n        if (_this.props.onResizing) {\n          _this.props.onResizing(_this.curSize);\n        }\n      }\n    };\n\n    _this.onMouseMoveEnd = function () {\n      if (_this.props.resizable && _this.resizing) {\n        if (_this.props.onResizeEnd) {\n          _this.props.onResizeEnd(_this.curSize);\n        }\n\n        if (_this.props.refresh) {\n          var isPrimaryFirst = _this.isPrimaryFirst();\n\n          _this.setState({\n            box1Size: isPrimaryFirst ? _this.curSize : undefined,\n            box2Size: isPrimaryFirst ? undefined : _this.curSize\n          });\n        }\n\n        _this.resizing = false;\n\n        _this.removeMask();\n      }\n    };\n\n    _this.refContainer = function (container) {\n      _this.container = container;\n    };\n\n    _this.refResizer = function (elem) {\n      _this.resizerElem = elem;\n    };\n\n    _this.state = _this.getNextState(props);\n    return _this;\n  }\n\n  _createClass(SplitBox, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var nextState = this.getNextState(nextProps);\n      this.setState(nextState);\n    }\n  }, {\n    key: \"getNextState\",\n    value: function getNextState(props) {\n      var size = props.size,\n          defaultSize = props.defaultSize,\n          primary = props.primary;\n      var initialSize = size != null ? size : defaultSize != null ? defaultSize : '25%';\n      return {\n        box1Size: primary === 'first' ? initialSize : undefined,\n        box2Size: primary === 'second' ? initialSize : undefined\n      };\n    }\n  }, {\n    key: \"isVertical\",\n    value: function isVertical() {\n      return this.props.split === 'vertical';\n    }\n  }, {\n    key: \"isPrimaryFirst\",\n    value: function isPrimaryFirst() {\n      return this.props.primary === 'first';\n    }\n  }, {\n    key: \"getDelta\",\n    value: function getDelta(deltaX, deltaY) {\n      var step = this.props.step;\n      var isVertical = this.isVertical();\n      var isPrimaryFirst = this.isPrimaryFirst();\n      var delta = isVertical ? deltaX : deltaY;\n\n      if (delta === 0) {\n        return 0;\n      }\n\n      if (step && Math.abs(delta) >= step) {\n        delta = ~~(delta / step) * step; // eslint-disable-line\n      }\n\n      delta = isPrimaryFirst ? -delta : delta;\n      var primaryBox = isPrimaryFirst ? this.box1Elem : this.box2Elem;\n      var secondBox = isPrimaryFirst ? this.box2Elem : this.box1Elem;\n      var box1Order = parseInt(window.getComputedStyle(primaryBox).order, 10);\n      var box2Order = parseInt(window.getComputedStyle(secondBox).order, 10);\n\n      if (box1Order > box2Order) {\n        delta = -delta;\n      }\n\n      return delta;\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      var _this$props = this.props,\n          maxSize = _this$props.maxSize,\n          minSize = _this$props.minSize;\n      var containerRect = this.container.getBoundingClientRect();\n      var containerSize = this.isVertical() ? containerRect.width : containerRect.height;\n      var newMinSize = minSize !== undefined ? minSize : 0;\n      var newMaxSize = maxSize !== undefined ? maxSize : 0;\n\n      while (newMinSize < 0) {\n        newMinSize = containerSize + newMinSize;\n      }\n\n      while (newMaxSize <= 0) {\n        newMaxSize = containerSize + newMaxSize;\n      }\n\n      return {\n        minSize: clamp(newMinSize, 0, containerSize),\n        maxSize: clamp(newMaxSize, 0, containerSize)\n      };\n    }\n  }, {\n    key: \"getPrimarySize\",\n    value: function getPrimarySize() {\n      var primaryBox = this.isPrimaryFirst() ? this.box1Elem : this.box2Elem;\n      return this.isVertical() ? primaryBox.getBoundingClientRect().width : primaryBox.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"setPrimarySize\",\n    value: function setPrimarySize(size) {\n      var isFirstPrimary = this.isPrimaryFirst();\n      var primaryBox = isFirstPrimary ? this.box1Elem : this.box2Elem;\n      var secondBox = isFirstPrimary ? this.box2Elem : this.box1Elem;\n      var resizerElem = this.resizerElem;\n      var value = \"\".concat(size, \"px\");\n\n      if (this.isVertical()) {\n        primaryBox.style.width = value;\n\n        if (isFirstPrimary) {\n          secondBox.style.left = value;\n          resizerElem.style.left = value;\n        } else {\n          secondBox.style.right = value;\n          resizerElem.style.right = value;\n        }\n      } else {\n        primaryBox.style.height = value;\n\n        if (isFirstPrimary) {\n          secondBox.style.top = value;\n          resizerElem.style.top = value;\n        } else {\n          secondBox.style.bottom = value;\n          resizerElem.style.bottom = value;\n        }\n      }\n    }\n  }, {\n    key: \"updateCursor\",\n    value: function updateCursor(size, minSize, maxSize) {\n      var cursor = '';\n\n      if (this.isVertical()) {\n        if (size === minSize) {\n          cursor = this.isPrimaryFirst() ? 'e-resize' : 'w-resize';\n        } else if (size === maxSize) {\n          cursor = this.isPrimaryFirst() ? 'w-resize' : 'e-resize';\n        } else {\n          cursor = 'col-resize';\n        }\n      } else if (size === minSize) {\n        cursor = this.isPrimaryFirst() ? 's-resize' : 'n-resize';\n      } else if (size === maxSize) {\n        cursor = this.isPrimaryFirst() ? 'n-resize' : 's-resize';\n      } else {\n        cursor = 'row-resize';\n      }\n\n      this.maskElem.style.cursor = cursor;\n    }\n  }, {\n    key: \"createMask\",\n    value: function createMask() {\n      var mask = document.createElement('div');\n      mask.style.position = 'absolute';\n      mask.style.top = '0';\n      mask.style.right = '0';\n      mask.style.bottom = '0';\n      mask.style.left = '0';\n      mask.style.zIndex = '9999';\n      document.body.appendChild(mask);\n      this.maskElem = mask;\n    }\n  }, {\n    key: \"removeMask\",\n    value: function removeMask() {\n      if (this.maskElem.parentNode) {\n        this.maskElem.parentNode.removeChild(this.maskElem);\n      }\n    }\n  }, {\n    key: \"renderBox\",\n    value: function renderBox(baseCls, index) {\n      var _this2 = this;\n\n      var primary = index === 1 ? 'first' : 'second';\n      var isPrimary = this.props.primary === primary;\n      var currentSize = index === 1 ? this.state.box1Size : this.state.box2Size;\n      var oppositeSize = index === 1 ? this.state.box2Size : this.state.box1Size;\n      var style = Object.assign(Object.assign({}, this.props.boxStyle), isPrimary ? this.props.primaryBoxStyle : this.props.secondBoxStyle);\n      var classes = classNames(\"\".concat(baseCls, \"-item\"), isPrimary ? \"\".concat(baseCls, \"-item-primary\") : \"\".concat(baseCls, \"-item-second\"));\n\n      var ref = function ref(elem) {\n        if (index === 1) {\n          _this2.box1Elem = elem;\n        } else {\n          _this2.box2Elem = elem;\n        }\n      };\n\n      var children = this.props.children;\n      return React.createElement(Box, {\n        key: \"box\".concat(index),\n        refIt: ref,\n        style: style,\n        index: index,\n        className: classes,\n        currentSize: currentSize,\n        oppositeSize: oppositeSize,\n        vertical: this.isVertical(),\n        isPrimary: isPrimary\n      }, children[index - 1]);\n    }\n  }, {\n    key: \"renderResizer\",\n    value: function renderResizer(baseCls) {\n      var style = Object.assign({}, this.props.resizerStyle);\n      style.position = 'absolute';\n      style.zIndex = 2;\n\n      if (this.isVertical()) {\n        style.top = 0;\n        style.bottom = 0;\n\n        if (this.props.resizable === true) {\n          style.cursor = 'col-resize';\n        }\n\n        if (this.isPrimaryFirst()) {\n          style.left = this.state.box1Size;\n        } else {\n          style.right = this.state.box2Size;\n        }\n      } else {\n        style.left = 0;\n        style.right = 0;\n\n        if (this.props.resizable === true) {\n          style.cursor = 'row-resize';\n        }\n\n        if (this.isPrimaryFirst()) {\n          style.top = this.state.box1Size;\n        } else {\n          style.bottom = this.state.box2Size;\n        }\n      }\n\n      return React.createElement(Resizer, {\n        key: \"resizer\",\n        style: style,\n        className: \"\".concat(baseCls, \"-resizer\"),\n        refIt: this.refResizer,\n        onClick: this.props.onResizerClick,\n        onMouseDown: this.onMouseDown,\n        onMouseMove: this.onMouseMove,\n        onMouseMoveEnd: this.onMouseMoveEnd,\n        onDoubleClick: this.props.onResizerDoubleClick\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var style = Object.assign(Object.assign({}, this.props.style), {\n        overflow: 'hidden',\n        position: 'relative',\n        width: '100%',\n        height: '100%'\n      });\n      var baseCls = \"\".concat(this.props.prefixCls, \"-split-box\");\n      var classes = classNames(baseCls, \"\".concat(baseCls, \"-\").concat(this.props.split), _defineProperty({}, \"\".concat(baseCls, \"-disabled\"), !this.props.resizable));\n      return React.createElement(\"div\", {\n        style: style,\n        className: classes,\n        ref: this.refContainer\n      }, this.renderBox(baseCls, 1), this.renderResizer(baseCls), this.renderBox(baseCls, 2));\n    }\n  }]);\n\n  return SplitBox;\n}(React.PureComponent);\n\n(function (SplitBox) {\n  SplitBox.defaultProps = {\n    resizable: true,\n    split: 'vertical',\n    primary: 'first',\n    prefixCls: 'x6',\n    defaultSize: '25%'\n  };\n})(SplitBox || (SplitBox = {}));","map":null,"metadata":{},"sourceType":"module"}