{"ast":null,"code":"import { Point, Path } from '../../geometry';\nexport var rounded = function rounded(sourcePoint, targetPoint, routePoints) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var path = new Path();\n  path.appendSegment(Path.createSegment('M', sourcePoint));\n  var f13 = 1 / 3;\n  var f23 = 2 / 3;\n  var radius = options.radius || 10;\n  var prevDistance;\n  var nextDistance;\n\n  for (var i = 0, ii = routePoints.length; i < ii; i += 1) {\n    var curr = Point.create(routePoints[i]);\n    var prev = routePoints[i - 1] || sourcePoint;\n    var next = routePoints[i + 1] || targetPoint;\n    prevDistance = nextDistance || curr.distance(prev) / 2;\n    nextDistance = curr.distance(next) / 2;\n    var startMove = -Math.min(radius, prevDistance);\n    var endMove = -Math.min(radius, nextDistance);\n    var roundedStart = curr.clone().move(prev, startMove).round();\n    var roundedEnd = curr.clone().move(next, endMove).round();\n    var control1 = new Point(f13 * roundedStart.x + f23 * curr.x, f23 * curr.y + f13 * roundedStart.y);\n    var control2 = new Point(f13 * roundedEnd.x + f23 * curr.x, f23 * curr.y + f13 * roundedEnd.y);\n    path.appendSegment(Path.createSegment('L', roundedStart));\n    path.appendSegment(Path.createSegment('C', control1, control2, roundedEnd));\n  }\n\n  path.appendSegment(Path.createSegment('L', targetPoint));\n  return options.raw ? path : path.serialize();\n};","map":null,"metadata":{},"sourceType":"module"}