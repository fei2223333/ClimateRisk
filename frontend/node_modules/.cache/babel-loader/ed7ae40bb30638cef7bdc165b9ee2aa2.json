{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { useXFlowApp, getNodeReactComponent } from '@antv/xflow-core';\nimport { Addon } from '@antv/x6';\nimport { XFlowNode } from '../../canvas-dag-extension/x6-extension/node';\nexport var defaultNodeFactory = function defaultNodeFactory(args) {\n  return new XFlowNode(args);\n};\nexport var useGraphDnd = function useGraphDnd(props) {\n  var x6NodeFactory = props.x6NodeFactory,\n      dndOptions = props.dndOptions,\n      onNodeDrop = props.onNodeDrop;\n\n  var _useXFlowApp = useXFlowApp(),\n      graphProvider = _useXFlowApp.graphProvider,\n      modelService = _useXFlowApp.modelService,\n      commandService = _useXFlowApp.commandService;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      graphConfig = _React$useState2[0],\n      setConfig = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      dnd = _React$useState4[0],\n      setDnd = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      graph = _React$useState6[0],\n      setGraph = _React$useState6[1];\n  /** 引用 graph 配置 */\n\n\n  React.useEffect(function () {\n    graphProvider.getGraphInstance().then(function (x6Graph) {\n      setGraph(x6Graph);\n    });\n    graphProvider.getGraphOptions().then(function (x6GraphConfig) {\n      setConfig(x6GraphConfig);\n    });\n  }, [graphProvider, setGraph, setConfig]);\n  /** 初始化 Dnd 实例 */\n\n  React.useEffect(function () {\n    if (!graph) {\n      return;\n    }\n\n    var dndInstance = new Addon.Dnd(Object.assign(Object.assign({\n      scaled: false,\n      animation: false\n    }, dndOptions), {\n      target: graph,\n\n      /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n       * 在validateNode时调用command添加\n       */\n      validateNode: function validateNode(droppingNode) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var nodeConfig;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  nodeConfig = Object.assign(Object.assign({}, droppingNode.getData()), droppingNode.getPosition());\n\n                  if (!onNodeDrop) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 4;\n                  return onNodeDrop(nodeConfig, commandService, modelService);\n\n                case 4:\n                  _context.next = 7;\n                  break;\n\n                case 6:\n                  console.error('onNodeDrop method is required in NodeTree Panel');\n\n                case 7:\n                  return _context.abrupt(\"return\", false);\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      }\n    }));\n    setDnd(dndInstance);\n    return function () {\n      dndInstance.dispose();\n    };\n  }, [commandService, modelService, dndOptions, graph, onNodeDrop]);\n  /** 开始拖拽 */\n\n  var onMouseDown = React.useCallback(function (nodeConfig) {\n    return function (e) {\n      if (!graph || !dnd || !graphConfig) {\n        return;\n      }\n\n      if (nodeConfig.isDisabled) {\n        return;\n      } // 获取节点组件\n\n\n      var renderKey = graphConfig.nodeTypeParser(nodeConfig);\n      var reactComponent = nodeConfig.renderComponent ? nodeConfig.renderComponent : graphConfig.nodeRender.get(renderKey); // 包裹节点组件\n\n      var wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n      var nodeData = {\n        data: nodeConfig,\n        width: nodeConfig.width || 180,\n        height: nodeConfig.height || 40,\n        view: graphConfig.graphId,\n        component: wrappedComponent\n      };\n      var x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n      dnd.start(x6Node, e.nativeEvent);\n    };\n  }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n  return {\n    graphConfig: graphConfig,\n    onMouseDown: onMouseDown,\n    modelService: modelService,\n    commandService: commandService\n  };\n};","map":null,"metadata":{},"sourceType":"module"}