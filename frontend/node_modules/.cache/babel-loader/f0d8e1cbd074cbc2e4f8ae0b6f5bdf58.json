{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { ManaSyringe, ICommandHandler, ICommandContextProvider, delay } from '@antv/xflow-core';\nimport { XFlowDagCommands, GRAPH_STATUS_INFO, EDGE_PROCESSING_CLASSNAME } from '../constants';\nexport var NsGraphStatusCommand;\n\n(function (NsGraphStatusCommand) {\n  var _this = this;\n\n  /** Command: 获取执行状态 */\n  NsGraphStatusCommand.MODEL = GRAPH_STATUS_INFO;\n  /** Command: 用于注册 named factory */\n\n  NsGraphStatusCommand.command = XFlowDagCommands.QUERY_GRAPH_STATUS;\n  /** hookName */\n\n  NsGraphStatusCommand.hookKey = 'queryGraphStatus';\n  /** 状态 类型 */\n\n  var StatusEnum;\n\n  (function (StatusEnum) {\n    StatusEnum[\"SUCCESS\"] = \"success\";\n    StatusEnum[\"PROCESSING\"] = \"processing\";\n    StatusEnum[\"ERROR\"] = \"error\";\n    StatusEnum[\"DEFAULT\"] = \"default\";\n    StatusEnum[\"WARNING\"] = \"warning\";\n  })(StatusEnum = NsGraphStatusCommand.StatusEnum || (NsGraphStatusCommand.StatusEnum = {}));\n  /** 按status 分类  */\n\n\n  NsGraphStatusCommand.initStatusMap = function () {\n    var _ref;\n\n    return _ref = {}, _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.DEFAULT, []), _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.PROCESSING, []), _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.ERROR, []), _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.WARNING, []), _defineProperty(_ref, NsGraphStatusCommand.StatusEnum.SUCCESS, []), _ref;\n  };\n  /** 接口返回 类型 */\n\n\n  NsGraphStatusCommand.groupByStatus = function (data) {\n    var seed = NsGraphStatusCommand.initStatusMap();\n    return Object.entries(data).reduce(function (acc, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          nodeId = _ref3[0],\n          value = _ref3[1];\n\n      acc[value.status].push(nodeId);\n      return acc;\n    }, seed);\n  };\n  /** diff status */\n\n\n  NsGraphStatusCommand.statusDiff = function (cur, next) {\n    var items = new Set([].concat(_toConsumableArray(cur), _toConsumableArray(next)));\n    var diff = {\n      current: [],\n      add: [],\n      remove: []\n    };\n    items.forEach(function (item) {\n      if (next.includes(item) && !cur.includes(item)) {\n        diff.add.push(item);\n      }\n\n      if (!next.includes(item) && cur.includes(item)) {\n        diff.remove.push(item);\n      }\n    });\n    return diff;\n  };\n\n  NsGraphStatusCommand.shouldStop = function (info) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", [StatusEnum.ERROR, StatusEnum.SUCCESS].includes(info.graphStatus));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n})(NsGraphStatusCommand || (NsGraphStatusCommand = {}));\n/** 创建节点命令 */\n\n\nvar QueryGraphStatusCommand = /*#__PURE__*/function () {\n  function QueryGraphStatusCommand() {\n    var _this2 = this;\n\n    _classCallCheck(this, QueryGraphStatusCommand);\n\n    /** 状态缓存 */\n    this.statusInfo = NsGraphStatusCommand.initStatusMap();\n    /** 获取Model */\n\n    this.getStatusModel = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var ctx, modelService, statusModel;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                ctx = this.contextProvider();\n                modelService = ctx.getModelService();\n                _context2.next = 4;\n                return GRAPH_STATUS_INFO.getModel(modelService);\n\n              case 4:\n                statusModel = _context2.sent;\n                return _context2.abrupt(\"return\", statusModel);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /** 更新Model数据 */\n\n\n    this.updateModelValue = function (callback) {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var statusModel;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getStatusModel();\n\n              case 2:\n                statusModel = _context3.sent;\n                statusModel.setValue(callback);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** 停止Looping的flag */\n\n\n    this.stopCurrentStatusLooping = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var statusModel, _yield$statusModel$ge, subscription;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getStatusModel();\n\n              case 2:\n                statusModel = _context4.sent;\n                _context4.next = 5;\n                return statusModel.getValidValue();\n\n              case 5:\n                _yield$statusModel$ge = _context4.sent;\n                subscription = _yield$statusModel$ge.subscription;\n                subscription.dispose();\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** 设置停止looping的方法 */\n\n\n    this.addStopDispose = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this3 = this;\n\n        var statusModel, _yield$statusModel$ge2, subscription;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.getStatusModel();\n\n              case 2:\n                statusModel = _context5.sent;\n                _context5.next = 5;\n                return statusModel.getValidValue();\n\n              case 5:\n                _yield$statusModel$ge2 = _context5.sent;\n                subscription = _yield$statusModel$ge2.subscription;\n                subscription.push({\n                  dispose: function dispose() {\n                    /** 重制processing的边的状态 */\n                    _this3.updateEdges(_this3.statusInfo, NsGraphStatusCommand.initStatusMap());\n\n                    _this3.isLooping = false;\n                  }\n                });\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n    /** 更新Graph的数据 */\n\n\n    this.updateGraph = function (curStatusInfo, nextStatusMap, statusMap) {\n      /** 更新节点 */\n      _this2.updateNodes(curStatusInfo, nextStatusMap, statusMap);\n      /** 更新边 */\n\n\n      _this2.updateEdges(curStatusInfo, nextStatusMap);\n    };\n    /** 更新节点数据 */\n\n\n    this.updateNodeData = function (id, data) {\n      var cell = _this2.x6Graph.getCellById(id);\n\n      if (!cell) {\n        return;\n      }\n\n      cell.setData(Object.assign(Object.assign(Object.assign(Object.assign({}, cell.getData()), cell.getSize()), cell.getPosition()), data));\n    };\n    /** 更新连线数据 */\n\n\n    this.updateNodes = function (curStatusInfo, nextStatusMap, statusMap) {\n      Object.keys(curStatusInfo).forEach(function (status) {\n        var nodes = NsGraphStatusCommand.statusDiff(curStatusInfo[status], nextStatusMap[status]);\n        nodes.add.forEach(function (id) {\n          _this2.updateNodeData(id, statusMap[id]);\n        });\n        nodes.remove.forEach(function (id) {\n          _this2.updateNodeData(id, statusMap[id]);\n        });\n      });\n    };\n    /** 更新节点数据 */\n\n\n    this.updateEdges = function (curStatusInfo, nextStatusMap) {\n      var runningNodes = NsGraphStatusCommand.statusDiff(curStatusInfo.processing, nextStatusMap.processing);\n\n      var edges = _this2.x6Graph.getEdges();\n\n      edges.forEach(function (edge) {\n        var _a;\n\n        var view = (_a = _this2.x6Graph) === null || _a === void 0 ? void 0 : _a.findViewByCell(edge.id);\n        var target = edge.getTargetCellId();\n\n        if (!target) {\n          return;\n        }\n\n        var targetNodeId = target.toString();\n\n        if (!view) {\n          return;\n        }\n\n        if (runningNodes.add.includes(targetNodeId)) {\n          /** 新增className */\n          return view.addClass(EDGE_PROCESSING_CLASSNAME);\n        } else if (runningNodes.remove.includes(targetNodeId)) {\n          /** 移除className */\n          return view.removeClass(EDGE_PROCESSING_CLASSNAME);\n        }\n      });\n    };\n    /** 执行Cmd */\n\n\n    this.execute = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _this4 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks(); // 引用\n\n                _context8.next = 5;\n                return ctx.getX6Graph();\n\n              case 5:\n                this.x6Graph = _context8.sent;\n                _context8.next = 8;\n                return hooks.queryGraphStatus.call(args, function (handlerArgs) {\n                  return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n                    var _this5 = this;\n\n                    var graphStatusService, _handlerArgs$shouldSt, shouldStop, doOnce, loopFunction;\n\n                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            graphStatusService = handlerArgs.graphStatusService, _handlerArgs$shouldSt = handlerArgs.shouldStop, shouldStop = _handlerArgs$shouldSt === void 0 ? NsGraphStatusCommand.shouldStop : _handlerArgs$shouldSt, doOnce = handlerArgs.doOnce; // 取消已有的循环\n\n                            _context7.next = 3;\n                            return this.stopCurrentStatusLooping();\n\n                          case 3:\n                            // 循环函数\n                            loopFunction = function loopFunction(service) {\n                              var loopInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n                              return __awaiter(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                                var data, statusGroupMap, isStop;\n                                return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                                  while (1) {\n                                    switch (_context6.prev = _context6.next) {\n                                      case 0:\n                                        _context6.next = 2;\n                                        return service(handlerArgs);\n\n                                      case 2:\n                                        data = _context6.sent;\n                                        // 更新全局状态\n                                        this.updateModelValue(function (state) {\n                                          Object.entries(data.statusMap).forEach(function (_ref4) {\n                                            var _ref5 = _slicedToArray(_ref4, 2),\n                                                key = _ref5[0],\n                                                value = _ref5[1];\n\n                                            state.statusMap.set(key, value);\n                                          });\n                                          state.graphStatus = data.graphStatus;\n                                        }); // 更新图上状态\n\n                                        // 更新图上状态\n                                        statusGroupMap = NsGraphStatusCommand.groupByStatus(data.statusMap);\n                                        this.updateGraph(this.statusInfo, statusGroupMap, data.statusMap); // 缓存当前状态作为对比数据\n\n                                        // 缓存当前状态作为对比数据\n                                        this.statusInfo = statusGroupMap; // 延迟\n\n                                        _context6.next = 9;\n                                        return delay(loopInterval);\n\n                                      case 9:\n                                        if (this.isLooping) {\n                                          _context6.next = 11;\n                                          break;\n                                        }\n\n                                        return _context6.abrupt(\"return\");\n\n                                      case 11:\n                                        if (!shouldStop) {\n                                          _context6.next = 17;\n                                          break;\n                                        }\n\n                                        _context6.next = 14;\n                                        return shouldStop(data, handlerArgs);\n\n                                      case 14:\n                                        isStop = _context6.sent;\n\n                                        if (!isStop) {\n                                          _context6.next = 17;\n                                          break;\n                                        }\n\n                                        return _context6.abrupt(\"return\");\n\n                                      case 17:\n                                        _context6.next = 19;\n                                        return loopFunction(service, loopInterval);\n\n                                      case 19:\n                                      case \"end\":\n                                        return _context6.stop();\n                                    }\n                                  }\n                                }, _callee6, this);\n                              }));\n                            }; // 从参数更新循环的FLAG\n\n\n                            // 从参数更新循环的FLAG\n                            this.isLooping = handlerArgs.loop === undefined ? true : handlerArgs.loop; // 添加可以停止loop的回调\n\n                            _context7.next = 7;\n                            return this.addStopDispose();\n\n                          case 7:\n                            if (!doOnce) {\n                              _context7.next = 10;\n                              break;\n                            }\n\n                            _context7.next = 10;\n                            return doOnce(handlerArgs);\n\n                          case 10:\n                            loopFunction(graphStatusService, handlerArgs.loopInterval);\n                            return _context7.abrupt(\"return\", {});\n\n                          case 12:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7, this);\n                  }));\n                }, runtimeHook);\n\n              case 8:\n                result = _context8.sent;\n                ctx.setResult(result);\n                return _context8.abrupt(\"return\", this);\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context9.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                _context10.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context10.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    };\n  }\n\n  _createClass(QueryGraphStatusCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return QueryGraphStatusCommand;\n}();\n\n__decorate([ManaSyringe.inject(ICommandContextProvider), __metadata(\"design:type\", Object)], QueryGraphStatusCommand.prototype, \"contextProvider\", void 0);\n\nQueryGraphStatusCommand = __decorate([ManaSyringe.injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphStatusCommand.command.id\n  }\n})], QueryGraphStatusCommand);\nexport { QueryGraphStatusCommand };\nexport var execCmd = function execCmd() {};","map":null,"metadata":{},"sourceType":"module"}