{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport 'reflect-metadata';\n/** Application 扩展依赖 */\n\nimport { ICommandHandler, IGraphCommandFactory, IGraphCommandContribution } from '../command/interface';\nimport { inject, singleton } from 'mana-syringe';\nimport { IHookContribution } from '../hooks/interface';\nimport { Disposable, DisposableCollection } from '../common/disposable';\n/** Commands */\n\nimport { registerNodeCommand, hookhubList as nodeHooks } from './node';\nimport { registerGraphCommand, hookhubList as graphHooks } from './graph';\nimport { registerEdgeCommand, hookhubList as edgeHooks } from './edge';\nimport { registerGroupCommand, hookhubList as groupHooks } from './group';\nimport { registerModelServiceCommand, hookhubList as observablesHooks } from './models';\n/** Command Hooks*/\n\nimport { HookHub } from '@antv/xflow-hook';\nimport { CommandConfig } from './config';\n/** Commands 配置项目*/\n\nvar hookhubList = [].concat(_toConsumableArray(nodeHooks), _toConsumableArray(edgeHooks), _toConsumableArray(groupHooks), _toConsumableArray(graphHooks), _toConsumableArray(observablesHooks));\n\nvar defaultHookFactory = function defaultHookFactory() {\n  return new HookHub();\n};\n\nvar XFlowCommandContribution = /*#__PURE__*/function () {\n  function XFlowCommandContribution() {\n    var _this = this;\n\n    _classCallCheck(this, XFlowCommandContribution);\n\n    /** 注册钩子 */\n    this.registerHook = function (hooks) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var d;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                d = hooks.x6Events.registerHook({\n                  name: 'bind group node move event',\n                  handler: function handler(args) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      var _this3 = this;\n\n                      var event;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              event = {\n                                eventName: 'node:moving',\n                                callback: function callback(_ref) {\n                                  var node = _ref.node;\n                                  return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                    var isGroup, graph, _node$getData, groupId, group, isCollapsed, originSize, hasChange, originPosition, x, y, cornerX, cornerY, childs, groupData;\n\n                                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                      while (1) {\n                                        switch (_context.prev = _context.next) {\n                                          case 0:\n                                            isGroup = node.prop('isGroup');\n\n                                            if (!isGroup) {\n                                              _context.next = 4;\n                                              break;\n                                            }\n\n                                            node.prop('originPosition', node.getPosition());\n                                            return _context.abrupt(\"return\");\n\n                                          case 4:\n                                            graph = node.model.graph;\n                                            _node$getData = node.getData(), groupId = _node$getData.group;\n                                            group = graph.getNodes().find(function (cell) {\n                                              return cell.id === groupId;\n                                            });\n\n                                            if (group) {\n                                              _context.next = 9;\n                                              break;\n                                            }\n\n                                            return _context.abrupt(\"return\");\n\n                                          case 9:\n                                            isCollapsed = group.getProp('isCollapsed');\n                                            originSize = group.getProp('originSize');\n                                            hasChange = false;\n\n                                            if (originSize == null) {\n                                              originSize = group.size();\n                                              group.prop('originSize', originSize);\n                                            }\n\n                                            originPosition = group.prop('originPosition');\n\n                                            if (originPosition == null) {\n                                              originPosition = group.getPosition();\n                                              group.prop('originPosition', originPosition);\n                                            }\n\n                                            x = originPosition.x;\n                                            y = originPosition.y;\n                                            cornerX = originPosition.x + originSize.width;\n                                            cornerY = originPosition.y + originSize.height;\n                                            childs = group.getChildren();\n\n                                            if (childs) {\n                                              childs.forEach(function (child) {\n                                                var bbox = child.getBBox().inflate(12);\n                                                var corner = bbox.getCorner();\n\n                                                if (bbox.x < x) {\n                                                  x = bbox.x;\n                                                  hasChange = true;\n                                                }\n\n                                                if (bbox.y < y) {\n                                                  y = bbox.y;\n                                                  hasChange = true;\n                                                }\n\n                                                if (corner.x > cornerX) {\n                                                  cornerX = corner.x;\n                                                  hasChange = true;\n                                                }\n\n                                                if (corner.y > cornerY) {\n                                                  cornerY = corner.y;\n                                                  hasChange = true;\n                                                }\n                                              });\n                                            }\n\n                                            if (hasChange) {\n                                              group.prop({\n                                                position: {\n                                                  x: x,\n                                                  y: y\n                                                },\n                                                size: {\n                                                  width: cornerX - x,\n                                                  height: cornerY - y\n                                                }\n                                              });\n                                              groupData = Object.assign(Object.assign({}, group.getData()), {\n                                                x: x,\n                                                y: y,\n                                                width: cornerX - x,\n                                                height: cornerY - y\n                                              });\n\n                                              if (isCollapsed !== true) {\n                                                groupData.groupChildrenSize = {\n                                                  width: cornerX - x,\n                                                  height: cornerY - y\n                                                };\n                                              }\n\n                                              group.setData(groupData);\n                                            }\n                                            /**\n                                             *  updateNodeData:\n                                             *  1. 折叠时移动更新xy，size需要更新，childrenSize不变\n                                             *  2. 展开时\n                                             *      - 移动Group更新xy，size不需要更新，childrenSize不更新\n                                             *      - 移动children, 更新xy, size childrenSize\n                                             */\n\n\n                                          case 22:\n                                          case \"end\":\n                                            return _context.stop();\n                                        }\n                                      }\n                                    }, _callee);\n                                  }));\n                                }\n                              };\n                              args.push(event);\n\n                            case 2:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n                  }\n                });\n                return _context3.abrupt(\"return\", Disposable.create(function () {\n                  d.dispose();\n                }));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    };\n    /** 注册钩子 */\n\n\n    this.registerHookHub = function (registry) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var toDispose;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                toDispose = new DisposableCollection();\n                hookhubList.forEach(function (_ref2) {\n                  var hookKey = _ref2.hookKey,\n                      _ref2$createHook = _ref2.createHook,\n                      createHook = _ref2$createHook === void 0 ? defaultHookFactory : _ref2$createHook;\n                  var d = registry.registerHookHub(hookKey, createHook());\n                  toDispose.push(d);\n                });\n                this.commandConfig.getConfig().then(function (_ref3) {\n                  var getContributions = _ref3.getContributions;\n                  var CommandContributions = getContributions();\n                  CommandContributions.forEach(function (_ref4) {\n                    var hookKey = _ref4.hookKey,\n                        _ref4$createHook = _ref4.createHook,\n                        createHook = _ref4$createHook === void 0 ? defaultHookFactory : _ref4$createHook;\n                    var d = registry.registerHookHub(hookKey, createHook());\n                    toDispose.push(d);\n                  });\n                });\n                return _context4.abrupt(\"return\", toDispose);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n  }\n  /** 注册画布节点命令 */\n\n\n  _createClass(XFlowCommandContribution, [{\n    key: \"registerGraphCommands\",\n    value: function registerGraphCommands(registry) {\n      var _this4 = this;\n\n      /** 注册内置的命令 */\n      hookhubList.forEach(function (_ref5) {\n        var command = _ref5.command;\n        registry.registerCommand(command, {\n          createCommand: _this4.commandFactory\n        });\n      });\n      /** 注册外部传入的命令 */\n\n      this.commandConfig.getConfig().then(function (_ref6) {\n        var getContributions = _ref6.getContributions;\n        var CommandContributions = getContributions();\n        CommandContributions.forEach(function (cmd) {\n          registry.registerCommand(cmd.command, {\n            createCommand: _this4.commandFactory\n          });\n        });\n      });\n    }\n  }]);\n\n  return XFlowCommandContribution;\n}();\n\n__decorate([inject(IGraphCommandFactory), __metadata(\"design:type\", Function)], XFlowCommandContribution.prototype, \"commandFactory\", void 0);\n\n__decorate([inject(CommandConfig), __metadata(\"design:type\", CommandConfig\n/** 注册画布节点命令 */\n)], XFlowCommandContribution.prototype, \"commandConfig\", void 0);\n\nXFlowCommandContribution = __decorate([singleton({\n  contrib: [IGraphCommandContribution, IHookContribution]\n})], XFlowCommandContribution);\nexport { XFlowCommandContribution };\nexport var registerXFlowCommandContribution = function registerXFlowCommandContribution(register, commandConfig) {\n  /** 扩展 用户自定义命令 */\n  var configContributions = commandConfig.getCommandContributions();\n  configContributions.forEach(function (execution) {\n    var CommandHandler = execution.CommandHandler,\n        command = execution.command;\n    register({\n      token: {\n        token: ICommandHandler,\n        named: command.id\n      },\n      useClass: CommandHandler\n    });\n  });\n  /** 扩展 Graph 命令 */\n\n  registerGraphCommand(register);\n  /** 扩展 Node 命令 */\n\n  registerNodeCommand(register);\n  /** 扩展 Edge 命令 */\n\n  registerEdgeCommand(register);\n  /** 扩展 Edge 命令 */\n\n  registerGroupCommand(register);\n  /** 扩展 Observable 命令 */\n\n  registerModelServiceCommand(register);\n  /** 注册 XFlowCommandContribution */\n\n  register(XFlowCommandContribution);\n};","map":null,"metadata":{},"sourceType":"module"}