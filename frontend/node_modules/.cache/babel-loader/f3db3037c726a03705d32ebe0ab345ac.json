{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Rectangle } from '../geometry';\nimport { NumberExt, JQuery, Dom, Unit, Vector } from '../util';\nimport { Base } from './base';\nexport var PrintManager = /*#__PURE__*/function (_Base) {\n  _inherits(PrintManager, _Base);\n\n  function PrintManager() {\n    _classCallCheck(this, PrintManager);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PrintManager).apply(this, arguments));\n  }\n\n  _createClass(PrintManager, [{\n    key: \"show\",\n    value: function show() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var localOptions = Object.assign(Object.assign({}, PrintManager.defaultOptions), options);\n      var $pages = this.createPrintPages(localOptions);\n      localOptions.ready($pages, function ($pages) {\n        return _this.showPrintWindow($pages, localOptions);\n      }, {\n        sheetSize: this.getSheetSize(localOptions)\n      });\n    }\n  }, {\n    key: \"showPrintWindow\",\n    value: function showPrintWindow($pages, options) {\n      var _this2 = this;\n\n      if ($pages) {\n        var $body = JQuery(document.body);\n        var $container = JQuery(this.view.container);\n        var bodyClassName = this.view.prefixClassName('graph-printing');\n        $body.addClass(bodyClassName);\n        var $detached = $container.children().detach();\n        $pages.forEach(function ($page) {\n          $page.removeClass(\"\".concat(_this2.className, \"-preview\")).addClass(\"\".concat(_this2.className, \"-ready\")).appendTo($body);\n        });\n        var ret = false;\n\n        var cb = function cb() {\n          if (!ret) {\n            ret = true;\n            $body.removeClass(bodyClassName);\n            $pages.forEach(function ($page) {\n              return $page.remove();\n            });\n            $container.append($detached);\n            JQuery(\"#\".concat(_this2.styleSheetId)).remove();\n\n            _this2.graph.trigger('after:print', options);\n\n            JQuery(window).off('afterprint', cb);\n          }\n        };\n\n        JQuery(window).one('afterprint', cb);\n        setTimeout(cb, 200);\n        window.print();\n      }\n    }\n  }, {\n    key: \"createPrintPage\",\n    value: function createPrintPage(pageArea, options) {\n      this.graph.trigger('before:print', options);\n      var $page = JQuery('<div/>').addClass(this.className);\n      var $wrap = JQuery('<div/>').addClass(this.view.prefixClassName('graph-print-inner')).css('position', 'relative');\n\n      if (options.size) {\n        $page.addClass(\"\".concat(this.className, \"-size-\").concat(options.size));\n      }\n\n      var vSVG = Vector.create(this.view.svg).clone();\n      var vStage = vSVG.findOne(\".\".concat(this.view.prefixClassName('graph-svg-stage')));\n      $wrap.append(vSVG.node);\n      var sheetSize = this.getSheetSize(options);\n      var graphArea = this.graph.transform.getGraphArea();\n      var s = this.graph.transform.getScale();\n      var ts = this.graph.translate();\n      var matrix = Dom.createSVGMatrix().translate(ts.tx / s.sx, ts.ty / s.sy);\n      var info = this.getPageInfo(graphArea, pageArea, sheetSize);\n      var scale = info.scale;\n      var bbox = info.bbox;\n      $wrap.css({\n        left: 0,\n        top: 0\n      });\n      vSVG.attr({\n        width: bbox.width * scale,\n        height: bbox.height * scale,\n        style: 'position:relative',\n        viewBox: [bbox.x, bbox.y, bbox.width, bbox.height].join(' ')\n      });\n      vStage.attr('transform', Dom.matrixToTransformString(matrix));\n      $page.append($wrap);\n      $page.addClass(\"\".concat(this.className, \"-preview\"));\n      return {\n        $page: $page,\n        sheetSize: sheetSize\n      };\n    }\n  }, {\n    key: \"createPrintPages\",\n    value: function createPrintPages(options) {\n      var _this3 = this;\n\n      var ret;\n      var area = this.getPrintArea(options);\n      var $pages = [];\n\n      if (options.page) {\n        var pageSize = this.getPageSize(area, options.page);\n        var pageAreas = this.getPageAreas(area, pageSize);\n        pageAreas.forEach(function (pageArea) {\n          ret = _this3.createPrintPage(pageArea, options);\n          $pages.push(ret.$page);\n        });\n      } else {\n        ret = this.createPrintPage(area, options);\n        $pages.push(ret.$page);\n      }\n\n      if (ret) {\n        var size = {\n          width: ret.sheetSize.cssWidth,\n          height: ret.sheetSize.cssHeight\n        };\n        this.updatePrintStyle(size, options);\n      }\n\n      return $pages;\n    }\n  }, {\n    key: \"updatePrintStyle\",\n    value: function updatePrintStyle(size, options) {\n      var sizeCSS = Object.keys(size).reduce(function (memo, key) {\n        return \"\".concat(memo, \" \").concat(key, \":\").concat(size[key], \";\");\n      }, '');\n      var margin = NumberExt.normalizeSides(options.margin);\n      var marginUnit = options.marginUnit || '';\n      var sheetUnit = options.sheetUnit || '';\n      var css = \"\\n      @media print {\\n        .\".concat(this.className, \".\").concat(this.className, \"-ready {\\n          \").concat(sizeCSS, \"\\n        }\\n\\n        @page {\\n          margin:\\n          \").concat([margin.top + marginUnit, margin.right + marginUnit, margin.bottom + marginUnit, margin.left + marginUnit].join(' '), \";\\n          size: \").concat(options.sheet.width + sheetUnit, \" \").concat(options.sheet.height + sheetUnit, \";\\n\\n        .\").concat(this.className, \".\").concat(this.className, \"-preview {\\n          \").concat(sizeCSS, \"\\n        }\\n      }\");\n      var id = this.styleSheetId;\n      var $style = JQuery(\"#\".concat(id));\n\n      if ($style.length) {\n        $style.html(css);\n      } else {\n        JQuery('head').append(\"'<style type=\\\"text/css\\\" id=\\\"\".concat(id, \"\\\">\").concat(css, \"</style>'\"));\n      }\n    }\n  }, {\n    key: \"getPrintArea\",\n    value: function getPrintArea(options) {\n      var area = options.area;\n\n      if (!area) {\n        var padding = NumberExt.normalizeSides(options.padding);\n        area = this.graph.getContentArea().moveAndExpand({\n          x: -padding.left,\n          y: -padding.top,\n          width: padding.left + padding.right,\n          height: padding.top + padding.bottom\n        });\n      }\n\n      return area;\n    }\n  }, {\n    key: \"getPageSize\",\n    value: function getPageSize(area, poster) {\n      if (typeof poster === 'object') {\n        var raw = poster;\n        var page = {\n          width: raw.width,\n          height: raw.height\n        };\n\n        if (page.width == null) {\n          page.width = Math.ceil(area.width / (raw.columns || 1));\n        }\n\n        if (page.height == null) {\n          page.height = Math.ceil(area.height / (raw.rows || 1));\n        }\n\n        return page;\n      }\n\n      return {\n        width: area.width,\n        height: area.height\n      };\n    }\n  }, {\n    key: \"getPageAreas\",\n    value: function getPageAreas(area, pageSize) {\n      var pages = [];\n      var width = pageSize.width;\n      var height = pageSize.height;\n\n      for (var w = 0, n = 0; w < area.height && n < 200; w += height, n += 1) {\n        for (var h = 0, m = 0; h < area.width && m < 200; h += width, m += 1) {\n          pages.push(new Rectangle(area.x + h, area.y + w, width, height));\n        }\n      }\n\n      return pages;\n    }\n  }, {\n    key: \"getSheetSize\",\n    value: function getSheetSize(options) {\n      var sheet = options.sheet;\n      var margin = NumberExt.normalizeSides(options.margin);\n      var marginUnit = options.marginUnit || '';\n      var sheetUnit = options.sheetUnit || '';\n      var cssWidth = // eslint-disable-next-line\n      \"calc(\".concat(sheet.width).concat(sheetUnit, \" - \").concat(margin.left + margin.right).concat(marginUnit, \")\");\n      var cssHeight = // eslint-disable-next-line\n      \"calc(\".concat(sheet.height).concat(sheetUnit, \" - \").concat(margin.top + margin.bottom).concat(marginUnit, \")\");\n      var ret = Unit.measure(cssWidth, cssHeight);\n      return {\n        cssWidth: cssWidth,\n        cssHeight: cssHeight,\n        width: ret.width,\n        height: ret.height\n      };\n    }\n  }, {\n    key: \"getPageInfo\",\n    value: function getPageInfo(graphArea, pageArea, sheetSize) {\n      var bbox = new Rectangle(pageArea.x - graphArea.x, pageArea.y - graphArea.y, pageArea.width, pageArea.height);\n      var pageRatio = bbox.width / bbox.height;\n      var graphRatio = sheetSize.width / sheetSize.height;\n      return {\n        bbox: bbox,\n        scale: graphRatio < pageRatio ? sheetSize.width / bbox.width : sheetSize.height / bbox.height,\n        fitHorizontal: graphRatio < pageRatio\n      };\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {}\n  }, {\n    key: \"className\",\n    get: function get() {\n      return this.view.prefixClassName('graph-print');\n    }\n  }, {\n    key: \"styleSheetId\",\n    get: function get() {\n      return this.view.prefixClassName('graph-print-style');\n    }\n  }]);\n\n  return PrintManager;\n}(Base);\n\n__decorate([Base.dispose()], PrintManager.prototype, \"dispose\", null);\n\n(function (PrintManager) {\n  PrintManager.defaultOptions = {\n    page: false,\n    sheet: {\n      width: 210,\n      height: 297\n    },\n    sheetUnit: 'mm',\n    margin: 0.4,\n    marginUnit: 'in',\n    padding: 5,\n    ready: function ready($pages, readyToPrint) {\n      return readyToPrint($pages);\n    }\n  };\n})(PrintManager || (PrintManager = {}));","map":null,"metadata":{},"sourceType":"module"}