{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { __awaiter, __decorate, __metadata, __param } from \"tslib\";\nimport { contrib, Contribution, singleton } from 'mana-syringe';\nimport { RxModel } from '../common/rx-model';\nimport { Disposable, DisposableCollection } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IGraphCommandService, IGraphCommandContribution } from './interface';\nimport 'reflect-metadata';\nexport var NCommand;\n\n(function (NCommand) {\n  /* Determine whether object is a Command */\n  function is(arg) {\n    return !!arg && arg === Object(arg) && 'id' in arg;\n  }\n\n  NCommand.is = is;\n  /** Comparator function for when sorting commands */\n\n  function compareCommands(a, b) {\n    if (a.label && b.label) {\n      var aCommand = (a.category ? \"\".concat(a.category, \": \").concat(a.label) : a.label).toLowerCase();\n      var bCommand = (b.category ? \"\".concat(b.category, \": \").concat(b.label) : b.label).toLowerCase();\n      return aCommand.localeCompare(bCommand);\n    } else {\n      return 0;\n    }\n  }\n\n  NCommand.compareCommands = compareCommands;\n  /**\n   * Determine if two commands are equal.\n   *\n   * @param a the first command for comparison.\n   * @param b the second command for comparison.\n   */\n\n  function equals(a, b) {\n    return a.id === b.id && a.label === b.label && a.iconName === b.iconName && a.category === b.category;\n  }\n\n  NCommand.equals = equals;\n})(NCommand || (NCommand = {}));\n\nvar GraphCommandRegistry = /*#__PURE__*/function () {\n  function GraphCommandRegistry(contributionProvider) {\n    var _this = this;\n\n    _classCallCheck(this, GraphCommandRegistry);\n\n    this.contributionProvider = contributionProvider;\n    /**\n     * undo cmd后将命令存储在队列中给redo调用\n     */\n\n    this.redoStack = [];\n    /**\n     * executeCommand后将命令存储在队列中给undo调用\n     */\n\n    this.undoStack = [];\n    /**\n     * 储存所有注册的command\n     */\n\n    this.commands = new Map();\n    /**\n     * 储存所有注册的command factory\n     */\n\n    this.factories = new Map();\n    /**\n     * 储存所有注册的command handler disposables\n     */\n\n    this.disposables = new Map();\n    /**\n     * 监听cmdregistry的变化\n     */\n\n    this.cmdChangeEvent = new RxModel(null);\n    /**\n     * 在Command实例间共享变量\n     */\n\n    this.Globals = new RxModel(new Map());\n    /** 设置command间的共享变量 */\n\n    this.setGlobal = function (key, value) {\n      _this.Globals.setValue(function (map) {\n        map.set(key, value);\n      });\n    };\n    /** 获取共享变量 */\n\n\n    this.getGlobal = function (key) {\n      var map = _this.Globals.getValue();\n\n      return map.get(key);\n    };\n    /**\n     * 执行undo stack中最后一条Command\n     */\n\n\n    this.undoCommand = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var cmd;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                /* 获取可以undo的Command */\n                cmd = this.undoStack.pop();\n\n                if (cmd) {\n                  _context.next = 4;\n                  break;\n                }\n\n                console.error('empty undo stack');\n                return _context.abrupt(\"return\");\n\n              case 4:\n                _context.next = 6;\n                return cmd.undo();\n\n              case 6:\n                /* 执行后塞到redo的栈中 */\n                this.redoStack.push(cmd);\n                /* 触发事件回调 */\n\n                this.cmdChangeEvent.setValue(null);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n    /**\n     * 执行redo stack中最后一条Command\n     */\n\n\n    this.redoCommand = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var cmd;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                /* 获取可以redo的Command */\n                cmd = this.redoStack.pop();\n\n                if (cmd) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                console.error('empty undo stack');\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                _context2.next = 6;\n                return cmd.redo();\n\n              case 6:\n                /* 执行后塞到undo的栈中 */\n                this.undoStack.push(cmd);\n                /* 触发事件回调 */\n\n                this.cmdChangeEvent.setValue(null);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /**\n     * 注册一批可单独dispose的Command\n     * @param externalRegisterFn ICommandRegisterFunction\n     */\n\n\n    this.registerDisposableCommand = function (externalRegisterFn) {\n      var toDispose = new DisposableCollection();\n      var disposableRegistry = {\n        registerCommand: function registerCommand(command, factory) {\n          var disposable = _this.registerCommand(command, factory);\n\n          toDispose.push(disposable);\n          return disposable;\n        }\n      };\n      externalRegisterFn(disposableRegistry);\n      return toDispose;\n    };\n  }\n  /**\n   * 监听cmdregistry的变化\n   */\n\n\n  _createClass(GraphCommandRegistry, [{\n    key: \"onStart\",\n    value: function onStart() {\n      var contributions = this.contributionProvider.getContributions();\n\n      var _iterator = _createForOfIteratorHelper(contributions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var contribItem = _step.value;\n          contribItem.registerGraphCommands(this);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"executeCommandPipeline\",\n    value: function executeCommandPipeline(cmdOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var res, _iterator2, _step2, cmdOption, cmdCtx, _yield, args, hooks;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                res = null;\n                _iterator2 = _createForOfIteratorHelper(cmdOptions);\n                _context3.prev = 2;\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                cmdOption = _step2.value;\n                cmdCtx = res === null || res === void 0 ? void 0 : res.contextProvider();\n                _context3.next = 9;\n                return cmdOption === null || cmdOption === void 0 ? void 0 : cmdOption.getCommandOption(cmdCtx);\n\n              case 9:\n                _yield = _context3.sent;\n                args = _yield.args;\n                hooks = _yield.hooks;\n                _context3.next = 14;\n                return this.executeCommand(cmdOption === null || cmdOption === void 0 ? void 0 : cmdOption.commandId, args, hooks);\n\n              case 14:\n                res = _context3.sent;\n\n              case 15:\n                _context3.next = 4;\n                break;\n\n              case 17:\n                _context3.next = 22;\n                break;\n\n              case 19:\n                _context3.prev = 19;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                _iterator2.e(_context3.t0);\n\n              case 22:\n                _context3.prev = 22;\n\n                _iterator2.f();\n\n                return _context3.finish(22);\n\n              case 25:\n                /* 触发事件回调 */\n                this.cmdChangeEvent.setValue(null);\n                return _context3.abrupt(\"return\", res);\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 19, 22, 25]]);\n      }));\n    }\n    /** 执行 Command：会在undo stack中push cmd */\n\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(commandId, cmdArgs) {\n      var hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var factory, cmd;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                factory = this.getFactory(commandId);\n\n                if (!factory) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.next = 4;\n                return factory.createCommand(commandId, cmdArgs, hook);\n\n              case 4:\n                cmd = _context4.sent;\n                _context4.next = 7;\n                return cmd.execute();\n\n              case 7:\n                if (cmd.isUndoable()) {\n                  this.undoStack.push(cmd);\n                }\n                /* 触发事件回调 */\n\n\n                this.cmdChangeEvent.setValue(null);\n                return _context4.abrupt(\"return\", cmd);\n\n              case 10:\n                throw Object.assign(new Error(\"The command '\".concat(commandId, \"' cannot be executed. There are no active handlers available for the command.\")), {\n                  code: 'NO_ACTIVE_HANDLER'\n                });\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /** 执行 unod Command：不会在undo stack中push新的command记录 */\n\n  }, {\n    key: \"executeUndoCommand\",\n    value: function executeUndoCommand(commandId, cmdArgs) {\n      var hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var factory, cmd;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                factory = this.getFactory(commandId);\n\n                if (!factory) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                _context5.next = 4;\n                return factory.createCommand(commandId, cmdArgs, hook);\n\n              case 4:\n                cmd = _context5.sent;\n                _context5.next = 7;\n                return cmd.execute();\n\n              case 7:\n                return _context5.abrupt(\"return\", cmd);\n\n              case 8:\n                throw Object.assign(new Error(\"The command '\".concat(commandId, \"' cannot be executed. There are no active handlers available for the command.\")), {\n                  code: 'NO_ACTIVE_HANDLER'\n                });\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Execute the active handler for the given command and arguments.\n     *\n     * Reject if a command cannot be executed.\n     */\n\n  }, {\n    key: \"createCommand\",\n    value: function createCommand(commandId, cmdArgs) {\n      var hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var factory, cmd;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                factory = this.getFactory(commandId);\n\n                if (!factory) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _context6.next = 4;\n                return factory.createCommand(commandId, cmdArgs, hook);\n\n              case 4:\n                cmd = _context6.sent;\n                return _context6.abrupt(\"return\", cmd);\n\n              case 6:\n                throw Object.assign(new Error(\"The command '\".concat(commandId, \"' cannot be executed. There are no active handlers available for the command.\")), {\n                  code: 'NO_ACTIVE_HANDLER'\n                });\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n    /**\n     * 检查是否注册了Command\n     */\n\n  }, {\n    key: \"hasCommand\",\n\n    /**\n     * 检查是否注册了Command\n     */\n    value: function hasCommand(commandId) {\n      return this.commands.has(commandId);\n    }\n    /**\n     * Get a command for the given command identifier.\n     */\n\n  }, {\n    key: \"getCommand\",\n    value: function getCommand(id) {\n      return this.commands.get(id);\n    }\n    /**\n     * Register the given command and handler if present.\n     *\n     * Throw if a command is already registered for the given command identifier.\n     */\n\n  }, {\n    key: \"registerCommand\",\n    value: function registerCommand(command, factory) {\n      var _this2 = this;\n\n      if (this.factories.has(command.id)) {\n        console.warn(\"A command \".concat(command.id, \" is already registered.\"));\n        return Disposable.NULL;\n      }\n\n      var toDispose = new DisposableCollection(this.doRegisterCommand(command), this.registerFactory(command.id, factory), Disposable.create(function () {\n        return _this2.disposables.delete(command.id);\n      }));\n      this.disposables.set(command.id, toDispose);\n      return toDispose;\n    }\n  }, {\n    key: \"doRegisterCommand\",\n    value: function doRegisterCommand(command) {\n      var _this3 = this;\n\n      this.commands.set(command.id, command);\n      return Disposable.create(function () {\n        return _this3.disposables.delete(command.id);\n      });\n    }\n    /**\n     * Unregister command from the registry\n     *\n     * @param id\n     */\n\n  }, {\n    key: \"unregisterCommand\",\n    value: function unregisterCommand(commandOrId) {\n      var id = NCommand.is(commandOrId) ? commandOrId.id : commandOrId;\n      var disposableCmd = this.disposables.get(id);\n\n      if (disposableCmd) {\n        disposableCmd.dispose();\n      }\n    }\n    /**\n     * 检查commandId是否有Factory\n     */\n\n  }, {\n    key: \"hasFactory\",\n    value: function hasFactory(commandId) {\n      var factory = this.factories.get(commandId);\n      return !!factory;\n    }\n    /**\n     * Get a visible handler for the given command or `undefined`.\n     */\n\n  }, {\n    key: \"getFactory\",\n    value: function getFactory(commandId) {\n      var factory = this.factories.get(commandId);\n      return factory;\n    }\n    /**\n     * Register the given handler for the given command identifier.\n     *\n     * If there is already a handler for the given command\n     * then the given handler is registered as more specific, and\n     * has higher priority during enablement, visibility and toggle state evaluations.\n     */\n\n  }, {\n    key: \"registerFactory\",\n    value: function registerFactory(commandId, factory) {\n      var _this4 = this;\n\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (this.hasFactory(commandId) && force === false) {\n        console.error('cannot register command:', commandId);\n      }\n\n      this.factories.set(commandId, factory);\n      return Disposable.create(function () {\n        _this4.factories.delete(commandId);\n      });\n    }\n    /**\n     * Returns with all handlers for the given command. If the command does not have any handlers,\n     * or the command is not registered, returns an empty array.\n     */\n\n  }, {\n    key: \"getAllFactories\",\n    value: function getAllFactories() {\n      return Array.from(this.factories.entries());\n    }\n  }, {\n    key: \"watchChange\",\n    get: function get() {\n      return this.cmdChangeEvent.watch;\n    }\n  }, {\n    key: \"isUndoable\",\n    get: function get() {\n      return this.undoStack.length > 0;\n    }\n    /**\n     * 检查是否注册了Command\n     */\n\n  }, {\n    key: \"isRedoable\",\n    get: function get() {\n      return this.redoStack.length > 0;\n    }\n  }]);\n\n  return GraphCommandRegistry;\n}();\n\nGraphCommandRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IGraphCommandService]\n}), __param(0, contrib(IGraphCommandContribution)), __metadata(\"design:paramtypes\", [Object])], GraphCommandRegistry);\nexport { GraphCommandRegistry };","map":null,"metadata":{},"sourceType":"module"}