{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/diagpanel2/ServiceWebsite/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { PortLayout, PortLabelLayout } from '../registry';\nimport { ObjectExt } from '../util';\nimport { Point } from '../geometry';\nexport var PortManager = /*#__PURE__*/function () {\n  function PortManager(data) {\n    _classCallCheck(this, PortManager);\n\n    this.ports = [];\n    this.groups = {};\n    this.init(ObjectExt.cloneDeep(data));\n  }\n\n  _createClass(PortManager, [{\n    key: \"getPorts\",\n    value: function getPorts() {\n      return this.ports;\n    }\n  }, {\n    key: \"getGroup\",\n    value: function getGroup(groupName) {\n      return groupName != null ? this.groups[groupName] : null;\n    }\n  }, {\n    key: \"getPortsByGroup\",\n    value: function getPortsByGroup(groupName) {\n      return this.ports.filter(function (p) {\n        return p.group === groupName || p.group == null && groupName == null;\n      });\n    }\n  }, {\n    key: \"getPortsLayoutByGroup\",\n    value: function getPortsLayoutByGroup(groupName, elemBBox) {\n      var _this = this;\n\n      var ports = this.getPortsByGroup(groupName);\n      var group = groupName ? this.getGroup(groupName) : null;\n      var groupPosition = group ? group.position : null;\n      var groupPositionName = groupPosition ? groupPosition.name : null;\n      var layoutFn;\n\n      if (groupPositionName != null) {\n        var fn = PortLayout.registry.get(groupPositionName);\n\n        if (fn == null) {\n          return PortLayout.registry.onNotFound(groupPositionName);\n        }\n\n        layoutFn = fn;\n      } else {\n        layoutFn = PortLayout.presets.left;\n      }\n\n      var portsArgs = ports.map(function (port) {\n        return port && port.position && port.position.args || {};\n      });\n      var groupArgs = groupPosition && groupPosition.args || {};\n      var layouts = layoutFn(portsArgs, elemBBox, groupArgs);\n      return layouts.map(function (portLayout, index) {\n        var port = ports[index];\n        return {\n          portLayout: portLayout,\n          portId: port.id,\n          portSize: port.size,\n          portAttrs: port.attrs,\n          labelSize: port.label.size,\n          labelLayout: _this.getPortLabelLayout(port, Point.create(portLayout.position), elemBBox)\n        };\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init(data) {\n      var _this2 = this;\n\n      var groups = data.groups,\n          items = data.items;\n\n      if (groups != null) {\n        Object.keys(groups).forEach(function (key) {\n          _this2.groups[key] = _this2.parseGroup(groups[key]);\n        });\n      }\n\n      if (Array.isArray(items)) {\n        items.forEach(function (item) {\n          _this2.ports.push(_this2.parsePort(item));\n        });\n      }\n    }\n  }, {\n    key: \"parseGroup\",\n    value: function parseGroup(group) {\n      return Object.assign(Object.assign({}, group), {\n        label: this.getLabel(group, true),\n        position: this.getPortPosition(group.position, true)\n      });\n    }\n  }, {\n    key: \"parsePort\",\n    value: function parsePort(port) {\n      var result = Object.assign({}, port);\n      var group = this.getGroup(port.group) || {};\n      result.markup = result.markup || group.markup;\n      result.attrs = ObjectExt.merge({}, group.attrs, result.attrs);\n      result.position = this.createPosition(group, result);\n      result.label = ObjectExt.merge({}, group.label, this.getLabel(result));\n      result.zIndex = this.getZIndex(group, result);\n      result.size = Object.assign(Object.assign({}, group.size), result.size);\n      return result;\n    }\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex(group, port) {\n      if (typeof port.zIndex === 'number') {\n        return port.zIndex;\n      }\n\n      if (typeof group.zIndex === 'number' || group.zIndex === 'auto') {\n        return group.zIndex;\n      }\n\n      return 'auto';\n    }\n  }, {\n    key: \"createPosition\",\n    value: function createPosition(group, port) {\n      return ObjectExt.merge({\n        name: 'left',\n        args: {}\n      }, group.position, {\n        args: port.args\n      });\n    }\n  }, {\n    key: \"getPortPosition\",\n    value: function getPortPosition(position) {\n      var setDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (position == null) {\n        if (setDefault) {\n          return {\n            name: 'left',\n            args: {}\n          };\n        }\n      } else {\n        if (typeof position === 'string') {\n          return {\n            name: position,\n            args: {}\n          };\n        }\n\n        if (Array.isArray(position)) {\n          return {\n            name: 'absolute',\n            args: {\n              x: position[0],\n              y: position[1]\n            }\n          };\n        }\n\n        if (typeof position === 'object') {\n          return position;\n        }\n      }\n\n      return {\n        args: {}\n      };\n    }\n  }, {\n    key: \"getPortLabelPosition\",\n    value: function getPortLabelPosition(position) {\n      var setDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (position == null) {\n        if (setDefault) {\n          return {\n            name: 'left',\n            args: {}\n          };\n        }\n      } else {\n        if (typeof position === 'string') {\n          return {\n            name: position,\n            args: {}\n          };\n        }\n\n        if (typeof position === 'object') {\n          return position;\n        }\n      }\n\n      return {\n        args: {}\n      };\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(item) {\n      var setDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var label = item.label || {};\n      label.position = this.getPortLabelPosition(label.position, setDefaults);\n      return label;\n    }\n  }, {\n    key: \"getPortLabelLayout\",\n    value: function getPortLabelLayout(port, portPosition, elemBBox) {\n      var name = port.label.position.name || 'left';\n      var args = port.label.position.args || {};\n      var layoutFn = PortLabelLayout.registry.get(name) || PortLabelLayout.presets.left;\n\n      if (layoutFn) {\n        return layoutFn(portPosition, elemBBox, args);\n      }\n\n      return null;\n    }\n  }]);\n\n  return PortManager;\n}();","map":null,"metadata":{},"sourceType":"module"}