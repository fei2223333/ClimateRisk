{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { NumberExt } from '../../util';\n/**\n * Routes the edge always to/from a certain side\n */\n\nexport var oneSide = function oneSide(vertices, options, edgeView) {\n  var side = options.side || 'bottom';\n  var padding = NumberExt.normalizeSides(options.padding || 40);\n  var sourceBBox = edgeView.sourceBBox;\n  var targetBBox = edgeView.targetBBox;\n  var sourcePoint = sourceBBox.getCenter();\n  var targetPoint = targetBBox.getCenter();\n  var coord;\n  var dim;\n  var factor;\n\n  switch (side) {\n    case 'top':\n      factor = -1;\n      coord = 'y';\n      dim = 'height';\n      break;\n\n    case 'left':\n      factor = -1;\n      coord = 'x';\n      dim = 'width';\n      break;\n\n    case 'right':\n      factor = 1;\n      coord = 'x';\n      dim = 'width';\n      break;\n\n    case 'bottom':\n    default:\n      factor = 1;\n      coord = 'y';\n      dim = 'height';\n      break;\n  } // Move the points from the center of the element to outside of it.\n\n\n  sourcePoint[coord] += factor * (sourceBBox[dim] / 2 + padding[side]);\n  targetPoint[coord] += factor * (targetBBox[dim] / 2 + padding[side]); // Make edge orthogonal (at least the first and last vertex).\n\n  if (factor * (sourcePoint[coord] - targetPoint[coord]) > 0) {\n    targetPoint[coord] = sourcePoint[coord];\n  } else {\n    sourcePoint[coord] = targetPoint[coord];\n  }\n\n  return [sourcePoint.toJSON()].concat(_toConsumableArray(vertices), [targetPoint.toJSON()]);\n};","map":null,"metadata":{},"sourceType":"module"}