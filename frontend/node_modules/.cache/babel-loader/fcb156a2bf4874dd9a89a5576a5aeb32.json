{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport ReactDOM from 'react-dom';\nimport { Graph as X6Graph, Dom } from '@antv/x6';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { Deferred } from '../../common/deferred';\nimport { IGraphOptionProvider } from './config';\nimport { singleton, inject, Syringe } from 'mana-syringe';\nimport { IGraphCommandService } from '../../command';\nimport { IModelService } from '../../model-service/interface';\nimport { IHookService } from '../../hooks';\nimport { getEdgeReactComponent } from '../../command-contributions/components/context';\nimport { XFLOW_DEFAULT_EDGE } from '../../constants';\n/** !!! 所有需要使用Graph相关信息的地方, 都统一使用IGraphProvider来获取 */\n\nexport var IGraphProvider = Symbol('IGraphProvider');\nexport var ICommandServiceProvider = Symbol('ICommandServiceProvider');\nexport var IModelServiceProvider = Symbol('IModelServiceProvider');\n\nvar GraphManager = /*#__PURE__*/function () {\n  function GraphManager() {\n    var _this = this;\n\n    _classCallCheck(this, GraphManager);\n\n    /** 处理画布实例的销毁 */\n    this.toDisposce = new DisposableCollection();\n    /** 储存画布实例 */\n\n    this.graphMap = new Map();\n    /** 获取X6 Graph 实例 */\n\n    this.getGraph = function (graphId) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var graphDefer, options, hooks, mergedOptions, graphContainer, edgeRender, nodeRender, edgeTypeParser, edgeRenderMap, clientHeight, clientWidth, commandService, modelService, graph;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                graphDefer = this.graphMap.get(graphId);\n\n                if (graphDefer) {\n                  _context2.next = 31;\n                  break;\n                }\n\n                graphDefer = new Deferred();\n                this.graphMap.set(graphId, graphDefer);\n                _context2.next = 6;\n                return this.optionProvider.getOptions();\n\n              case 6:\n                options = _context2.sent;\n\n                /** 获取hooks实例： hooks方便其他组件可以修改注册graphOpions/events */\n                hooks = this.hookService.hookProvider();\n                /** 执行hooks：获取graphOptions */\n\n                _context2.next = 10;\n                return hooks.graphOptions.call(options.x6Options);\n\n              case 10:\n                mergedOptions = _context2.sent;\n                graphContainer = options.graphContainer, edgeRender = options.edgeRender, nodeRender = options.nodeRender, edgeTypeParser = options.edgeTypeParser;\n                /** 执行hooks：获取edge label render */\n\n                _context2.next = 14;\n                return hooks.reactEdgeLabelRender.call(edgeRender);\n\n              case 14:\n                edgeRenderMap = _context2.sent;\n                _context2.next = 17;\n                return hooks.reactNodeRender.call(nodeRender);\n\n              case 17:\n                clientHeight = graphContainer.clientHeight, clientWidth = graphContainer.clientWidth;\n                _context2.next = 20;\n                return this.commandServiceProvider.getCommandService();\n\n              case 20:\n                commandService = _context2.sent;\n                _context2.next = 23;\n                return this.modelServiceProvider.getModelService();\n\n              case 23:\n                modelService = _context2.sent;\n\n                /** 实例化 X6 Graph */\n                graph = new X6Graph(Object.assign(Object.assign({\n                  container: graphContainer,\n                  width: clientWidth,\n                  height: clientHeight\n                }, mergedOptions), {\n                  /** X6提供了边渲染的钩子, 可以在这里设置边上需要渲染的React内容 */\n                  onEdgeLabelRendered: function onEdgeLabelRendered(args) {\n                    var edge = args.edge,\n                        container = args.container;\n\n                    _this2.renderEdgeReactLabel({\n                      edge: edge,\n                      container: container,\n                      edgeRenderMap: edgeRenderMap,\n                      edgeTypeParser: edgeTypeParser,\n                      modelService: modelService,\n                      commandService: commandService\n                    });\n                  }\n                }));\n                /** 执行hooks：绑定事件执行api */\n\n                _context2.next = 27;\n                return hooks.afterGraphInit.call({\n                  graph: graph,\n                  commandService: commandService,\n                  modelService: modelService,\n                  options: options\n                });\n\n              case 27:\n                graphDefer.resolve(graph);\n                graph.on('node:moved', function (_ref) {\n                  var node = _ref.node;\n                  var nodeData = node.getData();\n                  var position = node.position();\n                  node.setData(Object.assign(Object.assign({}, nodeData), {\n                    x: position === null || position === void 0 ? void 0 : position.x,\n                    y: position === null || position === void 0 ? void 0 : position.y\n                  }));\n                });\n                graph.on('node:resized', function (_ref2) {\n                  var node = _ref2.node;\n                  var nodeData = node.getData();\n                  var size = node.size();\n                  node.setData(Object.assign(Object.assign({}, nodeData), {\n                    width: size === null || size === void 0 ? void 0 : size.width,\n                    height: size === null || size === void 0 ? void 0 : size.height\n                  }));\n                });\n                this.toDisposce.push(Disposable.create(function () {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return hooks.beforeGraphDestroy.call({\n                              graph: graph,\n                              commandService: commandService,\n                              modelService: modelService,\n                              options: options\n                            });\n\n                          case 2:\n                            this.graphMap.delete(graphId);\n                            graph.dispose();\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n                }));\n\n              case 31:\n                return _context2.abrupt(\"return\", graphDefer.promise);\n\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n\n    this.renderEdgeReactLabel = function (args) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var container, edgeTypeParser, edge, edgeRenderMap, commandService, modelService, renderKey, reactComponent, content, WrappedReactComponent;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                container = args.container, edgeTypeParser = args.edgeTypeParser, edge = args.edge, edgeRenderMap = args.edgeRenderMap, commandService = args.commandService, modelService = args.modelService;\n                renderKey = edgeTypeParser(edge === null || edge === void 0 ? void 0 : edge.data) || XFLOW_DEFAULT_EDGE;\n                reactComponent = edgeRenderMap.get(renderKey);\n\n                if (reactComponent) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 5:\n                if (edge && (edge === null || edge === void 0 ? void 0 : edge.data) && reactComponent) {\n                  content = this.edgeAppendForeignObject(edge, container);\n                  WrappedReactComponent = getEdgeReactComponent(reactComponent, commandService, modelService)(edge);\n                  ReactDOM.render(WrappedReactComponent, content);\n                }\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n  }\n  /** 实现在连线上渲染React节点 */\n\n\n  _createClass(GraphManager, [{\n    key: \"edgeAppendForeignObject\",\n    value: function edgeAppendForeignObject(x6Edge, container) {\n      var fo = Dom.createSvgElement('foreignObject');\n      var body = Dom.createElementNS('body', Dom.ns.xhtml);\n      var content = Dom.createElementNS('div', Dom.ns.xhtml);\n      var edgeData = x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data;\n      var foWdith = (edgeData === null || edgeData === void 0 ? void 0 : edgeData.edgeContentWidth) || 100;\n      var foHeight = (edgeData === null || edgeData === void 0 ? void 0 : edgeData.edgeContentHeigt) || 30;\n      fo.setAttribute('width', \"\".concat(foWdith));\n      fo.setAttribute('height', \"\".concat(foHeight));\n      fo.setAttribute('x', \"\".concat(-1.0 * foWdith / 2));\n      fo.setAttribute('y', \"\".concat(-1.0 * foHeight / 2));\n      body.setAttribute('xhtmls', Dom.ns.xhtml);\n      body.style.width = '100%';\n      body.style.height = '100%';\n      body.style.padding = '0';\n      body.style.margin = '0';\n      body.style.background = 'unset';\n      body.style.overflow = 'visible';\n      body.className = 'xflow-edge-label-body';\n      content.style.width = '100%';\n      content.style.height = '100%';\n      body.appendChild(content);\n      fo.appendChild(body);\n      container.appendChild(fo);\n      return content;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.toDisposce.dispose();\n    }\n  }]);\n\n  return GraphManager;\n}();\n\n__decorate([inject(IGraphOptionProvider), __metadata(\"design:type\", Object)], GraphManager.prototype, \"optionProvider\", void 0);\n\n__decorate([inject(IHookService), __metadata(\"design:type\", Object)], GraphManager.prototype, \"hookService\", void 0);\n\n__decorate([inject(ICommandServiceProvider), __metadata(\"design:type\", Object)], GraphManager.prototype, \"commandServiceProvider\", void 0);\n\n__decorate([inject(IModelServiceProvider), __metadata(\"design:type\", Object)], GraphManager.prototype, \"modelServiceProvider\", void 0);\n\nGraphManager = __decorate([singleton()], GraphManager);\nexport { GraphManager };\nexport var registerGraphModule = function registerGraphModule(register) {\n  /** 注册GraphManager */\n  register(GraphManager);\n  register(IGraphProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: function useDynamic(context) {\n      return {\n        getGraphInstance: function getGraphInstance() {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            var graphManager, graphOptionProvider, graphConfig, x6Graph;\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    graphManager = context.container.get(GraphManager);\n                    graphOptionProvider = context.container.get(IGraphOptionProvider);\n                    _context4.next = 4;\n                    return graphOptionProvider === null || graphOptionProvider === void 0 ? void 0 : graphOptionProvider.getOptions();\n\n                  case 4:\n                    graphConfig = _context4.sent;\n                    _context4.next = 7;\n                    return graphManager === null || graphManager === void 0 ? void 0 : graphManager.getGraph(graphConfig.graphId);\n\n                  case 7:\n                    x6Graph = _context4.sent;\n                    return _context4.abrupt(\"return\", x6Graph);\n\n                  case 9:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n        },\n        getGraphOptions: function getGraphOptions() {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n            var graphOptionProvider;\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    graphOptionProvider = context.container.get(IGraphOptionProvider);\n                    return _context5.abrupt(\"return\", graphOptionProvider === null || graphOptionProvider === void 0 ? void 0 : graphOptionProvider.getOptions());\n\n                  case 2:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n        }\n      };\n    }\n  });\n  register(ICommandServiceProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: function useDynamic(context) {\n      return {\n        getCommandService: function getCommandService() {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n            var commandService;\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    commandService = context.container.get(IGraphCommandService);\n                    return _context6.abrupt(\"return\", commandService);\n\n                  case 2:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n        }\n      };\n    }\n  });\n  register(IModelServiceProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: function useDynamic(context) {\n      return {\n        getModelService: function getModelService() {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n            var modelService;\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    modelService = context.container.get(IModelService);\n                    return _context7.abrupt(\"return\", modelService);\n\n                  case 2:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n        }\n      };\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}