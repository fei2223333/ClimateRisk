{"ast":null,"code":"import _objectSpread from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from './redux/actions';\nimport { Upload, message, Button, Dragger } from 'antd';\nimport { CloudUploadOutlined, InboxOutlined } from '@ant-design/icons';\nimport Axios from 'axios';\nvar props = {\n  onChange: function onChange(info) {\n    var status = info.file.status;\n\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n\n    if (status === 'done') {\n      message.success(\"\".concat(info.file.name, \" file uploaded successfully.\"));\n    } else if (status === 'error') {\n      message.error(\"\".concat(info.file.name, \" file upload failed.\"));\n    }\n  },\n  onDrop: function onDrop(e) {\n    console.log('Dropped files', e.dataTransfer.files);\n  }\n};\nexport var SpineContent = /*#__PURE__*/function (_Component) {\n  _inherits(SpineContent, _Component);\n\n  var _super = _createSuper(SpineContent);\n\n  function SpineContent(props) {\n    var _this;\n\n    _classCallCheck(this, SpineContent);\n\n    _this = _super.call(this, props);\n\n    _this.handleFileChange = function (_ref) {\n      var file = _ref.file,\n          fileList = _ref.fileList;\n\n      //处理文件change，保证用户选择的文件只有一个\n      _this.setState({\n        fileList: fileList.length ? [fileList[fileList.length - 1]] : []\n      });\n    };\n\n    _this.handleUpload = function () {\n      if (!_this.state.fileList.length) {\n        message.warning('请选择要上传的文件');\n      }\n\n      var formData = new FormData();\n      formData.append('file', _this.state.fileList[0].originFileObj);\n\n      _this.setState({\n        uploading: true\n      });\n\n      Axios.defaults.baseURL = 'https://jsonplaceholder.typicode.com/';\n      Axios({\n        method: 'post',\n        url: 'posts',\n        data: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n        message.success('上传成功');\n        console.log(data);\n      }).catch(function (err) {\n        console.log(err);\n      }).finally(function () {\n        _this.setState({\n          uploading: false\n        });\n      });\n    };\n\n    _this.state = {\n      showModal: false,\n      fileList: [],\n      //文件列表，用于控制upload组件\n      uploading: false //上传按钮loading显示控制\n\n    };\n    return _this;\n  }\n\n  _createClass(SpineContent, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Dragger, {\n        name: \"file\",\n        multiple: true,\n        action: \"\",\n        beforeUpload: function beforeUpload(f, fList) {\n          return false;\n        },\n        onChange: this.handleFileChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"ant-upload-drag-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(InboxOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"ant-upload-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, \"Click or drag file to this area to upload\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"ant-upload-hint\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, \"Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files\")), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: this.handleUpload,\n        disabled: this.state.fileList.length === 0,\n        loading: this.state.uploading,\n        style: {\n          marginTop: 16\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, this.state.uploading ? 'Uploading' : 'Start Upload'));\n    } // render() {\n    //   const fileList = this.state.fileList;\n    //   const uploading = this.state.uploading;\n    //   return (\n    //     <div>\n    //       <Upload\n    //         fileList={this.state.fileList}\n    //         beforeUpload={(f, fList) => false}\n    //         onChange={this.handleFileChange}\n    //       >\n    //         <Button>\n    //           <CloudUploadOutlined /> 选择文件\n    //         </Button>\n    //       </Upload>\n    //       <Button\n    //         type=\"primary\"\n    //         onClick={this.handleUpload}\n    //         disabled={fileList.length === 0}\n    //         loading={uploading}\n    //         style={{ marginTop: 16 }}\n    //       >\n    //         {uploading ? 'Uploading' : 'Start Upload'}\n    //       </Button>\n    //     </div>\n    //   );\n    // }\n\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    value: // @ts-ignore\n    function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return SpineContent;\n}(Component);\n/* istanbul ignore next */\n\nSpineContent.propTypes = {\n  home: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    home: state.home\n  };\n}\n/* istanbul ignore next */\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(_objectSpread({}, actions), dispatch)\n  };\n}\n\nvar _default = connect(mapStateToProps, mapDispatchToProps)(SpineContent);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(props, \"props\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n  reactHotLoader.register(SpineContent, \"SpineContent\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js"],"names":["React","Component","PropTypes","bindActionCreators","connect","actions","Upload","message","Button","Dragger","CloudUploadOutlined","InboxOutlined","Axios","props","onChange","info","status","file","console","log","fileList","success","name","error","onDrop","e","dataTransfer","files","SpineContent","handleFileChange","setState","length","handleUpload","state","warning","formData","FormData","append","originFileObj","uploading","defaults","baseURL","method","url","data","headers","then","catch","err","finally","showModal","f","fList","marginTop","propTypes","home","object","isRequired","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from './redux/actions';\nimport { Upload, message, Button, Dragger } from 'antd';\nimport { CloudUploadOutlined, InboxOutlined } from '@ant-design/icons';\nimport Axios from 'axios';\n\nconst props = {\n  onChange(info) {\n    const { status } = info.file;\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n  onDrop(e) {\n    console.log('Dropped files', e.dataTransfer.files);\n  },\n};\n\nexport class SpineContent extends Component {\n  static propTypes = {\n    home: PropTypes.object.isRequired,\n    actions: PropTypes.object.isRequired,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false,\n      fileList: [], //文件列表，用于控制upload组件\n      uploading: false, //上传按钮loading显示控制\n    };\n  }\n\n  handleFileChange = ({ file, fileList }) => {\n    //处理文件change，保证用户选择的文件只有一个\n    this.setState({\n      fileList: fileList.length ? [fileList[fileList.length - 1]] : [],\n    });\n  };\n\n  handleUpload = () => {\n    if (!this.state.fileList.length) {\n      message.warning('请选择要上传的文件');\n    }\n\n    const formData = new FormData();\n    formData.append('file', this.state.fileList[0].originFileObj);\n\n    this.setState({\n      uploading: true,\n    });\n\n    Axios.defaults.baseURL = 'https://jsonplaceholder.typicode.com/';\n    Axios({\n      method: 'post',\n      url: 'posts',\n      data: formData,\n      headers: { 'Content-Type': 'multipart/form-data' },\n    })\n      .then(({ data }) => {\n        message.success('上传成功');\n        console.log(data);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.setState({\n          uploading: false,\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <Dragger\n          name=\"file\"\n          multiple={true}\n          action=\"\"\n          beforeUpload={(f, fList) => false}\n          onChange={this.handleFileChange}\n        >\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n          <p className=\"ant-upload-hint\">\n            Support for a single or bulk upload. Strictly prohibit from uploading company data or\n            other band files\n          </p>\n        </Dragger>\n        <Button\n          type=\"primary\"\n          onClick={this.handleUpload}\n          disabled={this.state.fileList.length === 0}\n          loading={this.state.uploading}\n          style={{ marginTop: 16 }}\n        >\n          {this.state.uploading ? 'Uploading' : 'Start Upload'}\n        </Button>\n      </div>\n    );\n  }\n\n  // render() {\n  //   const fileList = this.state.fileList;\n  //   const uploading = this.state.uploading;\n  //   return (\n  //     <div>\n  //       <Upload\n  //         fileList={this.state.fileList}\n  //         beforeUpload={(f, fList) => false}\n  //         onChange={this.handleFileChange}\n  //       >\n  //         <Button>\n  //           <CloudUploadOutlined /> 选择文件\n  //         </Button>\n  //       </Upload>\n  //       <Button\n  //         type=\"primary\"\n  //         onClick={this.handleUpload}\n  //         disabled={fileList.length === 0}\n  //         loading={uploading}\n  //         style={{ marginTop: 16 }}\n  //       >\n  //         {uploading ? 'Uploading' : 'Start Upload'}\n  //       </Button>\n  //     </div>\n  //   );\n  // }\n}\n\n/* istanbul ignore next */\nfunction mapStateToProps(state) {\n  return {\n    home: state.home,\n  };\n}\n\n/* istanbul ignore next */\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({ ...actions }, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SpineContent);\n"]},"metadata":{},"sourceType":"module"}