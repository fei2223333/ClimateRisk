{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nexport var AppContext = React.createContext({\n  cell: null,\n  x6Graph: null,\n  commands: null,\n  modelService: null\n});\nexport var useAppContext = function useAppContext() {\n  return React.useContext(AppContext);\n};\nexport function getNodeReactComponent(Component, commands, modelService) {\n  return function (x6Node) {\n    /* eslint-disable-next-line  */\n    var x6Graph = this;\n    var nodeData = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getData();\n    var size = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getSize();\n    var position = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getPosition();\n\n    var WrappedComponent = function WrappedComponent() {\n      return React.createElement(AppContext.Provider, {\n        value: {\n          cell: x6Node,\n          x6Graph: x6Graph,\n          commands: commands,\n          modelService: modelService\n        }\n      }, React.createElement(Component, {\n        cell: x6Node,\n        data: nodeData,\n        size: size,\n        position: position\n      }));\n    };\n\n    return React.createElement(WrappedComponent, null);\n  };\n}\nexport function getEdgeReactComponent(Component, commands, modelService) {\n  return function (x6Edge) {\n    /* eslint-disable-next-line  */\n    var x6Graph = this;\n    var edgeData = x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.getData();\n\n    var WrappedComponent = function WrappedComponent() {\n      return React.createElement(AppContext.Provider, {\n        value: {\n          cell: x6Edge,\n          x6Graph: x6Graph,\n          commands: commands,\n          modelService: modelService\n        }\n      }, React.createElement(Component, {\n        data: edgeData,\n        cell: x6Edge\n      }));\n    };\n\n    return React.createElement(WrappedComponent, null);\n  };\n}\n/** 获取节点选中状态 */\n\nexport var useIsNodeSelected = function useIsNodeSelected() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isSelected = _React$useState2[0],\n      setIsSelected = _React$useState2[1];\n\n  var _useAppContext = useAppContext(),\n      x6Graph = _useAppContext.x6Graph,\n      cell = _useAppContext.cell;\n\n  React.useEffect(function () {\n    var handler = function handler(_ref) {\n      var added = _ref.added,\n          removed = _ref.removed;\n      var isAdded = added.filter(function (selectedCell) {\n        return selectedCell.isNode();\n      }).some(function (node) {\n        node.id === cell.id;\n      });\n\n      if (isAdded) {\n        cell.setData(Object.assign(Object.assign({}, cell.getData()), {\n          isNodeSelected: true\n        }));\n        setIsSelected(true);\n        return;\n      }\n\n      var isRemoved = removed.filter(function (selectedCell) {\n        return selectedCell.isNode();\n      }).some(function (node) {\n        node.id === cell.id;\n      });\n\n      if (isRemoved) {\n        cell.setData(Object.assign(Object.assign({}, cell.getData()), {\n          isNodeSelected: false\n        }));\n        setIsSelected(false);\n        return;\n      }\n    };\n\n    x6Graph.on('selection:changed', handler);\n    return function () {\n      x6Graph.off('selection:changed', handler);\n    };\n    /* eslint-disable-next-line  */\n  }, [x6Graph]);\n  return [isSelected];\n};","map":null,"metadata":{},"sourceType":"module"}