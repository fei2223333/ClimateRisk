{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { requestAnimationFrame, cancelAnimationFrame } from './animationFrame';\nexport var MouseMoveTracker = /*#__PURE__*/function () {\n  function MouseMoveTracker(options) {\n    var _this = this;\n\n    _classCallCheck(this, MouseMoveTracker);\n\n    this.onMouseMove = function (e) {\n      var x = e.clientX;\n      var y = e.clientY;\n      _this.deltaX += x - _this.clientX;\n      _this.deltaY += y - _this.clientY;\n\n      if (_this.animationFrameID == null) {\n        _this.animationFrameID = requestAnimationFrame(_this.triggerOnMouseMoveCallback);\n      }\n\n      _this.clientX = x;\n      _this.clientY = y;\n      e.preventDefault();\n    };\n\n    this.onMouseUp = function () {\n      if (_this.animationFrameID) {\n        cancelAnimationFrame(_this.animationFrameID);\n\n        _this.triggerOnMouseMoveCallback();\n      }\n\n      _this.triggerOnMouseMoveEndCallback(false);\n    };\n\n    this.triggerOnMouseMoveCallback = function () {\n      _this.animationFrameID = null;\n\n      _this.onMouseMoveCallback(_this.deltaX, _this.deltaY, {\n        clientX: _this.clientX,\n        clientY: _this.clientY\n      });\n\n      _this.deltaX = 0;\n      _this.deltaY = 0;\n    };\n\n    this.triggerOnMouseMoveEndCallback = function (cancel) {\n      _this.onMouseMoveEndCallback(cancel);\n    };\n\n    this.elem = options.elem || document.documentElement;\n    this.onMouseMoveCallback = options.onMouseMove;\n    this.onMouseMoveEndCallback = options.onMouseMoveEnd;\n    this.animationFrameID = null;\n  }\n\n  _createClass(MouseMoveTracker, [{\n    key: \"capture\",\n    value: function capture(e) {\n      if (!this.captured) {\n        this.removeMouseMoveEvent = addEventListener(this.elem, 'mousemove', this.onMouseMove).remove;\n        this.removeMouseUpEvent = addEventListener(this.elem, 'mouseup', this.onMouseUp).remove;\n      }\n\n      this.captured = true;\n\n      if (!this.dragging) {\n        this.clientX = e.clientX;\n        this.clientY = e.clientY;\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.dragging = true;\n      }\n\n      e.preventDefault();\n    }\n  }, {\n    key: \"release\",\n    value: function release() {\n      if (this.captured) {\n        if (this.removeMouseMoveEvent != null) {\n          this.removeMouseMoveEvent();\n          this.removeMouseMoveEvent = null;\n        }\n\n        if (this.removeMouseUpEvent != null) {\n          this.removeMouseUpEvent();\n          this.removeMouseUpEvent = null;\n        }\n      }\n\n      this.captured = false;\n\n      if (this.dragging) {\n        this.dragging = false;\n        this.clientX = 0;\n        this.clientY = 0;\n        this.deltaX = 0;\n        this.deltaY = 0;\n      }\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this.dragging;\n    }\n  }]);\n\n  return MouseMoveTracker;\n}();","map":null,"metadata":{},"sourceType":"module"}