{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport React from 'react';\nimport { find, get } from 'lodash';\nimport { Disposable } from '../../common/disposable';\nimport { uuidv4 } from '../../common/uuid';\n/** 保存组件上的配置 */\n\nexport var ExtensionRegistry = /*#__PURE__*/function () {\n  function ExtensionRegistry() {\n    var _this = this;\n\n    _classCallCheck(this, ExtensionRegistry);\n\n    this.extensions = [];\n    this.containerClassNames = new Set();\n\n    this.addCoreModule = function (extension) {\n      // core module 添加在前面\n      _this.extensions.unshift(extension);\n\n      return Disposable.create(function () {\n        _this.removeExtension(extension);\n      });\n    };\n\n    this.addExtension = function (extension) {\n      _this.extensions.push(extension);\n\n      return Disposable.create(function () {\n        _this.removeExtension(extension);\n      });\n    };\n\n    this.getExtension = function (config_type) {\n      return find(_this.extensions, function (extension) {\n        return get(extension, 'config.CONFIG_TYPE') === config_type;\n      });\n    };\n\n    this.removeExtension = function (extension) {\n      var idx = _this.extensions.indexOf(extension);\n\n      if (idx > -1) {\n        _this.extensions.splice(idx, 1);\n      }\n    };\n\n    this.getInstaceId = function () {\n      return _this.instanceId;\n    };\n\n    this.addContainerClassNames = function (clz) {\n      return _this.containerClassNames.add(clz);\n    };\n\n    this.getContainerClassNames = function () {\n      return Array.from(_this.containerClassNames);\n    };\n\n    this.getAllExtensions = function () {\n      return _this.extensions;\n    };\n\n    this.getAllExtensionConfigs = function () {\n      return _this.extensions.map(function (i) {\n        return i.config;\n      });\n    };\n\n    this.instanceId = uuidv4();\n  }\n\n  _createClass(ExtensionRegistry, [{\n    key: \"has\",\n    value: function has(name) {\n      return this.extensions.some(function (ext) {\n        return ext.config.CONFIG_TYPE === name;\n      });\n    }\n  }]);\n\n  return ExtensionRegistry;\n}();\n/** 获取Xflow extension，用于收集React组件的配置 */\n\nexport var createExtensionRegistry = function createExtensionRegistry() {\n  /* eslint-disable-next-line react-hooks/rules-of-hooks */\n  var registry = React.useMemo(function () {\n    return new ExtensionRegistry();\n  }, []);\n  return registry;\n};","map":null,"metadata":{},"sourceType":"module"}