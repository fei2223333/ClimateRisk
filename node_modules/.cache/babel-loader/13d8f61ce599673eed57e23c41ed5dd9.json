{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n// @ts-nocheck\n\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Base } from \"../base\";\nimport { isNumber } from \"../../util\"; // @ts-ignore\n\nimport { World } from \"@antv/g-webgpu\"; // compile at runtime in dev mode\n\nimport { buildTextureData, attributesToTextureData } from \"../../util/gpu\"; // use compiled bundle in prod mode\n\nimport { fruchtermanBundle, clusterBundle } from \"./fruchtermanShader\";\nimport { LAYOUT_MESSAGE } from \"../constants\";\n/**\n * fruchterman 布局\n */\n\nexport var FruchtermanGPULayout = /*#__PURE__*/function (_Base) {\n  _inherits(FruchtermanGPULayout, _Base);\n\n  function FruchtermanGPULayout(options) {\n    var _this;\n\n    _classCallCheck(this, FruchtermanGPULayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FruchtermanGPULayout).call(this));\n    /** 停止迭代的最大迭代数 */\n\n    _this.maxIteration = 1000;\n    /** 重力大小，影响图的紧凑程度 */\n\n    _this.gravity = 10;\n    /** 速度 */\n\n    _this.speed = 1;\n    /** 是否产生聚类力 */\n\n    _this.clustering = false;\n    /** 根据哪个字段聚类 */\n\n    _this.clusterField = \"cluster\";\n    /** 聚类力大小 */\n\n    _this.clusterGravity = 10;\n    /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n\n    _this.workerEnabled = false;\n    _this.nodes = [];\n    _this.edges = [];\n    _this.width = 300;\n    _this.height = 300;\n    _this.nodeMap = {};\n    _this.nodeIdxMap = {};\n\n    _this.updateCfg(options);\n\n    return _this;\n  }\n\n  _createClass(FruchtermanGPULayout, [{\n    key: \"getDefaultCfg\",\n    value: function getDefaultCfg() {\n      return {\n        maxIteration: 1000,\n        gravity: 10,\n        speed: 1,\n        clustering: false,\n        clusterGravity: 10\n      };\n    }\n    /**\n     * 执行布局\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var self, nodes, center, nodeMap, nodeIdxMap;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                self = this;\n                nodes = self.nodes;\n\n                if (!(!nodes || nodes.length === 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                if (self.onLayoutEnd) self.onLayoutEnd();\n                return _context.abrupt(\"return\");\n\n              case 5:\n                if (!self.width && typeof window !== \"undefined\") {\n                  self.width = window.innerWidth;\n                }\n\n                if (!self.height && typeof window !== \"undefined\") {\n                  self.height = window.innerHeight;\n                }\n\n                if (!self.center) {\n                  self.center = [self.width / 2, self.height / 2];\n                }\n\n                center = self.center;\n\n                if (!(nodes.length === 1)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                nodes[0].x = center[0];\n                nodes[0].y = center[1];\n                if (self.onLayoutEnd) self.onLayoutEnd();\n                return _context.abrupt(\"return\");\n\n              case 14:\n                nodeMap = {};\n                nodeIdxMap = {};\n                nodes.forEach(function (node, i) {\n                  if (!isNumber(node.x)) node.x = Math.random() * _this2.width;\n                  if (!isNumber(node.y)) node.y = Math.random() * _this2.height;\n                  nodeMap[node.id] = node;\n                  nodeIdxMap[node.id] = i;\n                });\n                self.nodeMap = nodeMap;\n                self.nodeIdxMap = nodeIdxMap; // layout\n\n                _context.next = 21;\n                return self.run();\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"executeWithWorker\",\n    value: function executeWithWorker(canvas, ctx) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var self, nodes, center, nodeMap, nodeIdxMap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                self = this;\n                nodes = self.nodes;\n                center = self.center;\n\n                if (!(!nodes || nodes.length === 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                if (!(nodes.length === 1)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                nodes[0].x = center[0];\n                nodes[0].y = center[1];\n                return _context2.abrupt(\"return\");\n\n              case 9:\n                nodeMap = {};\n                nodeIdxMap = {};\n                nodes.forEach(function (node, i) {\n                  if (!isNumber(node.x)) node.x = Math.random() * _this3.width;\n                  if (!isNumber(node.y)) node.y = Math.random() * _this3.height;\n                  nodeMap[node.id] = node;\n                  nodeIdxMap[node.id] = i;\n                });\n                self.nodeMap = nodeMap;\n                self.nodeIdxMap = nodeIdxMap; // layout\n\n                _context2.next = 16;\n                return self.run(canvas, ctx);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"run\",\n    value: function run(canvas, ctx) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this4 = this;\n\n        var self, nodes, edges, maxIteration, center, area, maxDisplace, k2, k, speed, clustering, _attributesToTextureD, attributeArray, clusterCount, numParticles, _buildTextureData, maxEdgePerVetex, nodesEdgesArray, workerEnabled, world, onLayoutEnd, clusterCenters, i, kernelFruchterman, kernelCluster, execute;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                self = this;\n                nodes = self.nodes;\n                edges = self.edges;\n                maxIteration = self.maxIteration;\n                center = self.center;\n                area = self.height * self.width;\n                maxDisplace = Math.sqrt(area) / 10;\n                k2 = area / (nodes.length + 1);\n                k = Math.sqrt(k2);\n                speed = self.speed;\n                clustering = self.clustering;\n                _attributesToTextureD = attributesToTextureData([self.clusterField], nodes), attributeArray = _attributesToTextureD.array, clusterCount = _attributesToTextureD.count; // pushing the fx and fy\n\n                nodes.forEach(function (node, i) {\n                  var fx = 0;\n                  var fy = 0;\n\n                  if (isNumber(node.fx) && isNumber(node.fy)) {\n                    fx = node.fx || 0.001;\n                    fy = node.fy || 0.001;\n                  }\n\n                  attributeArray[4 * i + 1] = fx;\n                  attributeArray[4 * i + 2] = fy;\n                });\n                numParticles = nodes.length;\n                _buildTextureData = buildTextureData(nodes, edges), maxEdgePerVetex = _buildTextureData.maxEdgePerVetex, nodesEdgesArray = _buildTextureData.array;\n                workerEnabled = self.workerEnabled;\n\n                if (workerEnabled) {\n                  world = World.create({\n                    canvas: canvas,\n                    engineOptions: {\n                      supportCompute: true\n                    }\n                  });\n                } else {\n                  world = World.create({\n                    engineOptions: {\n                      supportCompute: true\n                    }\n                  });\n                } // compile at runtime in dev mode\n                // const compiler = new Compiler()\n                // const fruchtermanBundle = compiler.compileBundle(fruchtermanCode)\n                // const clusterBundle = compiler.compileBundle(clusterCode)\n                // use compiled bundle in prod mode\n                // console.log(fruchtermanBundle.toString())\n                // console.log(clusterBundle.toString())\n\n\n                onLayoutEnd = self.onLayoutEnd;\n                clusterCenters = [];\n\n                for (i = 0; i < clusterCount; i++) {\n                  clusterCenters.push(0, 0, 0, 0);\n                }\n\n                kernelFruchterman = world.createKernel(fruchtermanBundle).setDispatch([numParticles, 1, 1]).setBinding({\n                  u_Data: nodesEdgesArray,\n                  u_K: k,\n                  u_K2: k2,\n                  u_Gravity: self.gravity,\n                  u_ClusterGravity: self.clusterGravity || self.gravity || 1,\n                  u_Speed: speed,\n                  u_MaxDisplace: maxDisplace,\n                  u_Clustering: clustering ? 1 : 0,\n                  u_Center: center,\n                  u_AttributeArray: attributeArray,\n                  u_ClusterCenters: clusterCenters,\n                  MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n                  VERTEX_COUNT: numParticles\n                });\n\n                if (clustering) {\n                  kernelCluster = world.createKernel(clusterBundle).setDispatch([clusterCount, 1, 1]).setBinding({\n                    u_Data: nodesEdgesArray,\n                    u_NodeAttributes: attributeArray,\n                    u_ClusterCenters: clusterCenters,\n                    VERTEX_COUNT: numParticles,\n                    CLUSTER_COUNT: clusterCount\n                  });\n                }\n\n                execute = function execute() {\n                  return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var _i, finalParticleData;\n\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _i = 0;\n\n                          case 1:\n                            if (!(_i < maxIteration)) {\n                              _context3.next = 13;\n                              break;\n                            }\n\n                            _context3.next = 4;\n                            return kernelFruchterman.execute();\n\n                          case 4:\n                            if (!clustering) {\n                              _context3.next = 9;\n                              break;\n                            }\n\n                            kernelCluster.setBinding({\n                              u_Data: kernelFruchterman\n                            }); // eslint-disable-next-line no-await-in-loop\n\n                            _context3.next = 8;\n                            return kernelCluster.execute();\n\n                          case 8:\n                            kernelFruchterman.setBinding({\n                              u_ClusterCenters: kernelCluster\n                            });\n\n                          case 9:\n                            kernelFruchterman.setBinding({\n                              u_MaxDisplace: maxDisplace *= 0.99\n                            });\n\n                          case 10:\n                            _i++;\n                            _context3.next = 1;\n                            break;\n\n                          case 13:\n                            _context3.next = 15;\n                            return kernelFruchterman.getOutput();\n\n                          case 15:\n                            finalParticleData = _context3.sent;\n\n                            if (canvas) {\n                              // 传递数据给主线程\n                              ctx.postMessage({\n                                type: LAYOUT_MESSAGE.GPUEND,\n                                vertexEdgeData: finalParticleData // edgeIndexBufferData,\n\n                              });\n                            } else {\n                              nodes.forEach(function (node, i) {\n                                var x = finalParticleData[4 * i];\n                                var y = finalParticleData[4 * i + 1];\n                                node.x = x;\n                                node.y = y;\n                              });\n                            }\n\n                            if (onLayoutEnd) onLayoutEnd();\n\n                          case 18:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                };\n\n                _context4.next = 25;\n                return execute();\n\n              case 25:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return \"fruchterman-gpu\";\n    }\n  }]);\n\n  return FruchtermanGPULayout;\n}(Base);","map":null,"metadata":{},"sourceType":"module"}