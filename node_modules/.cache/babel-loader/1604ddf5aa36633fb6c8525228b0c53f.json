{"ast":null,"code":"import _get from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Registry } from '../../registry';\nimport { Markup } from '../../view';\nimport { Node } from '../../model/node';\nimport { NodeView } from '../../view/node';\nimport { Base } from '../base';\nexport var HTML = /*#__PURE__*/function (_Base) {\n  _inherits(HTML, _Base);\n\n  function HTML() {\n    _classCallCheck(this, HTML);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HTML).apply(this, arguments));\n  }\n\n  _createClass(HTML, [{\n    key: \"getHTML\",\n    value: function getHTML() {\n      return this.store.get('html');\n    }\n  }, {\n    key: \"setHTML\",\n    value: function setHTML(html) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (html == null) {\n        this.removeHTML(options);\n      } else {\n        this.store.set('html', html, options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeHTML\",\n    value: function removeHTML() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.store.remove('html', options);\n    }\n  }, {\n    key: \"html\",\n    get: function get() {\n      return this.getHTML();\n    },\n    set: function set(val) {\n      this.setHTML(val);\n    }\n  }]);\n\n  return HTML;\n}(Base);\n\n(function (HTML) {\n  var View = /*#__PURE__*/function (_NodeView) {\n    _inherits(View, _NodeView);\n\n    function View() {\n      _classCallCheck(this, View);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(View).apply(this, arguments));\n    }\n\n    _createClass(View, [{\n      key: \"init\",\n      value: function init() {\n        var _this = this;\n\n        _get(_getPrototypeOf(View.prototype), \"init\", this).call(this);\n\n        this.cell.on('change:*', function () {\n          var shouldUpdate = _this.graph.hook.shouldUpdateHTMLComponent(_this.cell);\n\n          if (shouldUpdate) {\n            _this.renderHTMLComponent();\n          }\n        });\n      }\n    }, {\n      key: \"confirmUpdate\",\n      value: function confirmUpdate(flag) {\n        var _this2 = this;\n\n        var ret = _get(_getPrototypeOf(View.prototype), \"confirmUpdate\", this).call(this, flag);\n\n        return this.handleAction(ret, View.action, function () {\n          return _this2.renderHTMLComponent();\n        });\n      }\n    }, {\n      key: \"renderHTMLComponent\",\n      value: function renderHTMLComponent() {\n        var container = this.selectors.foContent;\n\n        if (container) {\n          var $wrap = this.$(container).empty();\n          var component = this.graph.hook.getHTMLComponent(this.cell);\n\n          if (component) {\n            if (typeof component === 'string') {\n              $wrap.html(component);\n            } else {\n              $wrap.append(component);\n            }\n          }\n        }\n      }\n    }]);\n\n    return View;\n  }(NodeView);\n\n  HTML.View = View;\n\n  (function (View) {\n    View.action = 'html';\n    View.config({\n      bootstrap: [View.action],\n      actions: {\n        html: View.action\n      }\n    });\n    NodeView.registry.register('html-view', View);\n  })(View = HTML.View || (HTML.View = {}));\n})(HTML || (HTML = {}));\n\n(function (HTML) {\n  HTML.config({\n    view: 'html-view',\n    markup: [{\n      tagName: 'rect',\n      selector: 'body'\n    }, Object.assign({}, Markup.getForeignObjectMarkup()), {\n      tagName: 'text',\n      selector: 'label'\n    }],\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%'\n      }\n    }\n  });\n  Node.registry.register('html', HTML);\n})(HTML || (HTML = {}));\n\n(function (HTML) {\n  HTML.componentRegistry = Registry.create({\n    type: 'html componnet'\n  });\n})(HTML || (HTML = {}));","map":null,"metadata":{},"sourceType":"module"}