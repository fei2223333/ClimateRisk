{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nexport var NsHighlightEdge;\n\n(function (NsHighlightEdge) {\n  NsHighlightEdge.command = XFlowEdgeCommands.HIGHLIGHT_EDGE;\n  NsHighlightEdge.hookKey = 'highlightEdge';\n})(NsHighlightEdge || (NsHighlightEdge = {}));\n\nvar HighlightEdgeCommand =\n/*#__PURE__*/\n\n/** 连线高亮 */\nfunction () {\n  function HighlightEdgeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, HighlightEdgeCommand);\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context2.next = 4;\n                return hooks.highlightEdge.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var _a, _b, x6Graph, edgeId, strokeColor, strokeWidth, allEdges, highlightEdge, otherEdges, oldAttr;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return this.ctx.getX6Graph();\n\n                          case 2:\n                            x6Graph = _context.sent;\n                            edgeId = handlerArgs.edgeId, strokeColor = handlerArgs.strokeColor, strokeWidth = handlerArgs.strokeWidth;\n                            allEdges = x6Graph.getEdges();\n                            /** 需要高亮的连线 */\n\n                            /** 需要高亮的连线 */\n                            highlightEdge = allEdges.find(function (edge) {\n                              return edge.id === edgeId;\n                            });\n                            /** 不需要高亮的连线 */\n\n                            /** 不需要高亮的连线 */\n                            otherEdges = allEdges.filter(function (edge) {\n                              return edge.id !== edgeId;\n                            });\n\n                            if (!highlightEdge) {\n                              console.error(edgeId, 'this edgeId is not exist');\n                            } else {\n                              oldAttr = highlightEdge.getAttrs();\n\n                              if (((_a = oldAttr === null || oldAttr === void 0 ? void 0 : oldAttr.line) === null || _a === void 0 ? void 0 : _a.stroke) === strokeColor && ((_b = oldAttr === null || oldAttr === void 0 ? void 0 : oldAttr.line) === null || _b === void 0 ? void 0 : _b.strokeWidth) === strokeWidth) {\n                                /** 连线已经高亮, 不需要重复操作 */\n                              } else {\n                                /** 高亮选中的连线 */\n                                highlightEdge === null || highlightEdge === void 0 ? void 0 : highlightEdge.setAttrs({\n                                  line: {\n                                    stroke: strokeColor,\n                                    strokeWidth: strokeWidth || 2\n                                  }\n                                });\n                                /** 其余连线取消高亮状态 */\n\n                                /** 其余连线取消高亮状态 */\n                                otherEdges.forEach(function (edge) {\n                                  edge.setAttrs({\n                                    line: oldAttr === null || oldAttr === void 0 ? void 0 : oldAttr.line\n                                  });\n                                });\n                                /** 高亮的连线默认前置在画布最前方 */\n\n                                /** 高亮的连线默认前置在画布最前方 */\n                                handlerArgs.commandService.executeCommand(XFlowEdgeCommands.FRONT_EDGE.id, {\n                                  edgeId: edgeId\n                                });\n                              }\n                            }\n\n                            return _context.abrupt(\"return\", {});\n\n                          case 9:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context2.sent;\n                this.ctx.setResult(result);\n                return _context2.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.ctx.undo();\n                return _context3.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.ctx.isUndoable) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context4.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n  }\n\n  _createClass(HighlightEdgeCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n  }]);\n\n  return HighlightEdgeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], HighlightEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], HighlightEdgeCommand.prototype, \"init\", null);\n\nHighlightEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsHighlightEdge.command.id\n  }\n})\n/** 连线高亮 */\n], HighlightEdgeCommand);\nexport { HighlightEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}