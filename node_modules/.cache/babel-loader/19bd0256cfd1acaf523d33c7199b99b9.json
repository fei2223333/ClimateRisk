{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelEdge;\n\n(function (NsDelEdge) {\n  /** Command: 用于注册named factory */\n  NsDelEdge.command = XFlowEdgeCommands.DEL_EDGE;\n  /** hookName */\n\n  NsDelEdge.hookKey = 'delEdge';\n  var ErrEnum;\n\n  (function (ErrEnum) {\n    ErrEnum[\"EDGE_NOT_EXIST\"] = \"edge is not exist\";\n    ErrEnum[\"EDGE_INVALID_CELL\"] = \"this is not a valid cell\";\n    ErrEnum[\"X6_DELETE_FAILED\"] = \"x6 throw err when call delete edge\";\n    ErrEnum[\"SERVICE_REJECT\"] = \"service reject to delete\";\n  })(ErrEnum = NsDelEdge.ErrEnum || (NsDelEdge.ErrEnum = {}));\n})(NsDelEdge || (NsDelEdge = {}));\n\nvar DelEdgeCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function DelEdgeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, DelEdgeCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context2.next = 4;\n                return hooks.delEdge.call(\n                /** 执行 hooks pipeline处理args */\n                args,\n                /** 执行 callback */\n                function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var edgeConfig, x6Edge, deleteEdgeService, commandService, options, edgeCell, isEdge, canDelete, targetCell, sourceCell, sourcePortId, targetPortId, source, target, undo;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            edgeConfig = handlerArgs.edgeConfig, x6Edge = handlerArgs.x6Edge, deleteEdgeService = handlerArgs.deleteEdgeService, commandService = handlerArgs.commandService, options = handlerArgs.options;\n                            edgeCell = x6Edge;\n                            /** 没有edgeCell时查找cell */\n\n                            if (edgeCell) {\n                              _context.next = 9;\n                              break;\n                            }\n\n                            _context.next = 5;\n                            return this.findEdgeById(edgeConfig);\n\n                          case 5:\n                            edgeCell = _context.sent;\n\n                            if (edgeCell) {\n                              _context.next = 9;\n                              break;\n                            }\n\n                            console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeConfig);\n                            return _context.abrupt(\"return\", {\n                              err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n                            });\n\n                          case 9:\n                            isEdge = edgeCell && edgeCell.isEdge();\n\n                            if (isEdge) {\n                              _context.next = 13;\n                              break;\n                            }\n\n                            console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeCell);\n                            return _context.abrupt(\"return\", {\n                              err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n                            });\n\n                          case 13:\n                            if (!deleteEdgeService) {\n                              _context.next = 19;\n                              break;\n                            }\n\n                            _context.next = 16;\n                            return deleteEdgeService(handlerArgs);\n\n                          case 16:\n                            canDelete = _context.sent;\n\n                            if (canDelete) {\n                              _context.next = 19;\n                              break;\n                            }\n\n                            return _context.abrupt(\"return\", {\n                              err: NsDelEdge.ErrEnum.SERVICE_REJECT\n                            });\n\n                          case 19:\n                            _context.prev = 19;\n                            targetCell = edgeCell.getTargetCell();\n                            sourceCell = edgeCell.getSourceCell();\n                            sourcePortId = edgeCell.getSourcePortId();\n                            targetPortId = edgeCell.getTargetPortId();\n                            source = sourceCell.id;\n                            target = targetCell.id;\n                            /** 执行remove */\n\n                            /** 执行remove */\n                            edgeCell.remove(Object.assign(Object.assign({}, options), {\n                              isCommand: true\n                            }));\n                            /** 创建 undo */\n\n                            /** 创建 undo */\n                            undo = Disposable.create(function () {\n                              commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                                edgeConfig: {\n                                  source: source,\n                                  target: target,\n                                  sourcePortId: sourcePortId,\n                                  targetPortId: targetPortId\n                                }\n                              });\n                            });\n                            /** add undo */\n\n                            /** add undo */\n                            this.ctx.addUndo(undo);\n                            return _context.abrupt(\"return\", {\n                              err: null,\n                              edgeConfig: {\n                                source: source,\n                                target: target,\n                                sourcePortId: sourcePortId,\n                                targetPortId: targetPortId\n                              },\n                              targetCell: targetCell,\n                              sourceCell: sourceCell,\n                              sourcePortId: sourcePortId,\n                              targetPortId: targetPortId\n                            });\n\n                          case 32:\n                            _context.prev = 32;\n                            _context.t0 = _context[\"catch\"](19);\n                            console.error(NsDelEdge.ErrEnum.X6_DELETE_FAILED, _context.t0);\n                            return _context.abrupt(\"return\", {\n                              err: NsDelEdge.ErrEnum.X6_DELETE_FAILED\n                            });\n\n                          case 36:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this, [[19, 32]]);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context2.sent;\n                this.ctx.setResult(result);\n                return _context2.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n\n    this.findEdgeById = function (edge) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var graph, cell;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.ctx.getX6Graph();\n\n              case 2:\n                graph = _context3.sent;\n                cell = graph.getCellById(edge.id);\n                return _context3.abrupt(\"return\", cell);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.ctx.undo();\n                return _context4.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.isUndoable) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(DelEdgeCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n  }]);\n\n  return DelEdgeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], DelEdgeCommand.prototype, \"init\", null);\n\nDelEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelEdge.command.id\n  }\n})\n/** 创建节点命令 */\n], DelEdgeCommand);\nexport { DelEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}