{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { FunctionExt } from '../../util';\nimport { grid } from '../../layout/grid';\nimport { Node } from '../../model/node';\nimport { Model } from '../../model/model';\nimport { View } from '../../view/view';\nimport { Graph } from '../../graph/graph';\nimport { Dnd } from '../dnd';\nexport var Stencil = /*#__PURE__*/function (_View) {\n  _inherits(Stencil, _View);\n\n  function Stencil(options) {\n    var _this;\n\n    _classCallCheck(this, Stencil);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stencil).call(this));\n    _this.graphs = {};\n    _this.$groups = {};\n    _this.options = Object.assign(Object.assign({}, Stencil.defaultOptions), options);\n    _this.dnd = new Dnd(_this.options);\n    _this.onSearch = FunctionExt.debounce(_this.onSearch, 200);\n    _this.container = document.createElement('div');\n    _this.$container = _this.$(_this.container).addClass(_this.prefixClassName(ClassNames.base)).attr('data-not-found-text', _this.options.notFoundText || 'No matches found');\n    _this.options.collapsable = options.collapsable && options.groups && options.groups.some(function (group) {\n      return group.collapsable !== false;\n    });\n\n    if (_this.options.collapsable) {\n      _this.$container.addClass('collapsable');\n\n      var collapsed = options.groups && options.groups.every(function (group) {\n        return group.collapsed || group.collapsable === false;\n      });\n\n      if (collapsed) {\n        _this.$container.addClass('collapsed');\n      }\n    }\n\n    _this.$('<div/>').addClass(_this.prefixClassName(ClassNames.title)).html(_this.options.title).appendTo(_this.$container);\n\n    if (options.search) {\n      _this.$container.addClass('searchable').append(_this.renderSearch());\n    }\n\n    _this.$content = _this.$('<div/>').addClass(_this.prefixClassName(ClassNames.content)).appendTo(_this.$container);\n    var globalGraphOptions = options.stencilGraphOptions || {};\n\n    if (options.groups && options.groups.length) {\n      options.groups.forEach(function (group) {\n        var $group = _this.$('<div/>').addClass(_this.prefixClassName(ClassNames.group)).attr('data-name', group.name);\n\n        if (group.collapsable == null && options.collapsable || group.collapsable !== false) {\n          $group.addClass('collapsable');\n        }\n\n        $group.toggleClass('collapsed', group.collapsed === true);\n\n        var $title = _this.$('<h3/>').addClass(_this.prefixClassName(ClassNames.groupTitle)).html(group.title || group.name);\n\n        var $content = _this.$('<div/>').addClass(_this.prefixClassName(ClassNames.groupContent));\n\n        var graphOptionsInGroup = group.graphOptions;\n        var graph = new Graph(Object.assign(Object.assign(Object.assign({}, globalGraphOptions), graphOptionsInGroup), {\n          container: document.createElement('div'),\n          model: globalGraphOptions.model || new Model(),\n          width: group.graphWidth || options.stencilGraphWidth,\n          height: group.graphHeight || options.stencilGraphHeight,\n          interacting: false,\n          preventDefaultBlankAction: false\n        }));\n        $content.append(graph.container);\n        $group.append($title, $content).appendTo(_this.$content);\n        _this.$groups[group.name] = $group;\n        _this.graphs[group.name] = graph;\n      });\n    } else {\n      var graph = new Graph(Object.assign(Object.assign({}, globalGraphOptions), {\n        container: document.createElement('div'),\n        model: globalGraphOptions.model || new Model(),\n        width: options.stencilGraphWidth,\n        height: options.stencilGraphHeight,\n        interacting: false,\n        preventDefaultBlankAction: false\n      }));\n\n      _this.$content.append(graph.container);\n\n      _this.graphs[Private.defaultGroupName] = graph;\n    }\n\n    _this.startListening();\n\n    return _possibleConstructorReturn(_this, _assertThisInitialized(_assertThisInitialized(_this)));\n  }\n\n  _createClass(Stencil, [{\n    key: \"renderSearch\",\n    value: function renderSearch() {\n      return this.$('<div/>').addClass(this.prefixClassName(ClassNames.search)).append(this.$('<input/>').attr({\n        type: 'search',\n        placeholder: this.options.placeholder || 'Search'\n      }).addClass(this.prefixClassName(ClassNames.searchText)));\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      var _this$delegateEvents,\n          _this2 = this;\n\n      var title = this.prefixClassName(ClassNames.title);\n      var searchText = this.prefixClassName(ClassNames.searchText);\n      var groupTitle = this.prefixClassName(ClassNames.groupTitle);\n      this.delegateEvents((_this$delegateEvents = {}, _defineProperty(_this$delegateEvents, \"click .\".concat(title), 'onTitleClick'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(title), 'onTitleClick'), _defineProperty(_this$delegateEvents, \"click .\".concat(groupTitle), 'onGroupTitleClick'), _defineProperty(_this$delegateEvents, \"touchstart .\".concat(groupTitle), 'onGroupTitleClick'), _defineProperty(_this$delegateEvents, \"input .\".concat(searchText), 'onSearch'), _defineProperty(_this$delegateEvents, \"focusin .\".concat(searchText), 'onSearchFocusIn'), _defineProperty(_this$delegateEvents, \"focusout .\".concat(searchText), 'onSearchFocusOut'), _this$delegateEvents));\n      Object.keys(this.graphs).forEach(function (groupName) {\n        var graph = _this2.graphs[groupName];\n        graph.on('cell:mousedown', _this2.onDragStart, _this2);\n      });\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      var _this3 = this;\n\n      this.undelegateEvents();\n      Object.keys(this.graphs).forEach(function (groupName) {\n        var graph = _this3.graphs[groupName];\n        graph.off('cell:mousedown', _this3.onDragStart, _this3);\n      });\n    }\n  }, {\n    key: \"load\",\n    value: function load(data, groupName) {\n      var _this4 = this;\n\n      if (Array.isArray(data)) {\n        this.loadGroup(data, groupName);\n      } else if (this.options.groups) {\n        Object.keys(this.options.groups).forEach(function (groupName) {\n          if (data[groupName]) {\n            _this4.loadGroup(data[groupName], groupName);\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"loadGroup\",\n    value: function loadGroup(cells, groupName) {\n      var model = this.getModel(groupName);\n\n      if (model) {\n        var nodes = cells.map(function (cell) {\n          return Node.isNode(cell) ? cell : Node.create(cell);\n        });\n        model.resetCells(nodes);\n      }\n\n      var group = this.getGroup(groupName);\n      var height = this.options.stencilGraphHeight;\n\n      if (group && group.graphHeight != null) {\n        height = group.graphHeight;\n      }\n\n      var layout = group && group.layout || this.options.layout;\n\n      if (layout && model) {\n        FunctionExt.call(layout, this, model, group);\n      }\n\n      if (!height) {\n        var graph = this.getGraph(groupName);\n        graph.fitToContent({\n          minWidth: graph.options.width,\n          gridHeight: 1,\n          padding: group && group.graphPadding || this.options.stencilGraphPadding || 10\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(args) {\n      var e = args.e,\n          node = args.node;\n      this.dnd.start(node, e);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(keyword, _filter) {\n      var _this5 = this;\n\n      var found = Object.keys(this.graphs).reduce(function (memo, groupName) {\n        var graph = _this5.graphs[groupName];\n        var name = groupName === Private.defaultGroupName ? null : groupName;\n        var items = graph.model.getNodes().filter(function (cell) {\n          var matched = false;\n\n          if (typeof _filter === 'function') {\n            matched = FunctionExt.call(_filter, _this5, cell, keyword, name, _this5);\n          } else if (typeof _filter === 'boolean') {\n            matched = _filter;\n          } else {\n            matched = _this5.isCellMatched(cell, keyword, _filter, keyword.toLowerCase() !== keyword);\n          }\n\n          var view = graph.renderer.findViewByCell(cell);\n\n          if (view) {\n            view.$(view.container).toggleClass('unmatched', !matched);\n          }\n\n          return matched;\n        });\n        var found = items.length > 0;\n        var options = _this5.options;\n        var model = new Model();\n        model.resetCells(items);\n\n        if (options.layout) {\n          FunctionExt.call(options.layout, _this5, model, _this5.getGroup(groupName));\n        }\n\n        if (_this5.$groups[groupName]) {\n          _this5.$groups[groupName].toggleClass('unmatched', !found);\n        }\n\n        graph.fitToContent({\n          gridWidth: 1,\n          gridHeight: 1,\n          padding: options.stencilGraphPadding || 10\n        });\n        return memo || found;\n      }, false);\n      this.$container.toggleClass('not-found', !found);\n    }\n  }, {\n    key: \"isCellMatched\",\n    value: function isCellMatched(cell, keyword, filters, ignoreCase) {\n      if (keyword && filters) {\n        return Object.keys(filters).some(function (shape) {\n          if (shape === '*' || cell.shape === shape) {\n            var filter = filters[shape];\n\n            if (typeof filter === 'boolean') {\n              return filter;\n            }\n\n            var paths = Array.isArray(filter) ? filter : [filter];\n            return paths.some(function (path) {\n              var val = cell.getPropByPath(path);\n\n              if (val != null) {\n                val = \"\".concat(val);\n\n                if (!ignoreCase) {\n                  val = val.toLowerCase();\n                }\n\n                return val.indexOf(keyword) >= 0;\n              }\n\n              return false;\n            });\n          }\n\n          return false;\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onSearch\",\n    value: function onSearch(evt) {\n      this.filter(evt.target.value, this.options.search);\n    }\n  }, {\n    key: \"onSearchFocusIn\",\n    value: function onSearchFocusIn() {\n      this.$container.addClass('is-focused');\n    }\n  }, {\n    key: \"onSearchFocusOut\",\n    value: function onSearchFocusOut() {\n      this.$container.removeClass('is-focused');\n    }\n  }, {\n    key: \"onTitleClick\",\n    value: function onTitleClick() {\n      if (this.options.collapsable) {\n        this.$container.toggleClass('collapsed');\n\n        if (this.$container.hasClass('collapsed')) {\n          this.collapseGroups();\n        } else {\n          this.expandGroups();\n        }\n      }\n    }\n  }, {\n    key: \"onGroupTitleClick\",\n    value: function onGroupTitleClick(evt) {\n      var _this6 = this;\n\n      var $group = this.$(evt.target).closest(\".\".concat(this.prefixClassName(ClassNames.group)));\n      this.toggleGroup($group.attr('data-name') || '');\n      var allCollapsed = Object.keys(this.$groups).every(function (name) {\n        var group = _this6.getGroup(name);\n\n        var $group = _this6.$groups[name];\n        return group && group.collapsable === false || $group.hasClass('collapsed');\n      });\n      this.$container.toggleClass('collapsed', allCollapsed);\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(groupName) {\n      var graph = this.getGraph(groupName);\n      return graph ? graph.model : null;\n    }\n  }, {\n    key: \"getGraph\",\n    value: function getGraph(groupName) {\n      return this.graphs[groupName || Private.defaultGroupName];\n    }\n  }, {\n    key: \"getGroup\",\n    value: function getGroup(groupName) {\n      var groups = this.options.groups;\n\n      if (groupName != null && groups && groups.length) {\n        return groups.find(function (group) {\n          return group.name === groupName;\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"toggleGroup\",\n    value: function toggleGroup(groupName) {\n      if (this.isGroupCollapsed(groupName)) {\n        this.expandGroup(groupName);\n      } else {\n        this.collapseGroup(groupName);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"collapseGroup\",\n    value: function collapseGroup(groupName) {\n      if (this.isGroupCollapsable(groupName)) {\n        var $group = this.$groups[groupName];\n\n        if ($group && !this.isGroupCollapsed(groupName)) {\n          this.trigger('group:collapse', {\n            name: groupName\n          });\n          $group.addClass('collapsed');\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"expandGroup\",\n    value: function expandGroup(groupName) {\n      if (this.isGroupCollapsable(groupName)) {\n        var $group = this.$groups[groupName];\n\n        if ($group && this.isGroupCollapsed(groupName)) {\n          this.trigger('group:expand', {\n            name: groupName\n          });\n          $group.removeClass('collapsed');\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"isGroupCollapsable\",\n    value: function isGroupCollapsable(groupName) {\n      var $group = this.$groups[groupName];\n      return $group.hasClass('collapsable');\n    }\n  }, {\n    key: \"isGroupCollapsed\",\n    value: function isGroupCollapsed(groupName) {\n      var $group = this.$groups[groupName];\n      return $group && $group.hasClass('collapsed');\n    }\n  }, {\n    key: \"collapseGroups\",\n    value: function collapseGroups() {\n      var _this7 = this;\n\n      Object.keys(this.$groups).forEach(function (groupName) {\n        return _this7.collapseGroup(groupName);\n      });\n      return this;\n    }\n  }, {\n    key: \"expandGroups\",\n    value: function expandGroups() {\n      var _this8 = this;\n\n      Object.keys(this.$groups).forEach(function (groupName) {\n        return _this8.expandGroup(groupName);\n      });\n      return this;\n    }\n  }, {\n    key: \"resizeGroup\",\n    value: function resizeGroup(groupName, size) {\n      var graph = this.graphs[groupName];\n\n      if (graph) {\n        graph.resize(size.width, size.height);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      var _this9 = this;\n\n      Object.keys(this.graphs).forEach(function (groupName) {\n        var graph = _this9.graphs[groupName];\n        graph.view.remove();\n        delete _this9.graphs[groupName];\n      });\n      this.dnd.remove();\n      this.stopListening();\n      this.undelegateDocumentEvents();\n    }\n  }, {\n    key: \"targetScroller\",\n    get: function get() {\n      var target = this.options.target;\n      return Graph.isGraph(target) ? target.scroller.widget : target;\n    }\n  }, {\n    key: \"targetGraph\",\n    get: function get() {\n      var target = this.options.target;\n      return Graph.isGraph(target) ? target : target.graph;\n    }\n  }, {\n    key: \"targetModel\",\n    get: function get() {\n      return this.targetGraph.model;\n    }\n  }]);\n\n  return Stencil;\n}(View);\n\n(function (Stencil) {\n  Stencil.defaultOptions = Object.assign({\n    stencilGraphWidth: 200,\n    stencilGraphHeight: 800,\n    title: 'Stencil',\n    collapsable: false,\n    placeholder: 'Search',\n    notFoundText: 'No matches found',\n    layout: function layout(model, group) {\n      var options = {\n        columnWidth: this.options.stencilGraphWidth / 2 - 10,\n        columns: 2,\n        rowHeight: 80,\n        resizeToFit: false,\n        dx: 10,\n        dy: 10\n      };\n      grid(model, Object.assign(Object.assign(Object.assign({}, options), this.options.layoutOptions), group ? group.layoutOptions : {}));\n    }\n  }, Dnd.defaults);\n})(Stencil || (Stencil = {}));\n\nvar ClassNames;\n\n(function (ClassNames) {\n  ClassNames.base = 'widget-stencil';\n  ClassNames.title = \"\".concat(ClassNames.base, \"-title\");\n  ClassNames.search = \"\".concat(ClassNames.base, \"-search\");\n  ClassNames.searchText = \"\".concat(ClassNames.search, \"-text\");\n  ClassNames.content = \"\".concat(ClassNames.base, \"-content\");\n  ClassNames.group = \"\".concat(ClassNames.base, \"-group\");\n  ClassNames.groupTitle = \"\".concat(ClassNames.group, \"-title\");\n  ClassNames.groupContent = \"\".concat(ClassNames.group, \"-content\");\n})(ClassNames || (ClassNames = {}));\n\nvar Private;\n\n(function (Private) {\n  Private.defaultGroupName = '__default__';\n})(Private || (Private = {}));","map":null,"metadata":{},"sourceType":"module"}