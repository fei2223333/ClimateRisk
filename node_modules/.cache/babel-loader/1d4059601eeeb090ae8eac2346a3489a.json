{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// @ts-ignore\nimport glib from '@dagrejs/graphlib';\nvar graphlib = glib;\n\nif (!graphlib && typeof window !== \"undefined\") {\n  graphlib = window.graphlib;\n}\n\nif (!Array.prototype.flat) {\n  // @ts-ignore\n  Array.prototype.flat = function (count) {\n    var c = count || 1;\n    if (!isFinite(c)) return;\n    var len = this.length;\n    var ret = [];\n    if (this.length === 0) return this;\n\n    while (c--) {\n      var arr = [];\n      var flag = false;\n\n      if (ret.length === 0) {\n        flag = true;\n\n        for (var i = 0; i < len; i++) {\n          if (this[i] instanceof Array) {\n            var _ret;\n\n            (_ret = ret).push.apply(_ret, _toConsumableArray(this[i]));\n          } else {\n            ret.push(this[i]);\n          }\n        }\n      } else {\n        for (var _i = 0; _i < ret.length; _i++) {\n          if (ret[_i] instanceof Array) {\n            flag = true;\n            arr.push.apply(arr, _toConsumableArray(ret[_i]));\n          } else {\n            arr.push(ret[_i]);\n          }\n        }\n\n        ret = arr;\n      }\n\n      if (!flag && c === Infinity) {\n        break;\n      }\n    }\n\n    return ret;\n  };\n}\n\nexport default graphlib;","map":null,"metadata":{},"sourceType":"module"}