{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { __decorate, __metadata } from \"tslib\";\nimport 'reflect-metadata';\nimport { singleton, inject, contrib, Contribution } from 'mana-syringe';\nimport debounce from 'lodash/debounce';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isBoolean from 'lodash/isBoolean';\nimport { Disposable, DisposableCollection } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { RxModel } from '../common/rx-model';\nimport { IGraphCommandService } from '../command';\nimport { IModelService } from '../model-service';\nimport { IToolbarService, IToolbarContribution } from './interface';\n/**\n * Main, shared registry for toolbar items.\n */\n\nvar ToolbarRegistry = /*#__PURE__*/function () {\n  function ToolbarRegistry() {\n    var _this = this;\n\n    _classCallCheck(this, ToolbarRegistry);\n\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** 储存所有toolbar items */\n\n    this.toolbarItems = new Map();\n    /** 注册ToolbarRegistry的onChange的事件 */\n\n    this.onDidChangeEvent = new RxModel(null);\n    /** 通过ToolbarRegistry.onDidChange监听ToolbarRegistry items的变化  */\n\n    this.onDidChange = this.onDidChangeEvent.watch;\n    /** debounce in order to avoid to fire more than once in the same tick */\n\n    this.fireOnDidChange = debounce(function () {\n      return _this.onDidChangeEvent.setValue(undefined);\n    }, 16);\n    /**\n     * 批量注册可单独dispose的扩展项目\n     * @param externalRegisterFn IRegisterMenuFunction\n     */\n\n    this.registerDisposableToolbar = function (externalRegisterFn) {\n      var toDispose = new DisposableCollection();\n      var disposableRegistry = {\n        registerToolbarItem: function registerToolbarItem(config) {\n          var disposable = _this.registerItem(config);\n\n          toDispose.push(disposable);\n          return disposable;\n        }\n      };\n      externalRegisterFn(disposableRegistry);\n\n      _this.toDispose.push(toDispose);\n\n      return toDispose;\n    };\n    /**\n     * 获取 ToolbarModel\n     * @param toolbarConfig IToolbarOptions\n     */\n\n\n    this.getToolbarModel = function (toolbarConfig) {\n      var layout = toolbarConfig.layout,\n          _toolbarConfig$mainGr = toolbarConfig.mainGroups,\n          mainGroups = _toolbarConfig$mainGr === void 0 ? [] : _toolbarConfig$mainGr,\n          _toolbarConfig$extraG = toolbarConfig.extraGroups,\n          extraGroups = _toolbarConfig$extraG === void 0 ? [] : _toolbarConfig$extraG;\n      return new RxModel({\n        layout: layout,\n        mainGroups: _this.createToolbarGroupModel(mainGroups),\n        extraGroups: _this.createToolbarGroupModel(extraGroups)\n      });\n    };\n    /**\n     * 创建 ToolbarModel\n     * @param groups IToolbarGroupOptions[]\n     */\n\n\n    this.createToolbarGroupModel = function (groups) {\n      var groupModels = groups.map(function (group) {\n        var _group$items = group.items,\n            items = _group$items === void 0 ? [] : _group$items;\n        return Object.assign(Object.assign({}, group), {\n          items: items.map(function (item) {\n            return _this.createToolbarModel({\n              id: item.id\n            });\n          }).filter(function (i) {\n            return !!i;\n          })\n        });\n      });\n      return groupModels;\n    };\n  }\n  /** App启动时，收集Toolbar扩展点的注册项 */\n\n\n  _createClass(ToolbarRegistry, [{\n    key: \"onStart\",\n    value: function onStart() {\n      var contributions = this.contributionProvider.getContributions();\n\n      var _iterator = _createForOfIteratorHelper(contributions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var contribution = _step.value;\n          contribution.registerToolbarItems(this);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * App 销毁时调用\n     * dispose toolbarProvider\n     */\n\n  }, {\n    key: \"onStop\",\n    value: function onStop() {\n      this.toDispose.dispose();\n    }\n    /**\n     * 注册ToolbarItem\n     * item所需的command需要提前在command registry注册\n     * @param config IToolbarItem\n     */\n\n  }, {\n    key: \"registerItem\",\n    value: function registerItem(config) {\n      var _this2 = this;\n\n      if (this.toolbarItems.has(config.id)) {\n        console.warn(\"ToolbarRegistry \".concat(config.id, \" is duplicated, in\"), config);\n      }\n      /** 注册 */\n\n\n      this.toolbarItems.set(config.id, config);\n      /** 通知更新 */\n\n      this.fireOnDidChange();\n      var toDispose = new DisposableCollection(Disposable.create(function () {\n        return _this2.fireOnDidChange();\n      }), Disposable.create(function () {\n        return _this2.toolbarItems.delete(config.id);\n      }));\n      return toDispose;\n    }\n    /**\n     * 创建 ToolbarModel\n     * @param option IToolbarItem\n     */\n\n  }, {\n    key: \"createToolbarModel\",\n    value: function createToolbarModel(option) {\n      var item = cloneDeep(this.toolbarItems.get(option.id));\n      var isEnabled = isBoolean(item.isEnabled) ? item.isEnabled : true;\n      var isVisible = isBoolean(item.isVisible) ? item.isVisible : true;\n      var toolbarItem = Object.assign(Object.assign({}, item), {\n        isEnabled: isEnabled,\n        isVisible: isVisible,\n        iconName: item.iconName,\n        text: item.text\n      });\n      return toolbarItem;\n    }\n  }]);\n\n  return ToolbarRegistry;\n}();\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], ToolbarRegistry.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], ToolbarRegistry.prototype, \"modelService\", void 0);\n\n__decorate([contrib(IToolbarContribution), __metadata(\"design:type\", Object)], ToolbarRegistry.prototype, \"contributionProvider\", void 0);\n\nToolbarRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IToolbarService]\n})], ToolbarRegistry);\nexport { ToolbarRegistry };","map":null,"metadata":{},"sourceType":"module"}