{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport React from 'react';\n/** AppContext */\n\nexport var XFlowAppContext = React.createContext(null);\nXFlowAppContext.displayName = 'XFlowAppContext';\n/** AppContext:获取 app */\n\nexport var useXFlowApp = function useXFlowApp() {\n  var container = React.useContext(XFlowAppContext);\n  return container && container.getApp ? container.getApp() : null;\n};\n/** AppContext: 获取 appContainer */\n\nexport var useXFlowAppContainer = function useXFlowAppContainer() {\n  return React.useContext(XFlowAppContext);\n};\n\nvar AppContainer = function AppContainer() {\n  var _this = this;\n\n  var isUserDefined = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  _classCallCheck(this, AppContainer);\n\n  this.cache = null;\n\n  this.setApp = function (app) {\n    _this.cache = app;\n\n    if (_this.onAppChangeCallback) {\n      _this.onAppChangeCallback(app);\n    }\n  };\n\n  this.isUserDefined = function () {\n    return _this.isUserDefinedFlag;\n  };\n\n  this.getApp = function () {\n    return _this.cache;\n  };\n\n  this.onAppChange = function (cb) {\n    _this.onAppChangeCallback = cb;\n  };\n\n  this.dispose = function () {\n    _this.cache = null;\n  };\n\n  this.isUserDefinedFlag = isUserDefined;\n};\n/** XFlow内部使用 */\n\n\nexport var XFlowAppInternalProvider = function XFlowAppInternalProvider(props) {\n  var userDefinedAppContainer = useXFlowAppContainer();\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      setTick = _React$useState2[1];\n\n  var appContainer = React.useMemo(function () {\n    return userDefinedAppContainer && userDefinedAppContainer.isUserDefined() ? userDefinedAppContainer : new AppContainer(false); // 不要移除：保证config只生成一次\n    // eslint-disable-next-line\n  }, []); // set appChange callback\n\n  if (!appContainer.isUserDefined()) {\n    appContainer.onAppChange(function () {\n      return setTick(0);\n    });\n  }\n\n  React.useEffect(function () {\n    if (props.app) {\n      appContainer.setApp(props.app);\n    } // 不要移除：只关心 props.app\n    // eslint-disable-next-line\n\n  }, [props.app]);\n\n  if (appContainer.isUserDefined()) {\n    return React.createElement(React.Fragment, null, props.children);\n  }\n\n  return React.createElement(XFlowAppContext.Provider, {\n    value: Object.assign({}, appContainer)\n  }, props.children);\n};\nXFlowAppInternalProvider.displayName = 'XFlowAppInternalProvider';\n/** XFlow外部使用 */\n\nexport var XFlowAppProvider = function XFlowAppProvider(_ref) {\n  var children = _ref.children;\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      setTick = _React$useState4[1];\n\n  var appContainer = React.useMemo(function () {\n    return new AppContainer(true);\n  }, []); // add callback\n\n  appContainer.onAppChange(function () {\n    return setTick(0);\n  });\n  return React.createElement(XFlowAppContext.Provider, {\n    value: Object.assign({}, appContainer)\n  }, children);\n};\nXFlowAppProvider.displayName = 'XFlowAppProvider';","map":null,"metadata":{},"sourceType":"module"}