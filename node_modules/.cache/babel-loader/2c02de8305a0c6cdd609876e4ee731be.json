{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { XFlowConstants } from '@antv/xflow-core';\nimport { Popover } from 'antd';\nexport var renderNode = function renderNode(props) {\n  var nodeConfig = props.nodeConfig,\n      onMouseDown = props.onMouseDown,\n      graphConfig = props.graphConfig,\n      modelService = props.modelService,\n      commandService = props.commandService;\n\n  if (!graphConfig) {\n    return React.createElement(\"div\", null);\n  }\n\n  if (nodeConfig.renderComponent) {\n    return React.createElement(\"div\", {\n      onMouseDown: onMouseDown\n    }, React.createElement(nodeConfig.renderComponent, {\n      data: nodeConfig,\n      isNodePanel: true\n    }));\n  }\n\n  var renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFlowConstants.XFLOW_DEFAULT_NODE;\n  var reactComponent = graphConfig.nodeRender.get(renderKey);\n  return React.createElement(\"div\", {\n    onMouseDown: onMouseDown\n  }, React.createElement(reactComponent, {\n    commandService: commandService,\n    modelService: modelService,\n    data: nodeConfig,\n    isNodeTreePanel: true\n  }));\n};\nexport var PanelNode = function PanelNode(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isVisible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var prefixClz = props.prefixClz,\n      graphConfig = props.graphConfig,\n      commandService = props.commandService,\n      modelService = props.modelService,\n      popoverContent = props.popoverContent,\n      onMouseDown = props.onMouseDown,\n      item = props.item;\n  return React.createElement(React.Fragment, null, popoverContent ? React.createElement(Popover, {\n    placement: \"right\",\n    destroyTooltipOnHide: true,\n    content: popoverContent,\n    visible: isVisible,\n    onVisibleChange: function onVisibleChange(val) {\n      setVisible(val);\n    }\n  }, React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-node-wrapper\"),\n    onMouseEnter: function onMouseEnter() {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig: graphConfig,\n    commandService: commandService,\n    onMouseDown: onMouseDown,\n    modelService: modelService,\n    nodeConfig: item\n  }))) : React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-node-wrapper\")\n  }, renderNode({\n    graphConfig: graphConfig,\n    commandService: commandService,\n    onMouseDown: onMouseDown,\n    modelService: modelService,\n    nodeConfig: item\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}