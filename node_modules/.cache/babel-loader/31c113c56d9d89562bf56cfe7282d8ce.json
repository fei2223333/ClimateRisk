{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { Dropdown } from '@antv/x6-react-components';\nimport { useXFlowApp, useModelAsync } from '@antv/xflow-core';\nimport { CONTEXT_MENU_MODEL } from '../interface';\nimport { XFlowMenu } from './menu';\n\nvar DisposeHelper = function DisposeHelper(_ref) {\n  var toDispose = _ref.toDispose;\n  React.useEffect(function () {\n    return function () {\n      toDispose.dispose();\n    };\n  }, [toDispose]);\n  return null;\n};\n\nexport var ContextMenuRender = function ContextMenuRender() {\n  var domRef = React.useRef();\n  var xflow = useXFlowApp();\n\n  var _useModelAsync = useModelAsync({\n    /** 绑定Model到state */\n    getModel: function getModel() {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return CONTEXT_MENU_MODEL.getModel(xflow.modelService);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    },\n\n    /** 设置state的默认值 */\n    initialState: {\n      anchor: null,\n      menuModel: null,\n      target: null,\n      customRender: null,\n      toDispose: null\n    }\n  }),\n      _useModelAsync2 = _slicedToArray(_useModelAsync, 3),\n      state = _useModelAsync2[0],\n      renderModel = _useModelAsync2[2];\n\n  var target = state.target,\n      anchor = state.anchor,\n      menuModel = state.menuModel,\n      customRender = state.customRender,\n      toDispose = state.toDispose;\n\n  if (!target || !anchor || !menuModel) {\n    return null;\n  }\n\n  var onMaskClick = function onMaskClick() {\n    renderModel.setValue({\n      anchor: null,\n      menuModel: null,\n      target: null,\n      customRender: null,\n      toDispose: null\n    });\n  };\n\n  var overlay = customRender ? React.createElement(customRender, {\n    target: target,\n    modelService: xflow.modelService,\n    onHide: onMaskClick\n  }) : React.createElement(XFlowMenu, {\n    target: target,\n    menuModel: menuModel,\n    onHide: onMaskClick\n  });\n  return React.createElement(\"div\", {\n    className: \"xflow-menu-mask\",\n    ref: domRef,\n    onClick: onMaskClick,\n    onContextMenu: function onContextMenu(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }, React.createElement(DisposeHelper, {\n    toDispose: toDispose\n  }), React.createElement(Dropdown, {\n    visible: true,\n    getPopupContainer: function getPopupContainer() {\n      return domRef.current;\n    },\n    overlay: overlay\n  }, React.createElement(\"div\", {\n    className: \"xflow-context-menu-anchor\",\n    style: {\n      top: anchor.y,\n      left: anchor.x\n    }\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}