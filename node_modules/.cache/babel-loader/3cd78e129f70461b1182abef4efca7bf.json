{"ast":null,"code":"var indent = ' '.repeat(2);\nvar indentData = ' '.repeat(4);\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\nexport function inspectMatrixWithOptions(matrix) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$maxRows = options.maxRows,\n      maxRows = _options$maxRows === void 0 ? 15 : _options$maxRows,\n      _options$maxColumns = options.maxColumns,\n      maxColumns = _options$maxColumns === void 0 ? 10 : _options$maxColumns,\n      _options$maxNumSize = options.maxNumSize,\n      maxNumSize = _options$maxNumSize === void 0 ? 8 : _options$maxNumSize;\n  return \"\".concat(matrix.constructor.name, \" {\\n\").concat(indent, \"[\\n\").concat(indentData).concat(inspectData(matrix, maxRows, maxColumns, maxNumSize), \"\\n\").concat(indent, \"]\\n\").concat(indent, \"rows: \").concat(matrix.rows, \"\\n\").concat(indent, \"columns: \").concat(matrix.columns, \"\\n}\");\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  var rows = matrix.rows,\n      columns = matrix.columns;\n  var maxI = Math.min(rows, maxRows);\n  var maxJ = Math.min(columns, maxColumns);\n  var result = [];\n\n  for (var i = 0; i < maxI; i++) {\n    var line = [];\n\n    for (var j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n\n    result.push(\"\".concat(line.join(' ')));\n  }\n\n  if (maxJ !== columns) {\n    result[result.length - 1] += \" ... \".concat(columns - maxColumns, \" more columns\");\n  }\n\n  if (maxI !== rows) {\n    result.push(\"... \".concat(rows - maxRows, \" more rows\"));\n  }\n\n  return result.join(\"\\n\".concat(indentData));\n}\n\nfunction formatNumber(num, maxNumSize) {\n  var numStr = String(num);\n\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n\n  var precise = num.toPrecision(maxNumSize - 2);\n\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n\n  var exponential = num.toExponential(maxNumSize - 2);\n  var eIndex = exponential.indexOf('e');\n  var e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}","map":null,"metadata":{},"sourceType":"module"}