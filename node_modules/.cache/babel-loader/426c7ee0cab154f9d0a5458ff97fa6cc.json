{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React, { useState } from 'react';\nimport { Tree, Empty, Popover } from 'antd';\nimport { FolderFilled, FolderOpenFilled } from '@ant-design/icons';\nimport { Addon } from '@antv/x6';\nimport { getNodeReactComponent, useXFlowApp, XFlowConstants } from '@antv/xflow-core';\nimport { XFlowNode } from '../canvas-dag-extension/x6-extension/node';\nvar DirectoryTree = Tree.DirectoryTree,\n    TreeNode = Tree.TreeNode;\n\nvar FolderIcon = function FolderIcon(_ref) {\n  var expanded = _ref.expanded;\n  return expanded ? React.createElement(FolderOpenFilled, null) : React.createElement(FolderFilled, null);\n};\n\nexport var defaultNodeFactory = function defaultNodeFactory(args) {\n  return new XFlowNode(args);\n};\nexport var renderNode = function renderNode(props) {\n  var nodeConfig = props.nodeConfig,\n      onMouseDown = props.onMouseDown,\n      graphConfig = props.graphConfig,\n      modelService = props.modelService,\n      commandService = props.commandService;\n\n  if (!graphConfig) {\n    return React.createElement(\"div\", null);\n  }\n\n  if (nodeConfig.renderComponent) {\n    return React.createElement(\"div\", {\n      onMouseDown: onMouseDown\n    }, React.createElement(nodeConfig.renderComponent, {\n      data: nodeConfig,\n      isNodeTreePanel: true\n    }));\n  }\n\n  var renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFlowConstants.XFLOW_DEFAULT_NODE;\n  var reactComponent = graphConfig.nodeRender.get(renderKey);\n  return React.createElement(\"div\", {\n    onMouseDown: onMouseDown\n  }, React.createElement(reactComponent, {\n    commandService: commandService,\n    modelService: modelService,\n    data: nodeConfig,\n    isNodeTreePanel: true\n  }));\n};\nexport var NodeTitle = function NodeTitle(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      appContainer = _useState4[0],\n      setAppContainer = _useState4[1];\n\n  var _useXFlowApp = useXFlowApp(),\n      getGraphConfig = _useXFlowApp.getGraphConfig;\n\n  getGraphConfig().then(function (graphConfig) {\n    setAppContainer(graphConfig.appContainer);\n  });\n  var prefixClz = props.prefixClz,\n      graphConfig = props.graphConfig,\n      commandService = props.commandService,\n      modelService = props.modelService,\n      popoverContent = props.popoverContent,\n      onMouseDown = props.onMouseDown,\n      item = props.item;\n  return React.createElement(React.Fragment, null, popoverContent && React.createElement(Popover, {\n    placement: \"right\",\n    destroyTooltipOnHide: true,\n    content: popoverContent,\n    visible: isVisible,\n    onVisibleChange: function onVisibleChange(val) {\n      setVisible(val);\n    },\n    getPopupContainer: function getPopupContainer() {\n      return appContainer || document.body;\n    }\n  }, React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-node-wrapper\"),\n    onMouseEnter: function onMouseEnter() {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig: graphConfig,\n    commandService: commandService,\n    onMouseDown: onMouseDown,\n    modelService: modelService,\n    nodeConfig: item\n  }))), !popoverContent && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-node-wrapper\"),\n    onMouseEnter: function onMouseEnter() {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig: graphConfig,\n    commandService: commandService,\n    onMouseDown: onMouseDown,\n    modelService: modelService,\n    nodeConfig: item\n  })));\n};\nexport var NodePanelBody = function NodePanelBody(props) {\n  var x6NodeFactory = props.x6NodeFactory,\n      dndOptions = props.dndOptions,\n      onNodeDrop = props.onNodeDrop,\n      state = props.state,\n      onFolderExpand = props.onFolderExpand,\n      prefixClz = props.prefixClz;\n\n  var _useXFlowApp2 = useXFlowApp(),\n      graphProvider = _useXFlowApp2.graphProvider,\n      modelService = _useXFlowApp2.modelService,\n      commandService = _useXFlowApp2.commandService;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      graphConfig = _React$useState2[0],\n      setConfig = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      dnd = _React$useState4[0],\n      setDnd = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      graph = _React$useState6[0],\n      setGraph = _React$useState6[1];\n\n  graphProvider.getGraphInstance().then(function (x6Graph) {\n    setGraph(x6Graph);\n  });\n  React.useEffect(function () {\n    graphProvider.getGraphOptions().then(function (x6GraphConfig) {\n      setConfig(x6GraphConfig);\n    });\n\n    if (!graph) {\n      return;\n    }\n\n    var dndInstance = new Addon.Dnd(Object.assign(Object.assign({\n      scaled: false,\n      animation: false\n    }, dndOptions), {\n      target: graph,\n\n      /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n       * 在validateNode时调用command添加\n       */\n      validateNode: function validateNode(droppingNode) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var nodeConfig;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  nodeConfig = Object.assign(Object.assign({}, droppingNode.getData()), droppingNode.getPosition());\n\n                  if (!onNodeDrop) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 4;\n                  return onNodeDrop(nodeConfig, commandService, modelService);\n\n                case 4:\n                  _context.next = 7;\n                  break;\n\n                case 6:\n                  console.error('onNodeDrop method is required in NodeTree Panel');\n\n                case 7:\n                  return _context.abrupt(\"return\", false);\n\n                case 8:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      }\n    }));\n    setDnd(dndInstance);\n  }, [commandService, dndOptions, graph, graphProvider, modelService, onNodeDrop]);\n  var onMouseDown = React.useCallback(function (nodeConfig) {\n    return function (e) {\n      if (!graph || !dnd || !graphConfig) {\n        return;\n      }\n\n      var renderKey = graphConfig.nodeTypeParser(nodeConfig);\n      var reactComponent = nodeConfig.renderComponent ? nodeConfig.renderComponent : graphConfig.nodeRender.get(renderKey);\n      var wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n      var nodeData = {\n        data: nodeConfig,\n        width: nodeConfig.width || 180,\n        height: nodeConfig.height || 40,\n        view: graphConfig.graphId,\n        component: wrappedComponent\n      };\n      var x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n      dnd.start(x6Node, e.nativeEvent);\n    };\n  }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n  var renderTree = React.useCallback(function () {\n    var treeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return treeList.map(function (item) {\n      var isDirectory = item.isDirectory,\n          children = item.children,\n          popoverContent = item.popoverContent;\n\n      if (isDirectory) {\n        return React.createElement(TreeNode, {\n          icon: FolderIcon,\n          key: item.id,\n          title: item.label,\n          className: \"\".concat(prefixClz, \"-tree-folder\")\n        }, renderTree(children));\n      }\n\n      return React.createElement(TreeNode, {\n        isLeaf: true,\n        key: item.id,\n        className: \"\".concat(prefixClz, \"-tree-leaf\"),\n        icon: React.createElement(\"span\", null),\n        title: React.createElement(NodeTitle, {\n          item: item,\n          onMouseDown: onMouseDown(item),\n          popoverContent: popoverContent,\n          prefixClz: prefixClz,\n          modelService: modelService,\n          commandService: commandService,\n          graphConfig: graphConfig\n        })\n      });\n    });\n  }, [commandService, graphConfig, modelService, onMouseDown, prefixClz]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-body\"),\n    style: props.style\n  }, !state.keyword && React.createElement(DirectoryTree, {\n    showIcon: true,\n    selectable: false,\n    autoExpandParent: false,\n    onExpand: onFolderExpand,\n    expandedKeys: state.expandedKeys,\n    className: \"\".concat(prefixClz, \"-tree\")\n  }, renderTree(state.treeData)), state.searchList.length > 0 && React.createElement(\"ul\", {\n    className: \"\".concat(prefixClz, \"-body-list\")\n  }, state.searchList.map(function (treeNode) {\n    return React.createElement(\"li\", {\n      className: \"\".concat(prefixClz, \"-body-list-item\")\n    }, React.createElement(NodeTitle, {\n      item: treeNode,\n      onMouseDown: onMouseDown(treeNode),\n      popoverContent: treeNode.popoverContent,\n      prefixClz: prefixClz,\n      modelService: modelService,\n      commandService: commandService,\n      graphConfig: graphConfig\n    }));\n  })), state.keyword && state.searchList.length === 0 && React.createElement(Empty, {\n    style: {\n      marginTop: '48px'\n    }\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}