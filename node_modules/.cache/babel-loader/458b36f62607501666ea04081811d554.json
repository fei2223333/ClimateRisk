{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __awaiter } from \"tslib\";\nimport { Syringe } from 'mana-syringe';\nimport { IHookContribution } from '../hooks/interface';\nimport { disposableNoop } from '../common/utils';\nexport var CONFIG_TYPE = 'CommandConfig';\nexport var getDefaultContributions = function getDefaultContributions() {\n  return [];\n};\nexport var CommandConfig = function CommandConfig() {\n  var _this = this;\n\n  _classCallCheck(this, CommandConfig);\n\n  this.setCommandContributions = function (fn) {\n    _this.getContributions = fn;\n  };\n\n  this.getCommandContributions = function () {\n    return _this.getContributions();\n  };\n\n  this.registerHook = function (hooks) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.registerHookFn) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", this.registerHookFn(hooks));\n\n            case 2:\n              return _context.abrupt(\"return\", disposableNoop);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n  };\n\n  this.registerHookHub = function (registry) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.registerHookHubFn) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", this.registerHookHubFn(registry));\n\n            case 2:\n              return _context2.abrupt(\"return\", disposableNoop);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n  };\n  /** 设置CONFIG类型 */\n\n\n  this.CONFIG_TYPE = CONFIG_TYPE;\n  /** set command hook fn */\n\n  this.setRegisterHookFn = function (fn) {\n    _this.registerHookFn = fn;\n  };\n  /** 注册 command hook hub */\n\n\n  this.setRegisterHookHubFn = function (fn) {\n    _this.registerHookHubFn = fn;\n  };\n  /** 获取config的所有配置*/\n\n\n  this.getConfig = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", {\n                registerHookFn: this.registerHookFn,\n                getContributions: this.getContributions,\n                CONFIG_TYPE: this.CONFIG_TYPE\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n  };\n\n  this.getContributions = getDefaultContributions;\n};\n/** 提供一个工厂方法 */\n\nexport var createCommandConfig = function createCommandConfig() {\n  return new CommandConfig();\n};\nexport var registerCommandConfig = function registerCommandConfig(register, commandConfig) {\n  register({\n    token: CommandConfig,\n    contrib: [IHookContribution],\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: function useDynamic() {\n      return commandConfig;\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}