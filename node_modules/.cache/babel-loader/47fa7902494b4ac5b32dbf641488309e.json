{"ast":null,"code":"\"use strict\"; // @ts-nocheck\n\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GForceGPULayout = void 0;\n\nvar base_1 = require(\"../base\");\n\nvar util_1 = require(\"../../util\"); // @ts-ignore\n\n\nvar g_webgpu_1 = require(\"@antv/g-webgpu\");\n\nvar gpu_1 = require(\"../../util/gpu\");\n\nvar math_1 = require(\"../../util/math\");\n\nvar gForceShader_1 = require(\"./gForceShader\");\n\nvar constants_1 = require(\"../constants\");\n/**\n * graphin 中的 force 布局\n */\n\n\nvar GForceGPULayout =\n/** @class */\nfunction (_super) {\n  __extends(GForceGPULayout, _super);\n\n  function GForceGPULayout(options) {\n    var _this = _super.call(this) || this;\n    /** 停止迭代的最大迭代数 */\n\n\n    _this.maxIteration = 1000;\n    /** 弹簧引力系数 */\n\n    _this.edgeStrength = 200;\n    /** 斥力系数 */\n\n    _this.nodeStrength = 1000;\n    /** 库伦系数 */\n\n    _this.coulombDisScale = 0.005;\n    /** 阻尼系数 */\n\n    _this.damping = 0.9;\n    /** 最大速度 */\n\n    _this.maxSpeed = 1000;\n    /** 一次迭代的平均移动距离小于该值时停止迭代 */\n\n    _this.minMovement = 0.5;\n    /** 迭代中衰减 */\n\n    _this.interval = 0.02;\n    /** 斥力的一个系数 */\n\n    _this.factor = 1;\n    /** 理想边长 */\n\n    _this.linkDistance = 1;\n    /** 重力大小 */\n\n    _this.gravity = 10;\n    /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n\n    _this.workerEnabled = false;\n    _this.nodes = [];\n    _this.edges = [];\n    _this.width = 300;\n    _this.height = 300;\n    _this.nodeMap = {};\n    _this.nodeIdxMap = {};\n\n    _this.updateCfg(options);\n\n    return _this;\n  }\n\n  GForceGPULayout.prototype.getDefaultCfg = function () {\n    return {\n      maxIteration: 2000,\n      gravity: 10,\n      clustering: false,\n      clusterGravity: 10\n    };\n  };\n  /**\n   * 执行布局\n   */\n\n\n  GForceGPULayout.prototype.execute = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, nodes, center, nodeMap, nodeIdxMap;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            self = this;\n            nodes = self.nodes;\n\n            if (!nodes || nodes.length === 0) {\n              if (self.onLayoutEnd) self.onLayoutEnd();\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!self.width && typeof window !== \"undefined\") {\n              self.width = window.innerWidth;\n            }\n\n            if (!self.height && typeof window !== \"undefined\") {\n              self.height = window.innerHeight;\n            }\n\n            if (!self.center) {\n              self.center = [self.width / 2, self.height / 2];\n            }\n\n            center = self.center;\n\n            if (nodes.length === 1) {\n              nodes[0].x = center[0];\n              nodes[0].y = center[1];\n              if (self.onLayoutEnd) self.onLayoutEnd();\n              return [2\n              /*return*/\n              ];\n            }\n\n            nodeMap = {};\n            nodeIdxMap = {};\n            nodes.forEach(function (node, i) {\n              if (!(0, util_1.isNumber)(node.x)) node.x = Math.random() * self.width;\n              if (!(0, util_1.isNumber)(node.y)) node.y = Math.random() * self.height;\n              nodeMap[node.id] = node;\n              nodeIdxMap[node.id] = i;\n            });\n            self.nodeMap = nodeMap;\n            self.nodeIdxMap = nodeIdxMap;\n            self.nodeStrength = (0, gpu_1.proccessToFunc)(self.nodeStrength, 1);\n            self.edgeStrength = (0, gpu_1.proccessToFunc)(self.edgeStrength, 1); // layout\n\n            return [4\n            /*yield*/\n            , self.run()];\n\n          case 1:\n            // layout\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  GForceGPULayout.prototype.executeWithWorker = function (canvas, ctx) {\n    var self = this;\n    var nodes = self.nodes;\n    var center = self.center;\n\n    if (!nodes || nodes.length === 0) {\n      return;\n    }\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      return;\n    }\n\n    var nodeMap = {};\n    var nodeIdxMap = {};\n    nodes.forEach(function (node, i) {\n      if (!(0, util_1.isNumber)(node.x)) node.x = Math.random() * self.width;\n      if (!(0, util_1.isNumber)(node.y)) node.y = Math.random() * self.height;\n      nodeMap[node.id] = node;\n      nodeIdxMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.nodeIdxMap = nodeIdxMap;\n    self.nodeStrength = (0, gpu_1.proccessToFunc)(self.nodeStrength, 1);\n    self.edgeStrength = (0, gpu_1.proccessToFunc)(self.edgeStrength, 1); // layout\n\n    self.run(canvas, ctx);\n  };\n\n  GForceGPULayout.prototype.run = function (canvas, ctx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var self, nodes, edges, maxIteration, numParticles, _a, maxEdgePerVetex, nodesEdgesArray, masses, nodeStrengths, centerXs, centerYs, centerGravities, fxs, fys, gravity, center, nodeAttributeArray1, nodeAttributeArray2, workerEnabled, world, onLayoutEnd, initPreviousData, i, kernelGForce, kernelAveMovement, execute;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            self = this;\n            nodes = self.nodes;\n            edges = self.edges;\n            maxIteration = self.maxIteration;\n\n            if (!self.width && typeof window !== \"undefined\") {\n              self.width = window.innerWidth;\n            }\n\n            if (!self.height && typeof window !== \"undefined\") {\n              self.height = window.innerHeight;\n            }\n\n            numParticles = nodes.length;\n            self.linkDistance = (0, gpu_1.proccessToFunc)(self.linkDistance);\n            self.edgeStrength = (0, gpu_1.proccessToFunc)(self.edgeStrength);\n            _a = (0, gpu_1.buildTextureDataWithTwoEdgeAttr)(nodes, edges, self.linkDistance, self.edgeStrength), maxEdgePerVetex = _a.maxEdgePerVetex, nodesEdgesArray = _a.array; // init degree for mass\n\n            self.degrees = (0, math_1.getDegree)(nodes.length, self.nodeIdxMap, edges);\n            masses = [];\n            nodeStrengths = [];\n            centerXs = [];\n            centerYs = [];\n            centerGravities = [];\n            fxs = [];\n            fys = [];\n\n            if (!self.getMass) {\n              self.getMass = function (d) {\n                return self.degrees[self.nodeIdxMap[d.id]] || 1;\n              };\n            }\n\n            gravity = self.gravity;\n            center = self.center;\n            nodes.forEach(function (node, i) {\n              masses.push(self.getMass(node));\n              nodeStrengths.push(self.nodeStrength(node));\n              if (!self.degrees[i]) self.degrees[i] = 0;\n              var nodeGravity = [center[0], center[1], gravity];\n\n              if (self.getCenter) {\n                var customCenter = self.getCenter(node, self.degrees[i]);\n\n                if (customCenter && (0, util_1.isNumber)(customCenter[0]) && (0, util_1.isNumber)(customCenter[1]) && (0, util_1.isNumber)(customCenter[2])) {\n                  nodeGravity = customCenter;\n                }\n              }\n\n              centerXs.push(nodeGravity[0]);\n              centerYs.push(nodeGravity[1]);\n              centerGravities.push(nodeGravity[2]);\n\n              if ((0, util_1.isNumber)(node.fx) && (0, util_1.isNumber)(node.fy)) {\n                fxs.push(node.fx || 0.001);\n                fys.push(node.fy || 0.001);\n              } else {\n                fxs.push(0);\n                fys.push(0);\n              }\n            });\n            nodeAttributeArray1 = (0, gpu_1.arrayToTextureData)([masses, self.degrees, nodeStrengths, fxs]);\n            nodeAttributeArray2 = (0, gpu_1.arrayToTextureData)([centerXs, centerYs, centerGravities, fys]);\n            workerEnabled = self.workerEnabled;\n\n            if (workerEnabled) {\n              world = g_webgpu_1.World.create({\n                canvas: canvas,\n                engineOptions: {\n                  supportCompute: true\n                }\n              });\n            } else {\n              world = g_webgpu_1.World.create({\n                engineOptions: {\n                  supportCompute: true\n                }\n              });\n            }\n\n            onLayoutEnd = self.onLayoutEnd;\n            initPreviousData = [];\n            nodesEdgesArray.forEach(function (value) {\n              initPreviousData.push(value);\n            });\n\n            for (i = 0; i < 4; i++) {\n              initPreviousData.push(0);\n            }\n\n            kernelGForce = world.createKernel(gForceShader_1.gForceBundle).setDispatch([numParticles, 1, 1]).setBinding({\n              u_Data: nodesEdgesArray,\n              u_damping: self.damping,\n              u_maxSpeed: self.maxSpeed,\n              u_minMovement: self.minMovement,\n              u_coulombDisScale: self.coulombDisScale,\n              u_factor: self.factor,\n              u_NodeAttributeArray1: nodeAttributeArray1,\n              u_NodeAttributeArray2: nodeAttributeArray2,\n              MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n              VERTEX_COUNT: numParticles,\n              u_AveMovement: initPreviousData,\n              u_interval: self.interval // 每次迭代更新，首次设置为 interval，在 onIterationCompleted 中更新\n\n            });\n            kernelAveMovement = world.createKernel(gForceShader_1.aveMovementBundle).setDispatch([1, 1, 1]).setBinding({\n              u_Data: nodesEdgesArray,\n              VERTEX_COUNT: numParticles,\n              u_AveMovement: [0, 0, 0, 0]\n            });\n\n            execute = function execute() {\n              return __awaiter(_this, void 0, void 0, function () {\n                var i, stepInterval, finalParticleData;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      i = 0;\n                      _a.label = 1;\n\n                    case 1:\n                      if (!(i < maxIteration)) return [3\n                      /*break*/\n                      , 5]; // TODO: 似乎都来自 kernelGForce 是一个引用\n                      // 当前坐标作为下一次迭代的 PreviousData\n                      // if (i > 0) {\n                      //   kernelAveMovement.setBinding({\n                      //     u_PreviousData: kernelGForce\n                      //   });\n                      // }\n                      // eslint-disable-next-line no-await-in-loop\n\n                      return [4\n                      /*yield*/\n                      , kernelGForce.execute()];\n\n                    case 2:\n                      // TODO: 似乎都来自 kernelGForce 是一个引用\n                      // 当前坐标作为下一次迭代的 PreviousData\n                      // if (i > 0) {\n                      //   kernelAveMovement.setBinding({\n                      //     u_PreviousData: kernelGForce\n                      //   });\n                      // }\n                      // eslint-disable-next-line no-await-in-loop\n                      _a.sent(); // midRes = await kernelGForce.getOutput();\n                      // 每次迭代完成后\n                      // 计算平均位移，用于提前终止迭代\n\n\n                      kernelAveMovement.setBinding({\n                        u_Data: kernelGForce\n                      }); // eslint-disable-next-line no-await-in-loop\n\n                      return [4\n                      /*yield*/\n                      , kernelAveMovement.execute()];\n\n                    case 3:\n                      // eslint-disable-next-line no-await-in-loop\n                      _a.sent();\n\n                      stepInterval = Math.max(0.02, self.interval - i * 0.002);\n                      kernelGForce.setBinding({\n                        u_interval: stepInterval,\n                        u_AveMovement: kernelAveMovement\n                      });\n                      _a.label = 4;\n\n                    case 4:\n                      i++;\n                      return [3\n                      /*break*/\n                      , 1];\n\n                    case 5:\n                      return [4\n                      /*yield*/\n                      , kernelGForce.getOutput()];\n\n                    case 6:\n                      finalParticleData = _a.sent(); // 所有迭代完成后\n\n                      if (canvas) {\n                        // 传递数据给主线程\n                        ctx.postMessage({\n                          type: constants_1.LAYOUT_MESSAGE.GPUEND,\n                          vertexEdgeData: finalParticleData // edgeIndexBufferData,\n\n                        });\n                      } else {\n                        nodes.forEach(function (node, i) {\n                          var x = finalParticleData[4 * i];\n                          var y = finalParticleData[4 * i + 1];\n                          node.x = x;\n                          node.y = y;\n                        });\n                      }\n\n                      if (onLayoutEnd) onLayoutEnd();\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            };\n\n            return [4\n            /*yield*/\n            , execute()];\n\n          case 1:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  GForceGPULayout.prototype.getType = function () {\n    return \"gForce-gpu\";\n  };\n\n  return GForceGPULayout;\n}(base_1.Base);\n\nexports.GForceGPULayout = GForceGPULayout;","map":null,"metadata":{},"sourceType":"script"}