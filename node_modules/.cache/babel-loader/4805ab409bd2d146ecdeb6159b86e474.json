{"ast":null,"code":"import initOrder from './init-order';\nimport crossCount from './cross-count';\nimport buildLayerGraph from './build-layer-graph';\nimport addSubgraphConstraints from './add-subgraph-constraints';\nimport sortSubgraph from './sort-subgraph';\nimport graphlib from '../graphlib';\nimport util from '../util';\nimport { clone } from '../../../../util';\nvar Graph = graphlib.Graph;\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\n\nvar order = function order(g) {\n  var maxRank = util.maxRank(g);\n  var range1 = [];\n  var range2 = [];\n\n  for (var i = 1; i < maxRank + 1; i++) {\n    range1.push(i);\n  }\n\n  for (var _i = maxRank - 1; _i > -1; _i--) {\n    range2.push(_i);\n  }\n\n  var downLayerGraphs = buildLayerGraphs(g, range1, \"inEdges\");\n  var upLayerGraphs = buildLayerGraphs(g, range2, \"outEdges\");\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n  var bestCC = Number.POSITIVE_INFINITY;\n  var best;\n\n  for (var _i2 = 0, lastBest = 0; lastBest < 4; ++_i2, ++lastBest) {\n    sweepLayerGraphs(_i2 % 2 ? downLayerGraphs : upLayerGraphs, _i2 % 4 >= 2);\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = clone(layering);\n      bestCC = cc;\n    }\n  } // consider use previous result, maybe somewhat reduendant\n\n\n  layering = initOrder(g);\n  assignOrder(g, layering);\n\n  for (var _i3 = 0, _lastBest = 0; _lastBest < 4; ++_i3, ++_lastBest) {\n    sweepLayerGraphs(_i3 % 2 ? downLayerGraphs : upLayerGraphs, _i3 % 4 >= 2, true);\n    layering = util.buildLayerMatrix(g);\n\n    var _cc = crossCount(g, layering);\n\n    if (_cc < bestCC) {\n      _lastBest = 0;\n      best = clone(layering);\n      bestCC = _cc;\n    }\n  }\n\n  assignOrder(g, best);\n};\n\nvar buildLayerGraphs = function buildLayerGraphs(g, ranks, relationship) {\n  return ranks.map(function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n};\n\nvar sweepLayerGraphs = function sweepLayerGraphs(layerGraphs, biasRight, usePrev) {\n  var cg = new Graph();\n  layerGraphs === null || layerGraphs === void 0 ? void 0 : layerGraphs.forEach(function (lg) {\n    var _a;\n\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight, usePrev);\n\n    for (var i = 0; i < ((_a = sorted.vs) === null || _a === void 0 ? void 0 : _a.length) || 0; i++) {\n      lg.node(sorted.vs[i]).order = i;\n    }\n\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n};\n\nvar assignOrder = function assignOrder(g, layering) {\n  layering === null || layering === void 0 ? void 0 : layering.forEach(function (layer) {\n    layer === null || layer === void 0 ? void 0 : layer.forEach(function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n};\n\nexport default order;","map":null,"metadata":{},"sourceType":"module"}