{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { RxModel, NsModel } from '../common/rx-model';\nimport { Deferred } from '../common/deferred';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IModelOptionProvider, IModelService, IModelContribution } from './interface';\nimport { contrib, Contribution, singleton, inject } from 'mana-syringe';\n\nvar ModelRegistry = /*#__PURE__*/function () {\n  function ModelRegistry() {\n    var _this = this;\n\n    _classCallCheck(this, ModelRegistry);\n\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** Deferred Model Map */\n\n    this.deferredModelMap = new Map();\n    /**\n     * 注册model\n     * @param options IModelOptions<T>\n     */\n\n    this.registerModel = function (options) {\n      var id = options.id,\n          getInitialValue = options.getInitialValue,\n          modelFactory = options.modelFactory;\n      var toDispose = new DisposableCollection();\n\n      var defer = _this.ensureModel(id);\n\n      if (defer.isResolved) {\n        console.error(options, 'model has been registerd');\n        return;\n      }\n\n      var initialValue = getInitialValue ? getInitialValue() : NsModel.EMPTY_VALUE;\n      var model = modelFactory ? modelFactory() : new RxModel(initialValue);\n\n      if (NsModel.isValidValue(initialValue)) {\n        defer.resolve(model);\n      }\n\n      if (options.watchChange) {\n        /** 绑定watch事件 */\n        options.watchChange(model, _this).then(function (d) {\n          /** createModel 后 resolve */\n          if (!defer.isResolved) {\n            defer.resolve(model);\n          }\n\n          _this.toDispose.pushAll([d, toDispose]);\n\n          toDispose.push(d);\n        });\n      }\n\n      return toDispose;\n    };\n    /**\n     * 查找 model\n     * @param token: Token<T>\n     */\n\n\n    this.findDeferredModel = function (token) {\n      return _this.deferredModelMap.get(token);\n    };\n    /**\n     *  消费Model: await model resolve\n     * @param token: Token<T>\n     */\n\n\n    this.awaitModel = function (token) {\n      var defer = _this.ensureModel(token);\n\n      return defer.promise;\n    };\n    /**\n     * 注册 定义在IModelOptionProvider中的Model\n     */\n\n\n    this.registerRuntimeModel = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$this$modelOpti, modelRegisterFunc, graphInstance;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.modelOptionProvider.getOption();\n\n              case 2:\n                _yield$this$modelOpti = _context.sent;\n                modelRegisterFunc = _yield$this$modelOpti.modelRegisterFunc;\n                _context.next = 6;\n                return this.graphProvider.getGraphInstance();\n\n              case 6:\n                graphInstance = _context.sent;\n\n                if (modelRegisterFunc) {\n                  modelRegisterFunc(this, graphInstance);\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n    /**\n     * 确保调用时有可用的Model\n     * @param id ModelId\n     */\n\n\n    this.ensureModel = function (token) {\n      var existDeferred = _this.deferredModelMap.get(token);\n\n      if (existDeferred) {\n        return existDeferred;\n      }\n      /** 注册ModelDeferred */\n\n\n      var newDeferred = new Deferred();\n\n      _this.deferredModelMap.set(token, newDeferred);\n\n      _this.toDispose.push(Disposable.create(function () {\n        return _this.deferredModelMap.delete(token);\n      }));\n\n      return newDeferred;\n    };\n  }\n  /** app启动时，收集Model扩展点的注册项 */\n\n\n  _createClass(ModelRegistry, [{\n    key: \"onStart\",\n    value: function onStart() {\n      var contributions = this.contributionProvider.getContributions();\n\n      var _iterator = _createForOfIteratorHelper(contributions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var contribution = _step.value;\n          contribution.registerModel(this);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.registerRuntimeModel();\n    }\n    /** app停止的逻辑 */\n\n  }, {\n    key: \"onStop\",\n    value: function onStop() {\n      this.toDispose.dispose();\n    }\n  }]);\n\n  return ModelRegistry;\n}();\n\n__decorate([contrib(IModelContribution), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"contributionProvider\", void 0);\n\n__decorate([inject(IModelOptionProvider), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"modelOptionProvider\", void 0);\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"graphProvider\", void 0);\n\nModelRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IModelService]\n})], ModelRegistry);\nexport { ModelRegistry };","map":null,"metadata":{},"sourceType":"module"}