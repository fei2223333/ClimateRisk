{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, singleton, contrib, Contribution } from 'mana-syringe';\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IKeyBindingOptionProvider, IKeyBindingService, IKeyBindingContribution } from './interface';\nimport { IGraphCommandService } from '../command/interface';\nimport { IModelService } from '../model-service/interface';\n\nvar KeyBindingRegistry = /*#__PURE__*/function () {\n  function KeyBindingRegistry() {\n    var _this = this;\n\n    _classCallCheck(this, KeyBindingRegistry);\n\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** disposables */\n\n    this.keyBindingMap = new Map();\n    /** disposables */\n\n    this.enabledKeyBindingMap = new Map();\n    /** 注册用户定义在config中的keybinding */\n\n    this.registerExternalKeybindings = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$this$optionPro, registerKeybindingFunc;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.optionProvider.getOption();\n\n              case 2:\n                _yield$this$optionPro = _context.sent;\n                registerKeybindingFunc = _yield$this$optionPro.registerKeybindingFunc;\n                return _context.abrupt(\"return\", registerKeybindingFunc(this));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n    /** 注册可Dispose的Keybinding */\n\n\n    this.registerKeybinding = function () {\n      var keybindings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var toDispose = new DisposableCollection();\n      keybindings.forEach(function (keybinding) {\n        /** 注册 Keybinding config */\n        _this.keyBindingMap.set(keybinding.id, keybinding);\n        /** enable Keybinding */\n\n\n        _this.enableKeyBindings(keybinding.id).then(function (d) {\n          toDispose.push(Disposable.create(function () {\n            d.dispose();\n\n            _this.keyBindingMap.delete(keybinding.id);\n          }));\n        });\n      });\n\n      _this.toDispose.push(toDispose);\n\n      return toDispose;\n    };\n    /**\n     * 启用keybinding, 用于触发command\n     * @param id contextId\n     */\n\n\n    this.enableKeyBindings = function (keybindingId) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var keybinding, graph, handler, toDispose;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                /** 清理同样的键盘事件 */\n                this.disableKeyBindings([keybindingId]);\n                keybinding = this.keyBindingMap.get(keybindingId);\n                _context2.next = 4;\n                return this.getX6Graph();\n\n              case 4:\n                graph = _context2.sent;\n\n                /**\n                 * x6文档：https://x6.antv.vision/zh/docs/api/graph/keyboard\n                 * x6源码：packages/x6/src/graph/keyboard.ts\n                 */\n                handler = this.runCommand(keybinding);\n                graph.bindKey(keybinding.keybinding, handler);\n                /** 注册disposable */\n\n                toDispose = Disposable.create(function () {\n                  graph.unbindKey(keybinding.keybinding);\n\n                  _this2.enabledKeyBindingMap.delete(keybinding.id);\n                });\n                /** 注册disposable */\n\n                this.enabledKeyBindingMap.set(keybinding.id, toDispose);\n                return _context2.abrupt(\"return\", toDispose);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    };\n    /**\n     * 禁用keybinding\n     */\n\n\n    this.disableKeyBindings = function (ids) {\n      ids.forEach(function (id) {\n        var disposable = _this.enabledKeyBindingMap.get(id);\n\n        if (disposable) {\n          disposable.dispose();\n        }\n      });\n    };\n    /**\n     * 执行command\n     */\n\n\n    this.runCommand = function (keybinding) {\n      return function (e) {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return keybinding.callback(keybinding, this.modelService, this.commandService, e);\n\n                case 2:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n      };\n    };\n    /**\n     * 获取画布实例\n     */\n\n\n    this.getX6Graph = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var graphInstance;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.graphProvider.getGraphInstance();\n\n              case 2:\n                graphInstance = _context4.sent;\n                return _context4.abrupt(\"return\", graphInstance);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n  }\n  /**\n   *  app启动时, 注册keybinding的扩展\n   */\n\n\n  _createClass(KeyBindingRegistry, [{\n    key: \"onStart\",\n    value: function onStart() {\n      var contributions = this.contributionProvider.getContributions();\n\n      var _iterator = _createForOfIteratorHelper(contributions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var contribution = _step.value;\n          contribution.registerKeybinding(this);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.registerExternalKeybindings();\n    }\n    /**\n     * app停止的逻辑\n     */\n\n  }, {\n    key: \"onStop\",\n    value: function onStop() {\n      this.toDispose.dispose();\n    }\n  }]);\n\n  return KeyBindingRegistry;\n}();\n\n__decorate([inject(IKeyBindingOptionProvider), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"optionProvider\", void 0);\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"modelService\", void 0);\n\n__decorate([contrib(IKeyBindingContribution), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"contributionProvider\", void 0);\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"graphProvider\", void 0);\n\nKeyBindingRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IKeyBindingService]\n})], KeyBindingRegistry);\nexport { KeyBindingRegistry };","map":null,"metadata":{},"sourceType":"module"}