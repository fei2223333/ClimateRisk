{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport function normalizePasses(passes) {\n  return passes.map(function (pass) {\n    if (typeof pass === 'string') {\n      pass = [pass, {}];\n    }\n\n    return pass;\n  });\n}\nexport function createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory) {\n  var multiPassRenderer = layer.multiPassRenderer;\n\n  var _layer$getLayerConfig = layer.getLayerConfig(),\n      enablePicking = _layer$getLayerConfig.enablePicking,\n      enableTAA = _layer$getLayerConfig.enableTAA;\n\n  if (enableTAA) {\n    multiPassRenderer.add(normalPassFactory('taa'));\n  } else {\n    multiPassRenderer.add(normalPassFactory('render'));\n  }\n\n  normalizePasses(passes).forEach(function (pass) {\n    var _pass = _slicedToArray(pass, 2),\n        passName = _pass[0],\n        initializationOptions = _pass[1];\n\n    multiPassRenderer.add(postProcessingPassFactory(passName), initializationOptions);\n  });\n  multiPassRenderer.add(postProcessingPassFactory('copy'));\n  return multiPassRenderer;\n}","map":null,"metadata":{},"sourceType":"module"}