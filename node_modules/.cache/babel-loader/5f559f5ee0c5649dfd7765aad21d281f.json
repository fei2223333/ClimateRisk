{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsInitGroup;\n\n(function (NsInitGroup) {\n  /** Command: 用于注册named factory */\n  NsInitGroup.command = XFlowGroupCommands.INIT_GROUP;\n  /** hookName */\n\n  NsInitGroup.hookKey = 'initGroup';\n})(NsInitGroup || (NsInitGroup = {}));\n\nvar InitGroupCommand =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function InitGroupCommand() {\n    var _this = this;\n\n    _classCallCheck(this, InitGroupCommand);\n\n    /** 执行Cmd */\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context3.next = 5;\n                return hooks.initGroup.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this3 = this;\n\n                    var graphData, commandService, graph, nodes, groupMap;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            graphData = handlerArgs.graphData, commandService = handlerArgs.commandService;\n                            _context2.next = 3;\n                            return ctx.getX6Graph();\n\n                          case 3:\n                            graph = _context2.sent;\n                            nodes = graphData.nodes;\n                            groupMap = {};\n                            nodes.forEach(function (node) {\n                              var id = node.id,\n                                  group = node.group;\n\n                              if (group) {\n                                if (groupMap[group]) {\n                                  groupMap[group].push(id);\n                                } else {\n                                  groupMap[group] = [id];\n                                }\n                              }\n                            });\n                            Object.keys(groupMap).forEach(function (groupId) {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                var groupNode, groupData, childrenIds, isCollapsed, groupCollapsedSize, collapsedSize;\n                                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        groupNode = graph.getCellById(groupId);\n                                        groupData = groupNode.getData();\n                                        childrenIds = groupMap[groupId] || []; // 更新props\n\n                                        // 更新props\n                                        groupNode.prop('isGroup', true);\n                                        groupNode.setData(Object.assign(Object.assign({}, groupData), {\n                                          isGroup: true,\n                                          groupChildren: childrenIds\n                                        }));\n                                        childrenIds.forEach(function (childId) {\n                                          var child = graph.getCellById(childId);\n                                          groupNode.embed(child);\n                                        }); // Group置于底层\n\n                                        // Group置于底层\n                                        groupNode.toBack(); // collapse\n\n                                        // collapse\n                                        isCollapsed = groupData.isCollapsed, groupCollapsedSize = groupData.groupCollapsedSize;\n\n                                        if (!isCollapsed) {\n                                          _context.next = 12;\n                                          break;\n                                        }\n\n                                        collapsedSize = handlerArgs.collapsedSize || groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n                                        _context.next = 12;\n                                        return commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n                                          collapsedSize: collapsedSize,\n                                          isCollapsed: true,\n                                          nodeId: groupNode.id\n                                        });\n\n                                      case 12:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee);\n                              }));\n                            });\n                            return _context2.abrupt(\"return\", {});\n\n                          case 9:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n                }, runtimeHook);\n\n              case 5:\n                result = _context3.sent;\n                ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context4.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(InitGroupCommand, [{\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return InitGroupCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], InitGroupCommand.prototype, \"contextProvider\", void 0);\n\nInitGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsInitGroup.command.id\n  }\n})\n/** 创建节点命令 */\n], InitGroupCommand);\nexport { InitGroupCommand };","map":null,"metadata":{},"sourceType":"module"}