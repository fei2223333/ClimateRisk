{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n// @ts-nocheck\n\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Base } from \"../base\";\nimport { isNumber } from \"../../util\"; // @ts-ignore\n\nimport { World } from \"@antv/g-webgpu\";\nimport { proccessToFunc, buildTextureDataWithTwoEdgeAttr, arrayToTextureData } from \"../../util/gpu\";\nimport { getDegree } from \"../../util/math\";\nimport { gForceBundle, aveMovementBundle } from \"./gForceShader\";\nimport { LAYOUT_MESSAGE } from \"../constants\";\n/**\n * graphin 中的 force 布局\n */\n\nexport var GForceGPULayout = /*#__PURE__*/function (_Base) {\n  _inherits(GForceGPULayout, _Base);\n\n  function GForceGPULayout(options) {\n    var _this;\n\n    _classCallCheck(this, GForceGPULayout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GForceGPULayout).call(this));\n    /** 停止迭代的最大迭代数 */\n\n    _this.maxIteration = 1000;\n    /** 弹簧引力系数 */\n\n    _this.edgeStrength = 200;\n    /** 斥力系数 */\n\n    _this.nodeStrength = 1000;\n    /** 库伦系数 */\n\n    _this.coulombDisScale = 0.005;\n    /** 阻尼系数 */\n\n    _this.damping = 0.9;\n    /** 最大速度 */\n\n    _this.maxSpeed = 1000;\n    /** 一次迭代的平均移动距离小于该值时停止迭代 */\n\n    _this.minMovement = 0.5;\n    /** 迭代中衰减 */\n\n    _this.interval = 0.02;\n    /** 斥力的一个系数 */\n\n    _this.factor = 1;\n    /** 理想边长 */\n\n    _this.linkDistance = 1;\n    /** 重力大小 */\n\n    _this.gravity = 10;\n    /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n\n    _this.workerEnabled = false;\n    _this.nodes = [];\n    _this.edges = [];\n    _this.width = 300;\n    _this.height = 300;\n    _this.nodeMap = {};\n    _this.nodeIdxMap = {};\n\n    _this.updateCfg(options);\n\n    return _this;\n  }\n\n  _createClass(GForceGPULayout, [{\n    key: \"getDefaultCfg\",\n    value: function getDefaultCfg() {\n      return {\n        maxIteration: 2000,\n        gravity: 10,\n        clustering: false,\n        clusterGravity: 10\n      };\n    }\n    /**\n     * 执行布局\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var self, nodes, center, nodeMap, nodeIdxMap;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                self = this;\n                nodes = self.nodes;\n\n                if (!(!nodes || nodes.length === 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                if (self.onLayoutEnd) self.onLayoutEnd();\n                return _context.abrupt(\"return\");\n\n              case 5:\n                if (!self.width && typeof window !== \"undefined\") {\n                  self.width = window.innerWidth;\n                }\n\n                if (!self.height && typeof window !== \"undefined\") {\n                  self.height = window.innerHeight;\n                }\n\n                if (!self.center) {\n                  self.center = [self.width / 2, self.height / 2];\n                }\n\n                center = self.center;\n\n                if (!(nodes.length === 1)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                nodes[0].x = center[0];\n                nodes[0].y = center[1];\n                if (self.onLayoutEnd) self.onLayoutEnd();\n                return _context.abrupt(\"return\");\n\n              case 14:\n                nodeMap = {};\n                nodeIdxMap = {};\n                nodes.forEach(function (node, i) {\n                  if (!isNumber(node.x)) node.x = Math.random() * self.width;\n                  if (!isNumber(node.y)) node.y = Math.random() * self.height;\n                  nodeMap[node.id] = node;\n                  nodeIdxMap[node.id] = i;\n                });\n                self.nodeMap = nodeMap;\n                self.nodeIdxMap = nodeIdxMap;\n                self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n                self.edgeStrength = proccessToFunc(self.edgeStrength, 1); // layout\n\n                _context.next = 23;\n                return self.run();\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"executeWithWorker\",\n    value: function executeWithWorker(canvas, ctx) {\n      var self = this;\n      var nodes = self.nodes;\n      var center = self.center;\n\n      if (!nodes || nodes.length === 0) {\n        return;\n      }\n\n      if (nodes.length === 1) {\n        nodes[0].x = center[0];\n        nodes[0].y = center[1];\n        return;\n      }\n\n      var nodeMap = {};\n      var nodeIdxMap = {};\n      nodes.forEach(function (node, i) {\n        if (!isNumber(node.x)) node.x = Math.random() * self.width;\n        if (!isNumber(node.y)) node.y = Math.random() * self.height;\n        nodeMap[node.id] = node;\n        nodeIdxMap[node.id] = i;\n      });\n      self.nodeMap = nodeMap;\n      self.nodeIdxMap = nodeIdxMap;\n      self.nodeStrength = proccessToFunc(self.nodeStrength, 1);\n      self.edgeStrength = proccessToFunc(self.edgeStrength, 1); // layout\n\n      self.run(canvas, ctx);\n    }\n  }, {\n    key: \"run\",\n    value: function run(canvas, ctx) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var self, nodes, edges, maxIteration, numParticles, _buildTextureDataWith, maxEdgePerVetex, nodesEdgesArray, masses, nodeStrengths, centerXs, centerYs, centerGravities, fxs, fys, gravity, center, nodeAttributeArray1, nodeAttributeArray2, workerEnabled, world, onLayoutEnd, initPreviousData, i, kernelGForce, kernelAveMovement, execute;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                self = this;\n                nodes = self.nodes;\n                edges = self.edges;\n                maxIteration = self.maxIteration;\n\n                if (!self.width && typeof window !== \"undefined\") {\n                  self.width = window.innerWidth;\n                }\n\n                if (!self.height && typeof window !== \"undefined\") {\n                  self.height = window.innerHeight;\n                }\n\n                numParticles = nodes.length;\n                self.linkDistance = proccessToFunc(self.linkDistance);\n                self.edgeStrength = proccessToFunc(self.edgeStrength);\n                _buildTextureDataWith = buildTextureDataWithTwoEdgeAttr(nodes, edges, self.linkDistance, self.edgeStrength), maxEdgePerVetex = _buildTextureDataWith.maxEdgePerVetex, nodesEdgesArray = _buildTextureDataWith.array; // init degree for mass\n\n                self.degrees = getDegree(nodes.length, self.nodeIdxMap, edges);\n                masses = [];\n                nodeStrengths = [];\n                centerXs = [];\n                centerYs = [];\n                centerGravities = [];\n                fxs = [];\n                fys = [];\n\n                if (!self.getMass) {\n                  self.getMass = function (d) {\n                    return self.degrees[self.nodeIdxMap[d.id]] || 1;\n                  };\n                }\n\n                gravity = self.gravity;\n                center = self.center;\n                nodes.forEach(function (node, i) {\n                  masses.push(self.getMass(node));\n                  nodeStrengths.push(self.nodeStrength(node));\n                  if (!self.degrees[i]) self.degrees[i] = 0;\n                  var nodeGravity = [center[0], center[1], gravity];\n\n                  if (self.getCenter) {\n                    var customCenter = self.getCenter(node, self.degrees[i]);\n\n                    if (customCenter && isNumber(customCenter[0]) && isNumber(customCenter[1]) && isNumber(customCenter[2])) {\n                      nodeGravity = customCenter;\n                    }\n                  }\n\n                  centerXs.push(nodeGravity[0]);\n                  centerYs.push(nodeGravity[1]);\n                  centerGravities.push(nodeGravity[2]);\n\n                  if (isNumber(node.fx) && isNumber(node.fy)) {\n                    fxs.push(node.fx || 0.001);\n                    fys.push(node.fy || 0.001);\n                  } else {\n                    fxs.push(0);\n                    fys.push(0);\n                  }\n                }); // 每个节点的额外属性占两个数组各一格，nodeAttributeArray1 中是：mass, degree, nodeSterngth, 0\n\n                nodeAttributeArray1 = arrayToTextureData([masses, self.degrees, nodeStrengths, fxs]); // nodeAttributeArray2 中是：centerX, centerY, gravity, 0,\n\n                nodeAttributeArray2 = arrayToTextureData([centerXs, centerYs, centerGravities, fys]);\n                workerEnabled = self.workerEnabled;\n\n                if (workerEnabled) {\n                  world = World.create({\n                    canvas: canvas,\n                    engineOptions: {\n                      supportCompute: true\n                    }\n                  });\n                } else {\n                  world = World.create({\n                    engineOptions: {\n                      supportCompute: true\n                    }\n                  });\n                } // TODO: 最终的预编译代码放入到 gForceShader.ts 中直接引入，不再需要下面三行\n                // const compiler = new Compiler();\n                // const gForceBundle = compiler.compileBundle(gForceCode);\n                // console.log(gForceBundle.toString());\n\n\n                onLayoutEnd = self.onLayoutEnd;\n                initPreviousData = [];\n                nodesEdgesArray.forEach(function (value) {\n                  initPreviousData.push(value);\n                });\n\n                for (i = 0; i < 4; i++) {\n                  initPreviousData.push(0);\n                }\n\n                kernelGForce = world.createKernel(gForceBundle).setDispatch([numParticles, 1, 1]).setBinding({\n                  u_Data: nodesEdgesArray,\n                  u_damping: self.damping,\n                  u_maxSpeed: self.maxSpeed,\n                  u_minMovement: self.minMovement,\n                  u_coulombDisScale: self.coulombDisScale,\n                  u_factor: self.factor,\n                  u_NodeAttributeArray1: nodeAttributeArray1,\n                  u_NodeAttributeArray2: nodeAttributeArray2,\n                  MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n                  VERTEX_COUNT: numParticles,\n                  u_AveMovement: initPreviousData,\n                  u_interval: self.interval // 每次迭代更新，首次设置为 interval，在 onIterationCompleted 中更新\n\n                }); // const aveMovementBundle = compiler.compileBundle(aveMovementCode);\n                // console.log(aveMovementBundle.toString());\n\n                kernelAveMovement = world.createKernel(aveMovementBundle).setDispatch([1, 1, 1]).setBinding({\n                  u_Data: nodesEdgesArray,\n                  VERTEX_COUNT: numParticles,\n                  u_AveMovement: [0, 0, 0, 0]\n                }); // 执行迭代\n                // let midRes = nodesEdgesArray;\n\n                execute = function execute() {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _i, stepInterval, finalParticleData;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _i = 0;\n\n                          case 1:\n                            if (!(_i < maxIteration)) {\n                              _context2.next = 12;\n                              break;\n                            }\n\n                            _context2.next = 4;\n                            return kernelGForce.execute();\n\n                          case 4:\n                            // midRes = await kernelGForce.getOutput();\n                            // 每次迭代完成后\n                            // 计算平均位移，用于提前终止迭代\n                            kernelAveMovement.setBinding({\n                              u_Data: kernelGForce\n                            }); // eslint-disable-next-line no-await-in-loop\n\n                            _context2.next = 7;\n                            return kernelAveMovement.execute();\n\n                          case 7:\n                            // 更新衰减函数\n                            stepInterval = Math.max(0.02, self.interval - _i * 0.002);\n                            kernelGForce.setBinding({\n                              u_interval: stepInterval,\n                              u_AveMovement: kernelAveMovement\n                            });\n\n                          case 9:\n                            _i++;\n                            _context2.next = 1;\n                            break;\n\n                          case 12:\n                            _context2.next = 14;\n                            return kernelGForce.getOutput();\n\n                          case 14:\n                            finalParticleData = _context2.sent;\n\n                            // 所有迭代完成后\n                            if (canvas) {\n                              // 传递数据给主线程\n                              ctx.postMessage({\n                                type: LAYOUT_MESSAGE.GPUEND,\n                                vertexEdgeData: finalParticleData // edgeIndexBufferData,\n\n                              });\n                            } else {\n                              nodes.forEach(function (node, i) {\n                                var x = finalParticleData[4 * i];\n                                var y = finalParticleData[4 * i + 1];\n                                node.x = x;\n                                node.y = y;\n                              });\n                            }\n\n                            if (onLayoutEnd) onLayoutEnd();\n\n                          case 17:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n                };\n\n                _context3.next = 35;\n                return execute();\n\n              case 35:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return \"gForce-gpu\";\n    }\n  }]);\n\n  return GForceGPULayout;\n}(Base);","map":null,"metadata":{},"sourceType":"module"}