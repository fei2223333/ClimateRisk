{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { createComponentModel, Disposable, MODELS, useXFlowApp } from '@antv/xflow-core';\nimport { nodeService } from './utils';\nexport var NsPanelData;\n\n(function (NsPanelData) {\n  NsPanelData.id = 'NODE_PANEL_DATA';\n})(NsPanelData || (NsPanelData = {}));\n/** 节点查找 */\n\n\nvar DefaultsearchService = function DefaultsearchService() {\n  var nodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyword = arguments.length > 1 ? arguments[1] : undefined;\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var list;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            list = nodeList.filter(function (i) {\n              var _a, _b;\n\n              return i.isDirectory || ((_a = i.label) === null || _a === void 0 ? void 0 : _a.includes(keyword)) || ((_b = i.name) === null || _b === void 0 ? void 0 : _b.includes(keyword));\n            });\n            return _context.abrupt(\"return\", list);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexport var usePanelData = function usePanelData(props) {\n  var registerNode = props.registerNode,\n      _props$searchService = props.searchService,\n      searchService = _props$searchService === void 0 ? DefaultsearchService : _props$searchService;\n\n  var _ref = registerNode !== null && registerNode !== void 0 ? registerNode : {},\n      nodes = _ref.nodes;\n\n  var _useXFlowApp = useXFlowApp(),\n      modelService = _useXFlowApp.modelService;\n  /** 使用model */\n\n\n  var _createComponentModel = createComponentModel({\n    searchList: [],\n    nodeList: [],\n    defaultExpandAll: false,\n    keyword: ''\n  }),\n      _createComponentModel2 = _slicedToArray(_createComponentModel, 3),\n      state = _createComponentModel2[0],\n      setState = _createComponentModel2[1],\n      panelModel = _createComponentModel2[2];\n  /** 注册成为全局状态，方便其他组件联动 */\n\n\n  React.useEffect(function () {\n    if (modelService.findDeferredModel(NsPanelData.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsPanelData.id,\n      modelFactory: function modelFactory() {\n        return panelModel;\n      },\n      watchChange: function watchChange(self) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          var graphMetaModel, fetch, graphMetaDisposable;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return MODELS.GRAPH_META.getModel(modelService);\n\n                case 2:\n                  graphMetaModel = _context4.sent;\n\n                  //useContext(MODELS.GRAPH_META.id)\n                  fetch = function fetch() {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      var listData;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _context2.next = 2;\n                              return nodeService(nodes);\n\n                            case 2:\n                              listData = _context2.sent;\n                              return _context2.abrupt(\"return\", {\n                                listData: listData\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n                  };\n\n                  graphMetaDisposable = graphMetaModel.watch(function () {\n                    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      var data;\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return fetch();\n\n                            case 2:\n                              data = _context3.sent;\n                              self.setValue({\n                                nodeList: data.listData,\n                                defaultExpandAll: false,\n                                keyword: '',\n                                searchList: []\n                              });\n\n                            case 4:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n                  });\n                  return _context4.abrupt(\"return\", Disposable.create(function () {\n                    graphMetaDisposable.dispose();\n                  }));\n\n                case 6:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n      }\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 搜索 */\n\n  var onKeywordChange = React.useCallback(function (keyword) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var list;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (searchService) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 2:\n              if (!keyword) {\n                _context5.next = 9;\n                break;\n              }\n\n              _context5.next = 5;\n              return searchService(state.nodeList, keyword);\n\n            case 5:\n              list = _context5.sent;\n              setState(function (modelState) {\n                modelState.keyword = keyword;\n                modelState.searchList = list;\n              });\n              _context5.next = 10;\n              break;\n\n            case 9:\n              setState(function (modelState) {\n                modelState.keyword = '';\n                modelState.searchList = [];\n              });\n\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  }, [searchService, state.nodeList, setState]);\n  return {\n    state: state,\n    setState: setState,\n    onKeywordChange: onKeywordChange\n  };\n};","map":null,"metadata":{},"sourceType":"module"}