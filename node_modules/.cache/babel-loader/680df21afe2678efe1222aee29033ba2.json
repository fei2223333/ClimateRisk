{"ast":null,"code":"import 'reflect-metadata';\n/** Application 扩展依赖 */\n\nimport { ICommandHandler, IGraphCommandFactory, ICommandContextProvider } from '../command/interface';\nimport { Module } from 'mana-syringe';\nimport { CmdContext } from './cmd-context';\nimport { registerCommandConfig } from './config';\nimport { registerXFlowCommandContribution } from './command-contribution';\nimport { GraphMappingHelper } from './mapping-service';\n/** 依赖扩展模块，必须要加载 */\n\nexport var createModule = function createModule(commandConfig) {\n  return Module(function (register) {\n    /** 注册 mapping helper */\n    register(GraphMappingHelper);\n    /** 注册 CommandConfig */\n\n    registerCommandConfig(register, commandConfig);\n    /** 注册 Command扩展 */\n\n    registerXFlowCommandContribution(register, commandConfig);\n    /** 注册 Context Clz */\n\n    register(CmdContext);\n    /** ICommandHandler 工厂 */\n\n    register(IGraphCommandFactory, {\n      useFactory: function useFactory(context) {\n        return function (commandId, args, hook) {\n          var child = context.container.createChild();\n          /** 实例化 Context */\n\n          var cmdContext = child.get(CmdContext);\n          /** 绑定 CommandContext 工厂类 */\n\n          child.register(ICommandContextProvider, {\n            useDynamic: function useDynamic() {\n              return function () {\n                return cmdContext;\n              };\n            }\n          });\n          /** 实例化CommandHandler */\n\n          var commandHandler = child.getNamed(ICommandHandler, commandId);\n          /** 设置参数 */\n\n          cmdContext.setArgs(args, hook);\n          /** 绑定关系 */\n\n          cmdContext.handlerInstance = commandHandler;\n          return commandHandler;\n        };\n      }\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}