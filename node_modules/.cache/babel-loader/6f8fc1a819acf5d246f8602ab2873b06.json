{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __awaiter } from \"tslib\";\nimport React, { useCallback } from 'react';\nimport { Empty, Collapse } from 'antd';\nimport { Addon } from '@antv/x6';\nimport { getNodeReactComponent, useXFlowApp, uuidv4, XFlowNodeCommands } from '@antv/xflow-core';\nimport { getProps } from '../flowchart-canvas/utils';\nimport { NodeTitle, defaultNodeFactory } from '../canvas-node-tree-panel/panel-body';\nvar Panel = Collapse.Panel;\nexport var NodePanelBody = function NodePanelBody(props) {\n  var x6NodeFactory = props.x6NodeFactory,\n      dndOptions = props.dndOptions,\n      state = props.state,\n      prefixClz = props.prefixClz,\n      registerNode = props.registerNode,\n      _props$defaultActiveK = props.defaultActiveKey,\n      defaultActiveKey = _props$defaultActiveK === void 0 ? ['official', 'custom'] : _props$defaultActiveK;\n\n  var _ref = registerNode !== null && registerNode !== void 0 ? registerNode : {},\n      _ref$title = _ref.title,\n      title = _ref$title === void 0 ? '复制节点' : _ref$title;\n\n  var _useXFlowApp = useXFlowApp(),\n      graphProvider = _useXFlowApp.graphProvider,\n      modelService = _useXFlowApp.modelService,\n      commandService = _useXFlowApp.commandService;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dnd = _React$useState2[0],\n      setDnd = _React$useState2[1];\n  /** 获取graph实例 */\n\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      graph = _React$useState4[0],\n      setGraph = _React$useState4[1];\n\n  graphProvider.getGraphInstance().then(function (x6Graph) {\n    setGraph(x6Graph);\n  });\n  var graphConfig = undefined;\n  graphProvider.getGraphOptions().then(function (x6GraphConfig) {\n    graphConfig = x6GraphConfig;\n  });\n  var onNodeDrop = useCallback(function (node) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _a, ports, nodeConfig, args, onAddNode;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ports = node.ports;\n              nodeConfig = Object.assign(Object.assign({}, node), {\n                id: \"node-\".concat(uuidv4()),\n                zIndex: 10,\n                ports: Object.assign(Object.assign({}, ports), {\n                  items: (_a = ports.items) === null || _a === void 0 ? void 0 : _a.map(function (item) {\n                    return Object.assign(Object.assign({}, item), {\n                      id: uuidv4()\n                    });\n                  })\n                })\n              });\n              args = {\n                nodeConfig: nodeConfig\n              };\n              _context.next = 5;\n              return commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, args);\n\n            case 5:\n              onAddNode = getProps('onAddNode');\n\n              if (typeof onAddNode === 'function') {\n                onAddNode(nodeConfig);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }, [commandService]);\n  React.useEffect(function () {\n    if (!graph) {\n      return;\n    }\n\n    var dndInstance = new Addon.Dnd(Object.assign(Object.assign({\n      scaled: false,\n      animation: false\n    }, dndOptions), {\n      target: graph,\n\n      /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n       * 在validateNode时调用command添加\n       */\n      validateNode: function validateNode(droppingNode) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var nodeConfig;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  nodeConfig = Object.assign(Object.assign({}, droppingNode.getData()), droppingNode.getPosition());\n                  _context2.next = 3;\n                  return onNodeDrop(nodeConfig);\n\n                case 3:\n                  return _context2.abrupt(\"return\", false);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n      }\n    }));\n    setDnd(dndInstance);\n  }, [commandService, dndOptions, graph, modelService, onNodeDrop]);\n  var onMouseDown = React.useCallback(function (nodeConfig) {\n    return function (e) {\n      if (!graph || !dnd || !graphConfig) {\n        return;\n      }\n\n      var renderKey = graphConfig.nodeTypeParser(nodeConfig);\n      var _nodeConfig$width = nodeConfig.width,\n          width = _nodeConfig$width === void 0 ? 180 : _nodeConfig$width,\n          _nodeConfig$height = nodeConfig.height,\n          height = _nodeConfig$height === void 0 ? 40 : _nodeConfig$height;\n      var reactComponent = graphConfig.nodeRender.get(renderKey);\n      var wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n      var nodeData = {\n        data: nodeConfig,\n        width: width,\n        height: height,\n        view: graphConfig.graphId,\n        component: wrappedComponent\n      };\n      var x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n      dnd.start(x6Node, e.nativeEvent);\n    };\n  }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n  var renderTree = React.useCallback(function () {\n    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return list.map(function (item) {\n      var popoverContent = item.popoverContent;\n      return React.createElement(NodeTitle, {\n        item: item,\n        key: item.id,\n        onMouseDown: onMouseDown(item),\n        popoverContent: popoverContent,\n        prefixClz: prefixClz,\n        modelService: modelService,\n        commandService: commandService,\n        graphConfig: graphConfig\n      });\n    });\n  }, [commandService, graphConfig, modelService, onMouseDown, prefixClz]);\n  var customNode = state.nodeList.filter(function (item) {\n    return item.isCustom;\n  });\n  var officialNode = state.nodeList.filter(function (item) {\n    return !item.isCustom;\n  });\n  var searchCustomNode = state.searchList.filter(function (item) {\n    return item.isCustom;\n  });\n  var searchOfficialNode = state.searchList.filter(function (item) {\n    return !item.isCustom;\n  });\n  var hasCustomNode = customNode.length > 0;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-body\")\n  }, React.createElement(Collapse, {\n    defaultActiveKey: defaultActiveKey,\n    style: {\n      border: 'none'\n    }\n  }, React.createElement(Panel, {\n    header: \"\\u901A\\u7528\\u8282\\u70B9\",\n    key: \"official\",\n    style: {\n      border: 'none'\n    }\n  }, !state.keyword && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-official\")\n  }, renderTree(officialNode)), state.searchList.length > 0 && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-official\")\n  }, renderTree(searchOfficialNode))), hasCustomNode && React.createElement(Panel, {\n    header: title,\n    key: \"custom\",\n    style: {\n      border: 'none'\n    }\n  }, !state.keyword && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-custom\")\n  }, renderTree(customNode)), state.searchList.length > 0 && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-custom\")\n  }, renderTree(searchCustomNode)))), state.keyword && state.searchList.length === 0 && React.createElement(Empty, {\n    style: {\n      marginTop: '48px'\n    }\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}