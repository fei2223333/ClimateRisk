{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport util from './util';\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\n\nvar run = function run(g) {\n  var _a;\n\n  var root = util.addDummyNode(g, \"root\", {}, \"_root\");\n  var depths = treeDepths(g); // @ts-ignore\n\n  var height = Math.max.apply(Math, _toConsumableArray(Object.values(depths))) - 1; // Note: depths is an Object not an array\n\n  var nodeSep = 2 * height + 1;\n  g.graph().nestingRoot = root; // Multiply minlen by nodeSep to align nodes on non-border ranks.\n\n  g.edges().forEach(function (e) {\n    g.edge(e).minlen *= nodeSep;\n  }); // Calculate a weight that is sufficient to keep subgraphs vertically compact\n\n  var weight = sumWeights(g) + 1; // Create border nodes and link them up\n\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  }); // Save the multiplier for node layers for later removal of empty border\n  // layers.\n\n  g.graph().nodeRankFactor = nodeSep;\n};\n\nvar dfs = function dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n\n  if (!(children === null || children === void 0 ? void 0 : children.length)) {\n    if (v !== root) {\n      g.setEdge(root, v, {\n        weight: 0,\n        minlen: nodeSep\n      });\n    }\n\n    return;\n  }\n\n  var top = util.addBorderNode(g, \"_bt\");\n  var bottom = util.addBorderNode(g, \"_bb\");\n  var label = g.node(v);\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n  children === null || children === void 0 ? void 0 : children.forEach(function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n    g.setEdge(top, childTop, {\n      minlen: minlen,\n      weight: thisWeight,\n      nestingEdge: true\n    });\n    g.setEdge(childBottom, bottom, {\n      minlen: minlen,\n      weight: thisWeight,\n      nestingEdge: true\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, {\n      weight: 0,\n      minlen: height + depths[v]\n    });\n  }\n};\n\nvar treeDepths = function treeDepths(g) {\n  var _a;\n\n  var depths = {};\n\n  var dfs = function dfs(v, depth) {\n    var children = g.children(v);\n    children === null || children === void 0 ? void 0 : children.forEach(function (child) {\n      return dfs(child, depth + 1);\n    });\n    depths[v] = depth;\n  };\n\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (v) {\n    return dfs(v, 1);\n  });\n  return depths;\n};\n\nvar sumWeights = function sumWeights(g) {\n  var result = 0;\n  g.edges().forEach(function (e) {\n    result += g.edge(e).weight;\n  });\n  return result;\n};\n\nvar cleanup = function cleanup(g) {\n  var graphLabel = g.graph();\n  graphLabel.nestingRoot && g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  g.edges().forEach(function (e) {\n    var edge = g.edge(e);\n\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n};\n\nexport default {\n  run: run,\n  cleanup: cleanup\n};","map":null,"metadata":{},"sourceType":"module"}