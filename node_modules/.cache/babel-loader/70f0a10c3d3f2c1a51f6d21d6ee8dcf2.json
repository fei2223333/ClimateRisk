{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Dom } from '../util';\nimport { Highlighter } from '../registry';\nimport { Base } from './base';\nexport var HighlightManager = /*#__PURE__*/function (_Base) {\n  _inherits(HighlightManager, _Base);\n\n  function HighlightManager() {\n    var _this;\n\n    _classCallCheck(this, HighlightManager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HighlightManager).apply(this, arguments));\n    _this.highlights = {};\n    return _this;\n  }\n\n  _createClass(HighlightManager, [{\n    key: \"init\",\n    value: function init() {\n      this.startListening();\n    }\n  }, {\n    key: \"startListening\",\n    value: function startListening() {\n      this.graph.on('cell:highlight', this.onCellHighlight, this);\n      this.graph.on('cell:unhighlight', this.onCellUnhighlight, this);\n    }\n  }, {\n    key: \"stopListening\",\n    value: function stopListening() {\n      this.graph.off('cell:highlight', this.onCellHighlight, this);\n      this.graph.off('cell:unhighlight', this.onCellUnhighlight, this);\n    }\n  }, {\n    key: \"onCellHighlight\",\n    value: function onCellHighlight(_ref) {\n      var cellView = _ref.view,\n          magnet = _ref.magnet,\n          _ref$options = _ref.options,\n          options = _ref$options === void 0 ? {} : _ref$options;\n      var resolved = this.resolveHighlighter(options);\n\n      if (!resolved) {\n        return;\n      }\n\n      var key = this.getHighlighterId(magnet, resolved);\n\n      if (!this.highlights[key]) {\n        var highlighter = resolved.highlighter;\n        highlighter.highlight(cellView, magnet, Object.assign({}, resolved.args));\n        this.highlights[key] = {\n          cellView: cellView,\n          magnet: magnet,\n          highlighter: highlighter,\n          args: resolved.args\n        };\n      }\n    }\n  }, {\n    key: \"onCellUnhighlight\",\n    value: function onCellUnhighlight(_ref2) {\n      var magnet = _ref2.magnet,\n          _ref2$options = _ref2.options,\n          options = _ref2$options === void 0 ? {} : _ref2$options;\n      var resolved = this.resolveHighlighter(options);\n\n      if (!resolved) {\n        return;\n      }\n\n      var id = this.getHighlighterId(magnet, resolved);\n      this.unhighlight(id);\n    }\n  }, {\n    key: \"resolveHighlighter\",\n    value: function resolveHighlighter(options) {\n      var graphOptions = this.options;\n      var highlighterDef = options.highlighter;\n\n      if (highlighterDef == null) {\n        // check for built-in types\n        var type = options.type;\n        highlighterDef = type && graphOptions.highlighting[type] || graphOptions.highlighting.default;\n      }\n\n      if (highlighterDef == null) {\n        return null;\n      }\n\n      var def = typeof highlighterDef === 'string' ? {\n        name: highlighterDef\n      } : highlighterDef;\n      var name = def.name;\n      var highlighter = Highlighter.registry.get(name);\n\n      if (highlighter == null) {\n        return Highlighter.registry.onNotFound(name);\n      }\n\n      Highlighter.check(name, highlighter);\n      return {\n        name: name,\n        highlighter: highlighter,\n        args: def.args || {}\n      };\n    }\n  }, {\n    key: \"getHighlighterId\",\n    value: function getHighlighterId(magnet, options) {\n      Dom.ensureId(magnet);\n      return options.name + magnet.id + JSON.stringify(options.args);\n    }\n  }, {\n    key: \"unhighlight\",\n    value: function unhighlight(id) {\n      var highlight = this.highlights[id];\n\n      if (highlight) {\n        highlight.highlighter.unhighlight(highlight.cellView, highlight.magnet, highlight.args);\n        delete this.highlights[id];\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this2 = this;\n\n      Object.keys(this.highlights).forEach(function (id) {\n        return _this2.unhighlight(id);\n      });\n      this.stopListening();\n    }\n  }]);\n\n  return HighlightManager;\n}(Base);\n\n__decorate([HighlightManager.dispose()], HighlightManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}