{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation and others. All rights reserved.\n *  Licensed under the MIT License. See https://github.com/Microsoft/vscode/blob/master/LICENSE.txt for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Emitter } from './event'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nvar shortcutEvent = Object.freeze(Object.assign(function (callback, context) {\n  var handle = setTimeout(callback.bind(context), 0);\n  return {\n    dispose: function dispose() {\n      clearTimeout(handle);\n    }\n  };\n}, {\n  maxListeners: 0\n}));\nexport var CancellationToken;\n\n(function (CancellationToken) {\n  CancellationToken.None = Object.freeze({\n    isCancellationRequested: false,\n    onCancellationRequested: Event.None\n  });\n  CancellationToken.Cancelled = Object.freeze({\n    isCancellationRequested: true,\n    onCancellationRequested: shortcutEvent\n  });\n})(CancellationToken || (CancellationToken = {}));\n\nvar MutableToken = /*#__PURE__*/function () {\n  function MutableToken() {\n    _classCallCheck(this, MutableToken);\n\n    this._isCancelled = false;\n    this._emitter = void 0;\n  }\n\n  _createClass(MutableToken, [{\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._isCancelled) {\n        this._isCancelled = true;\n\n        if (this._emitter) {\n          this._emitter.fire(undefined);\n\n          this._emitter = undefined;\n        }\n      }\n    }\n  }, {\n    key: \"isCancellationRequested\",\n    get: function get() {\n      return this._isCancelled;\n    }\n  }, {\n    key: \"onCancellationRequested\",\n    get: function get() {\n      if (this._isCancelled) {\n        return shortcutEvent;\n      }\n\n      if (!this._emitter) {\n        this._emitter = new Emitter();\n      }\n\n      return this._emitter.event;\n    }\n  }]);\n\n  return MutableToken;\n}();\n\nexport var CancellationTokenSource = /*#__PURE__*/function () {\n  function CancellationTokenSource() {\n    _classCallCheck(this, CancellationTokenSource);\n\n    this._token = void 0;\n  }\n\n  _createClass(CancellationTokenSource, [{\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._token) {\n        // save an object by returning the default\n        // cancelled token when cancellation happens\n        // before someone asks for the token\n        this._token = CancellationToken.Cancelled;\n      } else if (this._token !== CancellationToken.Cancelled) {\n        this._token.cancel();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.cancel();\n    }\n  }, {\n    key: \"token\",\n    get: function get() {\n      if (!this._token) {\n        // be lazy and create the token only when\n        // actually needed\n        this._token = new MutableToken();\n      }\n\n      return this._token;\n    }\n  }]);\n\n  return CancellationTokenSource;\n}();\nvar cancelledMessage = 'Cancelled';\nexport function cancelled() {\n  return new Error(cancelledMessage);\n}\nexport function isCancelled(err) {\n  return !!err && err.message === cancelledMessage;\n}\nexport function checkCancelled(token) {\n  if (!!token && token.isCancellationRequested) {\n    throw cancelled();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}