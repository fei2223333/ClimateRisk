{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { NodeView, Scheduler } from '@antv/x6';\nimport { Portal } from './portal';\nimport { Wrap } from './wrap';\nexport var ReactShapeView = /*#__PURE__*/function (_NodeView) {\n  _inherits(ReactShapeView, _NodeView);\n\n  function ReactShapeView() {\n    _classCallCheck(this, ReactShapeView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReactShapeView).apply(this, arguments));\n  }\n\n  _createClass(ReactShapeView, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      _get(_getPrototypeOf(ReactShapeView.prototype), \"init\", this).call(this);\n\n      this.cell.on('removed', function () {\n        Portal.disconnect(_this.cell.id);\n      });\n    }\n  }, {\n    key: \"getComponentContainer\",\n    value: function getComponentContainer() {\n      return this.cell.prop('useForeignObject') === false ? this.selectors.content : this.selectors.foContent;\n    }\n  }, {\n    key: \"confirmUpdate\",\n    value: function confirmUpdate(flag) {\n      var _this2 = this;\n\n      var ret = _get(_getPrototypeOf(ReactShapeView.prototype), \"confirmUpdate\", this).call(this, flag);\n\n      return this.handleAction(ret, ReactShapeView.action, function () {\n        if (Scheduler) {\n          Scheduler.scheduleTask(function () {\n            _this2.renderReactComponent();\n          });\n        } else {\n          _this2.renderReactComponent();\n        }\n      });\n    }\n  }, {\n    key: \"renderReactComponent\",\n    value: function renderReactComponent() {\n      this.unmountReactComponent();\n      var root = this.getComponentContainer();\n      var node = this.cell;\n      var graph = this.graph;\n\n      if (root) {\n        var component = this.graph.hook.getReactComponent(node);\n        var elem = React.createElement(Wrap, {\n          graph: graph,\n          node: node,\n          component: component\n        });\n\n        if (Portal.isActive()) {\n          Portal.connect(this.cell.id, ReactDOM.createPortal(elem, root));\n        } else {\n          ReactDOM.render(elem, root);\n        }\n      }\n    }\n  }, {\n    key: \"unmountReactComponent\",\n    value: function unmountReactComponent() {\n      var root = this.getComponentContainer();\n\n      if (root) {\n        ReactDOM.unmountComponentAtNode(root);\n      }\n\n      return root;\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(e, x, y) {\n      var target = e.target;\n      var tagName = target.tagName.toLowerCase();\n\n      if (tagName === 'input') {\n        var type = target.getAttribute('type');\n\n        if (type == null || ['text', 'password', 'number', 'email', 'search', 'tel', 'url'].includes(type)) {\n          return;\n        }\n      }\n\n      _get(_getPrototypeOf(ReactShapeView.prototype), \"onMouseDown\", this).call(this, e, x, y);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      Portal.disconnect(this.cell.id);\n      this.unmountReactComponent();\n\n      _get(_getPrototypeOf(ReactShapeView.prototype), \"unmount\", this).call(this);\n\n      return this;\n    }\n  }]);\n\n  return ReactShapeView;\n}(NodeView);\n\n(function (ReactShapeView) {\n  ReactShapeView.action = 'react';\n  ReactShapeView.config({\n    bootstrap: [ReactShapeView.action],\n    actions: {\n      component: ReactShapeView.action\n    }\n  });\n  NodeView.registry.register('react-shape-view', ReactShapeView, true);\n})(ReactShapeView || (ReactShapeView = {}));","map":null,"metadata":{},"sourceType":"module"}