{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport isBoolean from 'lodash/isBoolean';\nimport isObject from 'lodash/isObject';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nexport var NsUpdateEdge;\n\n(function (NsUpdateEdge) {\n  var _this = this;\n\n  NsUpdateEdge.command = XFlowEdgeCommands.UPDATE_EDGE;\n  NsUpdateEdge.hookKey = 'updateEdge';\n  NsUpdateEdge.XFlowEdgeSetOptions = {\n    overwrite: true\n  };\n\n  NsUpdateEdge.XFlowUpdateLabelService = function (edge, edgeConfig) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NsUpdateEdge.XFlowEdgeSetOptions;\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              edge === null || edge === void 0 ? void 0 : edge.setLabelAt(0, (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.label) || edgeConfig, options);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n})(NsUpdateEdge || (NsUpdateEdge = {}));\n\nvar UpdateEdgeCommand =\n/*#__PURE__*/\n\n/** 连线更新命令 */\nfunction () {\n  function UpdateEdgeCommand() {\n    var _this2 = this;\n\n    _classCallCheck(this, UpdateEdgeCommand);\n\n    this.execute = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context3.next = 4;\n                return hooks.updateEdge.call(args, function (handlerArgs) {\n                  return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var x6Graph, updateEdgeService, _handlerArgs$updateEd, updateEdgeLabelService, _handlerArgs$options, options, edgeConfig, x6Edge;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return this.ctx.getX6Graph();\n\n                          case 2:\n                            x6Graph = _context2.sent;\n                            updateEdgeService = handlerArgs.updateEdgeService, _handlerArgs$updateEd = handlerArgs.updateEdgeLabelService, updateEdgeLabelService = _handlerArgs$updateEd === void 0 ? NsUpdateEdge.XFlowUpdateLabelService : _handlerArgs$updateEd, _handlerArgs$options = handlerArgs.options, options = _handlerArgs$options === void 0 ? NsUpdateEdge.XFlowEdgeSetOptions : _handlerArgs$options;\n\n                            if (!updateEdgeService) {\n                              _context2.next = 10;\n                              break;\n                            }\n\n                            _context2.next = 7;\n                            return updateEdgeService(handlerArgs);\n\n                          case 7:\n                            _context2.t0 = _context2.sent;\n                            _context2.next = 11;\n                            break;\n\n                          case 10:\n                            _context2.t0 = handlerArgs === null || handlerArgs === void 0 ? void 0 : handlerArgs.edgeConfig;\n\n                          case 11:\n                            edgeConfig = _context2.t0;\n                            x6Edge = x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n                            x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.setData(edgeConfig, options);\n\n                            if (!(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.hasOwnProperty('label'))) {\n                              _context2.next = 17;\n                              break;\n                            }\n\n                            _context2.next = 17;\n                            return updateEdgeLabelService(x6Edge, edgeConfig, options);\n\n                          case 17:\n                            if (isBoolean(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.visible)) {\n                              x6Edge.setVisible(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.visible);\n                            }\n\n                            if (edgeConfig.attrs) {\n                              x6Edge.setAttrs(edgeConfig.attrs);\n                            }\n\n                            if (edgeConfig.vertices) {\n                              x6Edge.setVertices(edgeConfig.vertices);\n                            }\n\n                            if (edgeConfig.router) {\n                              x6Edge.setRouter(edgeConfig.router);\n                            }\n\n                            if (edgeConfig.connector) {\n                              x6Edge.setConnector(edgeConfig.connector);\n                            }\n\n                            if (isObject(edgeConfig.source)) {\n                              x6Edge.setSource(edgeConfig.source);\n                            }\n\n                            if (isObject(edgeConfig.target)) {\n                              x6Edge.setTarget(edgeConfig.target);\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              edgeConfig: edgeConfig,\n                              edgeCell: x6Edge\n                            });\n\n                          case 25:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context3.sent;\n                this.ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n\n    this.undo = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.ctx.undo();\n                return _context4.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n\n    this.redo = function () {\n      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.ctx.isUndoable) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(UpdateEdgeCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n  }]);\n\n  return UpdateEdgeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], UpdateEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], UpdateEdgeCommand.prototype, \"init\", null);\n\nUpdateEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsUpdateEdge.command.id\n  }\n})\n/** 连线更新命令 */\n], UpdateEdgeCommand);\nexport { UpdateEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}