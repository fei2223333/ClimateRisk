{"ast":null,"code":"export function diff(oldList, newList, key) {\n  var oldMap = makeKeyIndexAndFree(oldList, key);\n  var newMap = makeKeyIndexAndFree(newList, key);\n  var newFree = newMap.free;\n  var oldKeyIndex = oldMap.keyIndex;\n  var newKeyIndex = newMap.keyIndex;\n  var moves = [];\n  var children = [];\n  var i = 0;\n  var item;\n  var itemKey;\n  var freeIndex = 0;\n\n  while (i < oldList.length) {\n    item = oldList[i];\n    itemKey = item[key];\n\n    if (itemKey) {\n      // eslint-disable-next-line\n      if (!newKeyIndex.hasOwnProperty(itemKey)) {\n        children.push(null);\n      } else {\n        var newItemIndex = newKeyIndex[itemKey];\n        children.push(newList[newItemIndex]);\n      }\n    } else {\n      freeIndex += 1;\n      var freeItem = newFree[freeIndex];\n      children.push(freeItem || null);\n    }\n\n    i += 1;\n  }\n\n  var simulateList = children.slice(0);\n  i = 0;\n\n  while (i < simulateList.length) {\n    if (simulateList[i] === null) {\n      remove(i);\n      removeSimulate(i);\n    } else {\n      i += 1;\n    }\n  }\n\n  var j = i = 0;\n\n  while (i < newList.length) {\n    item = newList[i];\n    itemKey = item[key];\n    var simulateItem = simulateList[j];\n\n    if (simulateItem) {\n      var simulateItemKey = simulateItem[key];\n\n      if (itemKey === simulateItemKey) {\n        j += 1;\n      } else {\n        // eslint-disable-next-line\n        if (!oldKeyIndex.hasOwnProperty(itemKey)) {\n          insert(i, item);\n        } else {\n          var nextSimulateItem = simulateList[j + 1];\n\n          if (nextSimulateItem) {\n            var nextItemKey = nextSimulateItem[key];\n\n            if (nextItemKey === itemKey) {\n              remove(i);\n              removeSimulate(j);\n              j += 1;\n            } else {\n              insert(i, item);\n            }\n          }\n        }\n      }\n    } else {\n      insert(i, item);\n    }\n\n    i += 1;\n  }\n\n  var k = simulateList.length - j;\n\n  while ((j += 1) < simulateList.length) {\n    k -= 1;\n    remove(k + i);\n  }\n\n  function remove(index) {\n    var move = {\n      index: index,\n      type: 0,\n      item: null\n    };\n    moves.push(move);\n  }\n\n  function insert(index, item) {\n    var move = {\n      index: index,\n      item: item,\n      type: 1\n    };\n    moves.push(move);\n  }\n\n  function removeSimulate(index) {\n    simulateList.splice(index, 1);\n  }\n\n  return {\n    moves: moves\n  };\n}\n\nfunction makeKeyIndexAndFree(list, key) {\n  var keyIndex = {};\n  var free = [];\n\n  for (var i = 0, len = list.length; i < len; i += 1) {\n    var item = list[i];\n    var itemKey = item[key];\n\n    if (itemKey) {\n      keyIndex[itemKey] = i;\n    } else {\n      free.push(item);\n    }\n  }\n\n  return {\n    keyIndex: keyIndex,\n    free: free\n  };\n}","map":null,"metadata":{},"sourceType":"module"}