{"ast":null,"code":"import _objectSpread from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from './redux/actions';\nimport { Upload, message, Button } from 'antd';\nimport { CloudUploadOutlined } from '@ant-design/icons';\nimport Axios from \"axios\";\nexport var SpineContent = /*#__PURE__*/function (_Component) {\n  _inherits(SpineContent, _Component);\n\n  var _super = _createSuper(SpineContent);\n\n  function SpineContent(props) {\n    var _this;\n\n    _classCallCheck(this, SpineContent);\n\n    _this = _super.call(this, props);\n\n    _this.handleFileChange = function (_ref) {\n      var file = _ref.file,\n          fileList = _ref.fileList;\n\n      //处理文件change，保证用户选择的文件只有一个\n      _this.setState({\n        fileList: fileList.length ? [fileList[fileList.length - 1]] : []\n      });\n    };\n\n    _this.handleUpload = function () {\n      if (!_this.state.fileList.length) {\n        message.warning('请选择要上传的文件');\n      }\n\n      var formData = new FormData();\n      formData.append('file', _this.state.fileList[0].originFileObj);\n\n      _this.setState({\n        uploading: true\n      });\n\n      Axios.defaults.baseURL = 'https://jsonplaceholder.typicode.com/';\n      Axios({\n        method: 'post',\n        url: 'posts',\n        data: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n        message.success('上传成功');\n        console.log(data);\n      }).catch(function (err) {\n        console.log(err);\n      }).finally(function () {\n        _this.setState({\n          uploading: false\n        });\n      });\n    };\n\n    _this.state = {\n      showModal: false,\n      fileList: [],\n      //文件列表，用于控制upload组件\n      uploading: false //上传按钮loading显示控制\n\n    };\n    return _this;\n  }\n\n  _createClass(SpineContent, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Upload, {\n        fileList: this.state.fileList,\n        beforeUpload: function beforeUpload(f, fList) {\n          return false;\n        },\n        onChange: this.handleFileChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(CloudUploadOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }), \" \\u9009\\u62E9\\u6587\\u4EF6\"));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    value: // @ts-ignore\n    function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return SpineContent;\n}(Component);\n/* istanbul ignore next */\n\nSpineContent.propTypes = {\n  home: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    home: state.home\n  };\n}\n/* istanbul ignore next */\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(_objectSpread({}, actions), dispatch)\n  };\n}\n\nvar _default = connect(mapStateToProps, mapDispatchToProps)(SpineContent);\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(SpineContent, \"SpineContent\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n  reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n  reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/shuge/Documents/project/rekit-project/Spine/src/features/home/SpineContent.js"],"names":["React","Component","PropTypes","bindActionCreators","connect","actions","Upload","message","Button","CloudUploadOutlined","Axios","SpineContent","props","handleFileChange","file","fileList","setState","length","handleUpload","state","warning","formData","FormData","append","originFileObj","uploading","defaults","baseURL","method","url","data","headers","then","success","console","log","catch","err","finally","showModal","f","fList","propTypes","home","object","isRequired","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actions from './redux/actions';\nimport { Upload, message, Button } from 'antd';\nimport { CloudUploadOutlined } from '@ant-design/icons';\nimport Axios from \"axios\";\n\nexport class SpineContent extends Component {\n  static propTypes = {\n    home: PropTypes.object.isRequired,\n    actions: PropTypes.object.isRequired,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false,\n      fileList: [], //文件列表，用于控制upload组件\n      uploading: false, //上传按钮loading显示控制\n    };\n  }\n\n  handleFileChange = ({ file, fileList }) => {\n    //处理文件change，保证用户选择的文件只有一个\n    this.setState({\n      fileList: fileList.length ? [fileList[fileList.length - 1]] : [],\n    });\n  };\n\n  handleUpload = () => {\n    if (!this.state.fileList.length) {\n      message.warning('请选择要上传的文件');\n    }\n\n    const formData = new FormData();\n    formData.append('file', this.state.fileList[0].originFileObj);\n\n    this.setState({\n      uploading: true,\n    });\n\n    Axios.defaults.baseURL = 'https://jsonplaceholder.typicode.com/';\n    Axios({\n      method: 'post',\n      url: 'posts',\n      data: formData,\n      headers: { 'Content-Type': 'multipart/form-data' },\n    })\n      .then(({ data }) => {\n        message.success('上传成功');\n        console.log(data);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        this.setState({\n          uploading: false,\n        });\n      });\n  };\n\n  render() {\n    return (\n      <Upload\n        fileList={this.state.fileList}\n        beforeUpload={(f, fList) => false}\n        onChange={this.handleFileChange}\n      >\n        <Button>\n          <CloudUploadOutlined /> 选择文件\n        </Button>\n      </Upload>\n    );\n  }\n}\n\n/* istanbul ignore next */\nfunction mapStateToProps(state) {\n  return {\n    home: state.home,\n  };\n}\n\n/* istanbul ignore next */\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({ ...actions }, dispatch),\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SpineContent);\n"]},"metadata":{},"sourceType":"module"}