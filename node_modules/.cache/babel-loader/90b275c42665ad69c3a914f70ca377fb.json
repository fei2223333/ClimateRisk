{"ast":null,"code":"import { Model } from '../model/model';\nexport function grid(cells) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var model = Model.isModel(cells) ? cells : new Model().resetCells(cells, {\n    sort: false,\n    dryrun: true\n  });\n  var nodes = model.getNodes();\n  var columns = options.columns || 1;\n  var rows = Math.ceil(nodes.length / columns);\n  var dx = options.dx || 0;\n  var dy = options.dy || 0;\n  var centre = options.center !== false;\n  var resizeToFit = options.resizeToFit === true;\n  var marginX = options.marginX || 0;\n  var marginY = options.marginY || 0;\n  var columnWidths = [];\n  var columnWidth = options.columnWidth;\n\n  if (columnWidth === 'compact') {\n    for (var j = 0; j < columns; j += 1) {\n      var items = GridLayout.getNodesInColumn(nodes, j, columns);\n      columnWidths.push(GridLayout.getMaxDim(items, 'width') + dx);\n    }\n  } else {\n    if (columnWidth == null || columnWidth === 'auto') {\n      columnWidth = GridLayout.getMaxDim(nodes, 'width') + dx;\n    }\n\n    for (var i = 0; i < columns; i += 1) {\n      columnWidths.push(columnWidth);\n    }\n  }\n\n  var columnLefts = GridLayout.accumulate(columnWidths, marginX);\n  var rowHeights = [];\n  var rowHeight = options.rowHeight;\n\n  if (rowHeight === 'compact') {\n    for (var _i = 0; _i < rows; _i += 1) {\n      var _items = GridLayout.getNodesInRow(nodes, _i, columns);\n\n      rowHeights.push(GridLayout.getMaxDim(_items, 'height') + dy);\n    }\n  } else {\n    if (rowHeight == null || rowHeight === 'auto') {\n      rowHeight = GridLayout.getMaxDim(nodes, 'height') + dy;\n    }\n\n    for (var _i2 = 0; _i2 < rows; _i2 += 1) {\n      rowHeights.push(rowHeight);\n    }\n  }\n\n  var rowTops = GridLayout.accumulate(rowHeights, marginY);\n  model.startBatch('layout');\n  nodes.forEach(function (node, index) {\n    var rowIndex = index % columns;\n    var columnIndex = Math.floor(index / columns);\n    var columnWidth = columnWidths[rowIndex];\n    var rowHeight = rowHeights[columnIndex];\n    var cx = 0;\n    var cy = 0;\n    var size = node.getSize();\n\n    if (resizeToFit) {\n      var width = columnWidth - 2 * dx;\n      var height = rowHeight - 2 * dy;\n      var calcHeight = size.height * (size.width ? width / size.width : 1);\n      var calcWidth = size.width * (size.height ? height / size.height : 1);\n\n      if (rowHeight < calcHeight) {\n        width = calcWidth;\n      } else {\n        height = calcHeight;\n      }\n\n      size = {\n        width: width,\n        height: height\n      };\n      node.setSize(size, options);\n    }\n\n    if (centre) {\n      cx = (columnWidth - size.width) / 2;\n      cy = (rowHeight - size.height) / 2;\n    }\n\n    node.position(columnLefts[rowIndex] + dx + cx, rowTops[columnIndex] + dy + cy, options);\n  });\n  model.stopBatch('layout');\n}\nvar GridLayout;\n\n(function (GridLayout) {\n  function getMaxDim(nodes, name) {\n    return nodes.reduce(function (memo, node) {\n      return Math.max(node.getSize()[name], memo);\n    }, 0);\n  }\n\n  GridLayout.getMaxDim = getMaxDim;\n\n  function getNodesInRow(nodes, rowIndex, columnCount) {\n    var res = [];\n\n    for (var i = columnCount * rowIndex, ii = i + columnCount; i < ii; i += 1) {\n      res.push(nodes[i]);\n    }\n\n    return res;\n  }\n\n  GridLayout.getNodesInRow = getNodesInRow;\n\n  function getNodesInColumn(nodes, columnIndex, columnCount) {\n    var res = [];\n\n    for (var i = columnIndex, ii = nodes.length; i < ii; i += columnCount) {\n      res.push(nodes[i]);\n    }\n\n    return res;\n  }\n\n  GridLayout.getNodesInColumn = getNodesInColumn;\n\n  function accumulate(items, start) {\n    return items.reduce(function (memo, item, i) {\n      memo.push(memo[i] + item);\n      return memo;\n    }, [start || 0]);\n  }\n\n  GridLayout.accumulate = accumulate;\n})(GridLayout || (GridLayout = {}));","map":null,"metadata":{},"sourceType":"module"}