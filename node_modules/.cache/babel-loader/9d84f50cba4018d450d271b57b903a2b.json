{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport JQuery from 'jquery';\nimport { Dom, FunctionExt } from '../util';\nimport { Cell } from '../model';\nimport { Config } from '../global';\nimport { View, Markup } from '../view';\nexport var GraphView = /*#__PURE__*/function (_View) {\n  _inherits(GraphView, _View);\n\n  function GraphView(graph) {\n    var _this;\n\n    _classCallCheck(this, GraphView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GraphView).call(this));\n    _this.graph = graph;\n\n    var _Markup$parseJSONMark = Markup.parseJSONMarkup(GraphView.markup),\n        selectors = _Markup$parseJSONMark.selectors,\n        fragment = _Markup$parseJSONMark.fragment;\n\n    _this.background = selectors.background;\n    _this.grid = selectors.grid;\n    _this.svg = selectors.svg;\n    _this.defs = selectors.defs;\n    _this.viewport = selectors.viewport;\n    _this.primer = selectors.primer;\n    _this.stage = selectors.stage;\n    _this.decorator = selectors.decorator;\n    _this.overlay = selectors.overlay;\n    _this.container = _this.options.container;\n    _this.restore = GraphView.snapshoot(_this.container);\n\n    _this.$(_this.container).addClass(_this.prefixClassName('graph')).append(fragment);\n\n    _this.delegateEvents();\n\n    return _this;\n  }\n\n  _createClass(GraphView, [{\n    key: \"delegateEvents\",\n    value: function delegateEvents() {\n      var ctor = this.constructor;\n\n      _get(_getPrototypeOf(GraphView.prototype), \"delegateEvents\", this).call(this, ctor.events);\n\n      return this;\n    }\n    /**\n     * Guard the specified event. If the event is not interesting, it\n     * returns `true`, otherwise returns `false`.\n     */\n\n  }, {\n    key: \"guard\",\n    value: function guard(e, view) {\n      // handled as `contextmenu` type\n      if (e.type === 'mousedown' && e.button === 2) {\n        return true;\n      }\n\n      if (this.options.guard && this.options.guard(e, view)) {\n        return true;\n      }\n\n      if (e.data && e.data.guarded !== undefined) {\n        return e.data.guarded;\n      }\n\n      if (view && view.cell && Cell.isCell(view.cell)) {\n        return false;\n      }\n\n      if (this.svg === e.target || this.container === e.target || JQuery.contains(this.svg, e.target)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"findView\",\n    value: function findView(elem) {\n      return this.graph.renderer.findViewByElem(elem);\n    }\n  }, {\n    key: \"onDblClick\",\n    value: function onDblClick(evt) {\n      if (this.options.preventDefaultDblClick) {\n        evt.preventDefault();\n      }\n\n      var e = this.normalizeEvent(evt);\n      var view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n\n      if (view) {\n        view.onDblClick(e, localPoint.x, localPoint.y);\n      } else {\n        this.graph.trigger('blank:dblclick', {\n          e: e,\n          x: localPoint.x,\n          y: localPoint.y\n        });\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(evt) {\n      if (this.getMouseMovedCount(evt) <= this.options.clickThreshold) {\n        var e = this.normalizeEvent(evt);\n        var view = this.findView(e.target);\n\n        if (this.guard(e, view)) {\n          return;\n        }\n\n        var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n\n        if (view) {\n          view.onClick(e, localPoint.x, localPoint.y);\n        } else {\n          this.graph.trigger('blank:click', {\n            e: e,\n            x: localPoint.x,\n            y: localPoint.y\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onContextMenu\",\n    value: function onContextMenu(evt) {\n      if (this.options.preventDefaultContextMenu) {\n        evt.preventDefault();\n      }\n\n      var e = this.normalizeEvent(evt);\n      var view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n\n      if (view) {\n        view.onContextMenu(e, localPoint.x, localPoint.y);\n      } else {\n        this.graph.trigger('blank:contextmenu', {\n          e: e,\n          x: localPoint.x,\n          y: localPoint.y\n        });\n      }\n    }\n  }, {\n    key: \"delegateDragEvents\",\n    value: function delegateDragEvents(e, view) {\n      if (e.data == null) {\n        e.data = {};\n      }\n\n      this.setEventData(e, {\n        currentView: view || null,\n        mouseMovedCount: 0,\n        startPosition: {\n          x: e.clientX,\n          y: e.clientY\n        }\n      });\n      var ctor = this.constructor;\n      this.delegateDocumentEvents(ctor.documentEvents, e.data);\n      this.undelegateEvents();\n    }\n  }, {\n    key: \"getMouseMovedCount\",\n    value: function getMouseMovedCount(e) {\n      var data = this.getEventData(e);\n      return data.mouseMovedCount || 0;\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(evt) {\n      var e = this.normalizeEvent(evt);\n      var view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      if (this.options.preventDefaultMouseDown) {\n        e.preventDefault();\n      }\n\n      var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n\n      if (view) {\n        view.onMouseDown(e, localPoint.x, localPoint.y);\n      } else {\n        if (this.options.preventDefaultBlankAction) {\n          e.preventDefault();\n        }\n\n        this.graph.trigger('blank:mousedown', {\n          e: e,\n          x: localPoint.x,\n          y: localPoint.y\n        });\n      }\n\n      this.delegateDragEvents(e, view);\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(evt) {\n      var data = this.getEventData(evt);\n      var startPosition = data.startPosition;\n\n      if (startPosition && startPosition.x === evt.clientX && startPosition.y === evt.clientY) {\n        return;\n      }\n\n      if (data.mouseMovedCount == null) {\n        data.mouseMovedCount = 0;\n      }\n\n      data.mouseMovedCount += 1;\n      var mouseMovedCount = data.mouseMovedCount;\n\n      if (mouseMovedCount <= this.options.moveThreshold) {\n        return;\n      }\n\n      var e = this.normalizeEvent(evt);\n      var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n      var view = data.currentView;\n\n      if (view) {\n        view.onMouseMove(e, localPoint.x, localPoint.y);\n      } else {\n        this.graph.trigger('blank:mousemove', {\n          e: e,\n          x: localPoint.x,\n          y: localPoint.y\n        });\n      }\n\n      this.setEventData(e, data);\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(e) {\n      this.undelegateDocumentEvents();\n      var normalized = this.normalizeEvent(e);\n      var localPoint = this.graph.snapToGrid(normalized.clientX, normalized.clientY);\n      var data = this.getEventData(e);\n      var view = data.currentView;\n\n      if (view) {\n        view.onMouseUp(normalized, localPoint.x, localPoint.y);\n      } else {\n        this.graph.trigger('blank:mouseup', {\n          e: normalized,\n          x: localPoint.x,\n          y: localPoint.y\n        });\n      }\n\n      if (!e.isPropagationStopped()) {\n        this.onClick(JQuery.Event(e, {\n          type: 'click',\n          data: e.data\n        }));\n      }\n\n      e.stopImmediatePropagation();\n      this.delegateEvents();\n    }\n  }, {\n    key: \"onMouseOver\",\n    value: function onMouseOver(evt) {\n      var e = this.normalizeEvent(evt);\n      var view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      if (view) {\n        view.onMouseOver(e);\n      } else {\n        // prevent border of paper from triggering this\n        if (this.container === e.target) {\n          return;\n        }\n\n        this.graph.trigger('blank:mouseover', {\n          e: e\n        });\n      }\n    }\n  }, {\n    key: \"onMouseOut\",\n    value: function onMouseOut(evt) {\n      var e = this.normalizeEvent(evt);\n      var view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      if (view) {\n        view.onMouseOut(e);\n      } else {\n        if (this.container === e.target) {\n          return;\n        }\n\n        this.graph.trigger('blank:mouseout', {\n          e: e\n        });\n      }\n    }\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter(evt) {\n      var e = this.normalizeEvent(evt);\n      var view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      var relatedView = this.graph.renderer.findViewByElem(e.relatedTarget);\n\n      if (view) {\n        if (relatedView === view) {\n          // mouse moved from tool to view\n          return;\n        }\n\n        view.onMouseEnter(e);\n      } else {\n        if (relatedView) {\n          return;\n        }\n\n        this.graph.trigger('graph:mouseenter', {\n          e: e\n        });\n      }\n    }\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave(evt) {\n      var e = this.normalizeEvent(evt);\n      var view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      var relatedView = this.graph.renderer.findViewByElem(e.relatedTarget);\n\n      if (view) {\n        if (relatedView === view) {\n          // mouse moved from view to tool\n          return;\n        }\n\n        view.onMouseLeave(e);\n      } else {\n        if (relatedView) {\n          return;\n        }\n\n        this.graph.trigger('graph:mouseleave', {\n          e: e\n        });\n      }\n    }\n  }, {\n    key: \"onMouseWheel\",\n    value: function onMouseWheel(evt) {\n      var e = this.normalizeEvent(evt);\n      var view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      var originalEvent = e.originalEvent;\n      var localPoint = this.graph.snapToGrid(originalEvent.clientX, originalEvent.clientY);\n      var delta = Math.max(-1, Math.min(1, originalEvent.wheelDelta || -originalEvent.detail));\n\n      if (view) {\n        view.onMouseWheel(e, localPoint.x, localPoint.y, delta);\n      } else {\n        this.graph.trigger('blank:mousewheel', {\n          e: e,\n          delta: delta,\n          x: localPoint.x,\n          y: localPoint.y\n        });\n      }\n    }\n  }, {\n    key: \"onCustomEvent\",\n    value: function onCustomEvent(evt) {\n      var elem = evt.currentTarget;\n      var event = elem.getAttribute('event') || elem.getAttribute('data-event');\n\n      if (event) {\n        var view = this.findView(elem);\n\n        if (view) {\n          var e = this.normalizeEvent(evt);\n\n          if (this.guard(e, view)) {\n            return;\n          }\n\n          var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n          view.onCustomEvent(e, event, localPoint.x, localPoint.y);\n        }\n      }\n    }\n  }, {\n    key: \"handleMagnetEvent\",\n    value: function handleMagnetEvent(evt, handler) {\n      var magnetElem = evt.currentTarget;\n      var magnetValue = magnetElem.getAttribute('magnet');\n\n      if (magnetValue && magnetValue.toLowerCase() !== 'false') {\n        var view = this.findView(magnetElem);\n\n        if (view) {\n          var e = this.normalizeEvent(evt);\n\n          if (this.guard(e, view)) {\n            return;\n          }\n\n          var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n          FunctionExt.call(handler, this.graph, view, e, magnetElem, localPoint.x, localPoint.y);\n        }\n      }\n    }\n  }, {\n    key: \"onMagnetMouseDown\",\n    value: function onMagnetMouseDown(e) {\n      this.handleMagnetEvent(e, function (view, e, magnet, x, y) {\n        view.onMagnetMouseDown(e, magnet, x, y);\n      });\n    }\n  }, {\n    key: \"onMagnetDblClick\",\n    value: function onMagnetDblClick(e) {\n      this.handleMagnetEvent(e, function (view, e, magnet, x, y) {\n        view.onMagnetDblClick(e, magnet, x, y);\n      });\n    }\n  }, {\n    key: \"onMagnetContextMenu\",\n    value: function onMagnetContextMenu(e) {\n      if (this.options.preventDefaultContextMenu) {\n        e.preventDefault();\n      }\n\n      this.handleMagnetEvent(e, function (view, e, magnet, x, y) {\n        view.onMagnetContextMenu(e, magnet, x, y);\n      });\n    }\n  }, {\n    key: \"onLabelMouseDown\",\n    value: function onLabelMouseDown(evt) {\n      var labelNode = evt.currentTarget;\n      var view = this.findView(labelNode);\n\n      if (view) {\n        var e = this.normalizeEvent(evt);\n\n        if (this.guard(e, view)) {\n          return;\n        }\n\n        var localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n        view.onLabelMouseDown(e, localPoint.x, localPoint.y);\n      }\n    }\n  }, {\n    key: \"onImageDragStart\",\n    value: function onImageDragStart() {\n      // This is the only way to prevent image dragging in Firefox that works.\n      // Setting -moz-user-select: none, draggable=\"false\" attribute or\n      // user-drag: none didn't help.\n      return false;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.undelegateEvents();\n      this.undelegateDocumentEvents();\n      this.restore();\n\n      this.restore = function () {};\n    }\n  }, {\n    key: \"model\",\n    get: function get() {\n      return this.graph.model;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this.graph.options;\n    }\n  }]);\n\n  return GraphView;\n}(View);\n\n__decorate([View.dispose()], GraphView.prototype, \"dispose\", null);\n\n(function (GraphView) {\n  var prefixCls = \"\".concat(Config.prefixCls, \"-graph\");\n  GraphView.markup = [{\n    ns: Dom.ns.xhtml,\n    tagName: 'div',\n    selector: 'background',\n    className: \"\".concat(prefixCls, \"-background\")\n  }, {\n    ns: Dom.ns.xhtml,\n    tagName: 'div',\n    selector: 'grid',\n    className: \"\".concat(prefixCls, \"-grid\")\n  }, {\n    ns: Dom.ns.svg,\n    tagName: 'svg',\n    selector: 'svg',\n    className: \"\".concat(prefixCls, \"-svg\"),\n    attrs: {\n      width: '100%',\n      height: '100%',\n      'xmlns:xlink': Dom.ns.xlink\n    },\n    children: [{\n      tagName: 'defs',\n      selector: 'defs'\n    }, {\n      tagName: 'g',\n      selector: 'viewport',\n      className: \"\".concat(prefixCls, \"-svg-viewport\"),\n      children: [{\n        tagName: 'g',\n        selector: 'primer',\n        className: \"\".concat(prefixCls, \"-svg-primer\")\n      }, {\n        tagName: 'g',\n        selector: 'stage',\n        className: \"\".concat(prefixCls, \"-svg-stage\")\n      }, {\n        tagName: 'g',\n        selector: 'decorator',\n        className: \"\".concat(prefixCls, \"-svg-decorator\")\n      }, {\n        tagName: 'g',\n        selector: 'overlay',\n        className: \"\".concat(prefixCls, \"-svg-overlay\")\n      }]\n    }]\n  }];\n\n  function snapshoot(elem) {\n    var cloned = elem.cloneNode();\n    elem.childNodes.forEach(function (child) {\n      return cloned.appendChild(child);\n    });\n    return function () {\n      // remove all children\n      Dom.empty(elem); // remove all attributes\n\n      while (elem.attributes.length > 0) {\n        elem.removeAttribute(elem.attributes[0].name);\n      } // restore attributes\n\n\n      for (var i = 0, l = cloned.attributes.length; i < l; i += 1) {\n        var attr = cloned.attributes[i];\n        elem.setAttribute(attr.name, attr.value);\n      } // restore children\n\n\n      cloned.childNodes.forEach(function (child) {\n        return elem.appendChild(child);\n      });\n    };\n  }\n\n  GraphView.snapshoot = snapshoot;\n})(GraphView || (GraphView = {}));\n\n(function (GraphView) {\n  var _GraphView$events;\n\n  var prefixCls = Config.prefixCls;\n  GraphView.events = (_GraphView$events = {\n    dblclick: 'onDblClick',\n    contextmenu: 'onContextMenu',\n    touchstart: 'onMouseDown',\n    mousedown: 'onMouseDown',\n    mouseover: 'onMouseOver',\n    mouseout: 'onMouseOut',\n    mouseenter: 'onMouseEnter',\n    mouseleave: 'onMouseLeave',\n    mousewheel: 'onMouseWheel',\n    DOMMouseScroll: 'onMouseWheel'\n  }, _defineProperty(_GraphView$events, \"mouseenter  .\".concat(prefixCls, \"-cell\"), 'onMouseEnter'), _defineProperty(_GraphView$events, \"mouseleave  .\".concat(prefixCls, \"-cell\"), 'onMouseLeave'), _defineProperty(_GraphView$events, \"mouseenter  .\".concat(prefixCls, \"-cell-tools\"), 'onMouseEnter'), _defineProperty(_GraphView$events, \"mouseleave  .\".concat(prefixCls, \"-cell-tools\"), 'onMouseLeave'), _defineProperty(_GraphView$events, \"mousedown   .\".concat(prefixCls, \"-cell [event]\"), 'onCustomEvent'), _defineProperty(_GraphView$events, \"touchstart  .\".concat(prefixCls, \"-cell [event]\"), 'onCustomEvent'), _defineProperty(_GraphView$events, \"mousedown   .\".concat(prefixCls, \"-cell [data-event]\"), 'onCustomEvent'), _defineProperty(_GraphView$events, \"touchstart  .\".concat(prefixCls, \"-cell [data-event]\"), 'onCustomEvent'), _defineProperty(_GraphView$events, \"dblclick    .\".concat(prefixCls, \"-cell [magnet]\"), 'onMagnetDblClick'), _defineProperty(_GraphView$events, \"contextmenu .\".concat(prefixCls, \"-cell [magnet]\"), 'onMagnetContextMenu'), _defineProperty(_GraphView$events, \"mousedown   .\".concat(prefixCls, \"-cell [magnet]\"), 'onMagnetMouseDown'), _defineProperty(_GraphView$events, \"touchstart  .\".concat(prefixCls, \"-cell [magnet]\"), 'onMagnetMouseDown'), _defineProperty(_GraphView$events, \"dblclick    .\".concat(prefixCls, \"-cell [data-magnet]\"), 'onMagnetDblClick'), _defineProperty(_GraphView$events, \"contextmenu .\".concat(prefixCls, \"-cell [data-magnet]\"), 'onMagnetContextMenu'), _defineProperty(_GraphView$events, \"mousedown   .\".concat(prefixCls, \"-cell [data-magnet]\"), 'onMagnetMouseDown'), _defineProperty(_GraphView$events, \"touchstart  .\".concat(prefixCls, \"-cell [data-magnet]\"), 'onMagnetMouseDown'), _defineProperty(_GraphView$events, \"dragstart   .\".concat(prefixCls, \"-cell image\"), 'onImageDragStart'), _defineProperty(_GraphView$events, \"mousedown   .\".concat(prefixCls, \"-edge .\").concat(prefixCls, \"-edge-label\"), 'onLabelMouseDown'), _defineProperty(_GraphView$events, \"touchstart  .\".concat(prefixCls, \"-edge .\").concat(prefixCls, \"-edge-label\"), 'onLabelMouseDown'), _GraphView$events);\n  GraphView.documentEvents = {\n    mousemove: 'onMouseMove',\n    touchmove: 'onMouseMove',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp',\n    touchcancel: 'onMouseUp'\n  };\n})(GraphView || (GraphView = {}));","map":null,"metadata":{},"sourceType":"module"}