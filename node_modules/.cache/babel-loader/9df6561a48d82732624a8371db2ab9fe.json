{"ast":null,"code":"import { Util } from '../../../global/util';\nimport { Point, Line, Angle } from '../../../geometry';\nexport function getSourceBBox(view, options) {\n  var bbox = view.sourceBBox.clone();\n\n  if (options && options.paddingBox) {\n    return bbox.moveAndExpand(options.paddingBox);\n  }\n\n  return bbox;\n}\nexport function getTargetBBox(view, options) {\n  var bbox = view.targetBBox.clone();\n\n  if (options && options.paddingBox) {\n    return bbox.moveAndExpand(options.paddingBox);\n  }\n\n  return bbox;\n}\nexport function getSourceEndpoint(view, options) {\n  if (view.sourceAnchor) {\n    return view.sourceAnchor;\n  }\n\n  var sourceBBox = getSourceBBox(view, options);\n  return sourceBBox.getCenter();\n}\nexport function getTargetEndpoint(view, options) {\n  if (view.targetAnchor) {\n    return view.targetAnchor;\n  }\n\n  var targetBBox = getTargetBBox(view, options);\n  return targetBBox.getCenter();\n} // returns a direction index from start point to end point\n// corrects for grid deformation between start and end\n\nexport function getDirectionAngle(start, end, directionCount, grid, options) {\n  var quadrant = 360 / directionCount;\n  var angleTheta = start.theta(fixAngleEnd(start, end, grid, options));\n  var normalizedAngle = Angle.normalize(angleTheta + quadrant / 2);\n  return quadrant * Math.floor(normalizedAngle / quadrant);\n}\n\nfunction fixAngleEnd(start, end, grid, options) {\n  var step = options.step;\n  var diffX = end.x - start.x;\n  var diffY = end.y - start.y;\n  var gridStepsX = diffX / grid.x;\n  var gridStepsY = diffY / grid.y;\n  var distanceX = gridStepsX * step;\n  var distanceY = gridStepsY * step;\n  return new Point(start.x + distanceX, start.y + distanceY);\n}\n/**\n * Returns the change in direction between two direction angles.\n */\n\n\nexport function getDirectionChange(angle1, angle2) {\n  var change = Math.abs(angle1 - angle2);\n  return change > 180 ? 360 - change : change;\n} // fix direction offsets according to current grid\n\nexport function getGridOffsets(grid, options) {\n  var step = options.step;\n  options.directions.forEach(function (direction) {\n    direction.gridOffsetX = direction.offsetX / step * grid.x;\n    direction.gridOffsetY = direction.offsetY / step * grid.y;\n  });\n  return options.directions;\n} // get grid size in x and y dimensions, adapted to source and target positions\n\nexport function getGrid(step, source, target) {\n  return {\n    source: source.clone(),\n    x: getGridDimension(target.x - source.x, step),\n    y: getGridDimension(target.y - source.y, step)\n  };\n}\n\nfunction getGridDimension(diff, step) {\n  // return step if diff = 0\n  if (!diff) {\n    return step;\n  }\n\n  var abs = Math.abs(diff);\n  var count = Math.round(abs / step); // return `abs` if less than one step apart\n\n  if (!count) {\n    return abs;\n  } // otherwise, return corrected step\n\n\n  var roundedDiff = count * step;\n  var remainder = abs - roundedDiff;\n  var correction = remainder / count;\n  return step + correction;\n}\n\nfunction snapGrid(point, grid) {\n  var source = grid.source;\n  var x = Util.snapToGrid(point.x - source.x, grid.x) + source.x;\n  var y = Util.snapToGrid(point.y - source.y, grid.y) + source.y;\n  return new Point(x, y);\n}\n\nexport function round(point, precision) {\n  return point.round(precision);\n}\nexport function align(point, grid, precision) {\n  return round(snapGrid(point.clone(), grid), precision);\n}\nexport function getKey(point) {\n  return point.toString();\n}\nexport function normalizePoint(point) {\n  return new Point(point.x === 0 ? 0 : Math.abs(point.x) / point.x, point.y === 0 ? 0 : Math.abs(point.y) / point.y);\n}\nexport function getCost(from, anchors) {\n  var min = Infinity;\n\n  for (var i = 0, len = anchors.length; i < len; i += 1) {\n    var dist = from.manhattanDistance(anchors[i]);\n\n    if (dist < min) {\n      min = dist;\n    }\n  }\n\n  return min;\n} // Find points around the bbox taking given directions into account\n// lines are drawn from anchor in given directions, intersections recorded\n// if anchor is outside bbox, only those directions that intersect get a rect point\n// the anchor itself is returned as rect point (representing some directions)\n// (since those directions are unobstructed by the bbox)\n\nexport function getRectPoints(anchor, bbox, directionList, grid, options) {\n  var precision = options.precision;\n  var directionMap = options.directionMap;\n  var centerVector = anchor.diff(bbox.getCenter());\n  var rectPoints = Object.keys(directionMap).reduce(function (res, key) {\n    if (directionList.includes(key)) {\n      var direction = directionMap[key]; // Create a line that is guaranteed to intersect the bbox if bbox\n      // is in the direction even if anchor lies outside of bbox.\n\n      var ending = new Point(anchor.x + direction.x * (Math.abs(centerVector.x) + bbox.width), anchor.y + direction.y * (Math.abs(centerVector.y) + bbox.height));\n      var intersectionLine = new Line(anchor, ending); // Get the farther intersection, in case there are two\n      // (that happens if anchor lies next to bbox)\n\n      var intersections = intersectionLine.intersect(bbox) || [];\n      var farthestIntersectionDistance;\n      var farthestIntersection = null;\n\n      for (var i = 0; i < intersections.length; i += 1) {\n        var intersection = intersections[i];\n        var distance = anchor.squaredDistance(intersection);\n\n        if (farthestIntersectionDistance == null || distance > farthestIntersectionDistance) {\n          farthestIntersectionDistance = distance;\n          farthestIntersection = intersection;\n        }\n      } // If an intersection was found in this direction, it is our rectPoint\n\n\n      if (farthestIntersection) {\n        var target = align(farthestIntersection, grid, precision); // If the rectPoint lies inside the bbox, offset it by one more step\n\n        if (bbox.containsPoint(target)) {\n          target = align(target.translate(direction.x * grid.x, direction.y * grid.y), grid, precision);\n        }\n\n        res.push(target);\n      }\n    }\n\n    return res;\n  }, []); // if anchor lies outside of bbox, add it to the array of points\n\n  if (!bbox.containsPoint(anchor)) {\n    rectPoints.push(align(anchor, grid, precision));\n  }\n\n  return rectPoints;\n} // reconstructs a route by concatenating points with their parents\n\nexport function reconstructRoute(parents, points, tailPoint, from, to) {\n  var route = [];\n  var prevDiff = normalizePoint(to.diff(tailPoint)); // tailPoint is assumed to be aligned already\n\n  var currentKey = getKey(tailPoint);\n  var parent = parents[currentKey];\n  var point;\n\n  while (parent) {\n    // point is assumed to be aligned already\n    point = points[currentKey];\n    var diff = normalizePoint(point.diff(parent));\n\n    if (!diff.equals(prevDiff)) {\n      route.unshift(point);\n      prevDiff = diff;\n    } // parent is assumed to be aligned already\n\n\n    currentKey = getKey(parent);\n    parent = parents[currentKey];\n  } // leadPoint is assumed to be aligned already\n\n\n  var leadPoint = points[currentKey];\n  var fromDiff = normalizePoint(leadPoint.diff(from));\n\n  if (!fromDiff.equals(prevDiff)) {\n    route.unshift(leadPoint);\n  }\n\n  return route;\n}","map":null,"metadata":{},"sourceType":"module"}