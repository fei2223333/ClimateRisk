{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { CancellationToken, cancelled } from './cancellation';\nimport { Deferred } from './deferred';\n/**\n * @returns resolves after a specified number of milliseconds\n * @throws cancelled if a given token is cancelled before a specified number of milliseconds\n */\n\nexport function timeout(ms) {\n  var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CancellationToken.None;\n  var deferred = new Deferred();\n  var handle = setTimeout(function () {\n    return deferred.resolve();\n  }, ms);\n  token.onCancellationRequested(function () {\n    clearTimeout(handle);\n    deferred.reject(cancelled());\n  });\n  return deferred.promise;\n}\nexport function retry(_x, _x2, _x3) {\n  return _retry.apply(this, arguments);\n}\n\nfunction _retry() {\n  _retry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(task, delay, retries) {\n    var lastError, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            i = 0;\n\n          case 1:\n            if (!(i < retries)) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.prev = 2;\n            _context.next = 5;\n            return task();\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            lastError = _context.t0; // eslint-disable-next-line no-await-in-loop\n\n            _context.next = 13;\n            return timeout(delay);\n\n          case 13:\n            i += 1;\n            _context.next = 1;\n            break;\n\n          case 16:\n            throw lastError;\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n  return _retry.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}