{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Node, Markup, ObjectExt } from '@antv/x6';\nexport var ReactShape = /*#__PURE__*/function (_Node) {\n  _inherits(ReactShape, _Node);\n\n  function ReactShape() {\n    _classCallCheck(this, ReactShape);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ReactShape).apply(this, arguments));\n  }\n\n  _createClass(ReactShape, [{\n    key: \"getComponent\",\n    value: function getComponent() {\n      return this.store.get('component');\n    }\n  }, {\n    key: \"setComponent\",\n    value: function setComponent(component) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (component == null) {\n        this.removeComponent(options);\n      } else {\n        this.store.set('component', component, options);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeComponent\",\n    value: function removeComponent() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.store.remove('component', options);\n      return this;\n    }\n  }, {\n    key: \"component\",\n    get: function get() {\n      return this.getComponent();\n    },\n    set: function set(val) {\n      this.setComponent(val);\n    }\n  }]);\n\n  return ReactShape;\n}(Node);\n\n(function (ReactShape) {\n  function getMarkup(simple, useForeignObject) {\n    var primer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rect';\n    var markup = [];\n    var content = useForeignObject ? Markup.getForeignObjectMarkup() : {\n      tagName: 'g',\n      selector: 'content'\n    };\n\n    if (simple) {\n      markup.push(content);\n    } else {\n      markup.push.apply(markup, [{\n        tagName: primer,\n        selector: 'body'\n      }, content, {\n        tagName: 'text',\n        selector: 'label'\n      }]);\n    }\n\n    return markup;\n  }\n\n  ReactShape.config({\n    view: 'react-shape-view',\n    markup: getMarkup(false, true),\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      label: {\n        fontSize: 14,\n        fill: '#333',\n        refX: '50%',\n        refY: '50%',\n        textAnchor: 'middle',\n        textVerticalAnchor: 'middle'\n      }\n    },\n    propHooks: function propHooks(metadata) {\n      if (metadata.markup == null) {\n        var primer = metadata.primer;\n        var useForeignObject = metadata.useForeignObject !== false;\n\n        if (primer && primer !== 'rect') {\n          metadata.markup = getMarkup(false, useForeignObject, primer);\n          var attrs = {};\n\n          if (primer === 'circle') {\n            attrs = {\n              refCx: '50%',\n              refCy: '50%',\n              refR: '50%'\n            };\n          } else if (primer === 'ellipse') {\n            attrs = {\n              refCx: '50%',\n              refCy: '50%',\n              refRx: '50%',\n              refRy: '50%'\n            };\n          }\n\n          metadata.attrs = ObjectExt.merge({}, {\n            body: Object.assign({\n              refWidth: null,\n              refHeight: null\n            }, attrs)\n          }, metadata.attrs || {});\n        } else {\n          if (metadata.simple) {\n            metadata.markup = getMarkup(true, useForeignObject);\n            metadata.attrs = ObjectExt.merge({}, {\n              body: null,\n              label: null\n            }, metadata.attrs || {});\n          }\n        }\n      }\n\n      return metadata;\n    }\n  });\n  Node.registry.register('react-shape', ReactShape, true);\n})(ReactShape || (ReactShape = {}));","map":null,"metadata":{},"sourceType":"module"}