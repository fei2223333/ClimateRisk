{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsUpdateNodePort;\n\n(function (NsUpdateNodePort) {\n  /** Command: 用于注册named factory */\n  NsUpdateNodePort.command = XFlowNodeCommands.UPDATE_NODE_PORT;\n  /** hookName */\n\n  NsUpdateNodePort.hookKey = 'updateNodePort';\n})(NsUpdateNodePort || (NsUpdateNodePort = {}));\n\nvar UpdateNodePort =\n/*#__PURE__*/\n\n/** 创建节点命令 */\nfunction () {\n  function UpdateNodePort() {\n    var _this = this;\n\n    _classCallCheck(this, UpdateNodePort);\n\n    this.getCell = function (graph, node) {\n      if (typeof node === 'string') {\n        return graph.getCellById(node);\n      }\n\n      return node;\n    };\n\n    this.getNodeConfig = function (x6Node) {\n      var data = x6Node.getData();\n      var position = x6Node.getPosition();\n      var size = x6Node.getSize();\n      return Object.assign(Object.assign(Object.assign({}, data), position), size);\n    };\n\n    this.updatePortsOfNodeConfig = function (cell, ports, options) {\n      var nodeConfig = _this.getNodeConfig(cell);\n\n      if (_this.isNodeAnchors(nodeConfig.ports)) {\n        nodeConfig.ports = _toConsumableArray(ports);\n      }\n\n      if (_this.isPortMetaData(nodeConfig.ports)) {\n        nodeConfig.ports.items = _toConsumableArray(ports);\n      }\n\n      cell.setData(nodeConfig, options);\n    };\n    /** 执行Cmd */\n\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var ctx, _ctx$getArgs, args, runtimeHook, hooks, graph, result;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                ctx = this.contextProvider();\n                _ctx$getArgs = ctx.getArgs(), args = _ctx$getArgs.args, runtimeHook = _ctx$getArgs.hooks;\n                hooks = ctx.getHooks();\n                _context4.next = 5;\n                return ctx.getX6Graph();\n\n              case 5:\n                graph = _context4.sent;\n                _context4.next = 8;\n                return hooks.updateNodePort.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var _this3 = this;\n\n                    var node, updatePorts, options, commandService, cell, currentPorts, nextPorts;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            node = handlerArgs.node, updatePorts = handlerArgs.updatePorts, options = handlerArgs.options, commandService = handlerArgs.commandService;\n                            cell = this.getCell(graph, node);\n\n                            if (!(!cell || cell.isEdge())) {\n                              _context3.next = 5;\n                              break;\n                            }\n\n                            console.error('node_is _not_exsit', node);\n                            return _context3.abrupt(\"return\", {\n                              err: 'node_is _not_exsit'\n                            });\n\n                          case 5:\n                            currentPorts = cell.getPorts();\n                            _context3.next = 8;\n                            return updatePorts(_toConsumableArray(currentPorts), cell, graph);\n\n                          case 8:\n                            nextPorts = _context3.sent;\n\n                            if (!(nextPorts === false)) {\n                              _context3.next = 11;\n                              break;\n                            }\n\n                            return _context3.abrupt(\"return\", {\n                              err: 'service rejected'\n                            });\n\n                          case 11:\n                            cell.setPropByPath('ports/items', nextPorts, Object.assign({\n                              rewrite: true\n                            }, options));\n                            /** update nodeConfig */\n\n                            /** update nodeConfig */\n                            this.updatePortsOfNodeConfig(cell, nextPorts, options);\n                            /** add undo */\n\n                            /** add undo */\n                            ctx.addUndo(Disposable.create(function () {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                                var _this4 = this;\n\n                                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE_PORT.id, {\n                                          node: node,\n                                          updatePorts: function updatePorts() {\n                                            return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                                while (1) {\n                                                  switch (_context.prev = _context.next) {\n                                                    case 0:\n                                                      return _context.abrupt(\"return\", currentPorts);\n\n                                                    case 1:\n                                                    case \"end\":\n                                                      return _context.stop();\n                                                  }\n                                                }\n                                              }, _callee);\n                                            }));\n                                          }\n                                        });\n\n                                      case 1:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2);\n                              }));\n                            }));\n                            return _context3.abrupt(\"return\", {\n                              ports: nextPorts\n                            });\n\n                          case 15:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n                }, runtimeHook);\n\n              case 8:\n                result = _context4.sent;\n                ctx.setResult(result);\n                return _context4.abrupt(\"return\", this);\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n    /** undo cmd */\n\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var ctx;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                ctx = this.contextProvider();\n\n                if (this.isUndoable()) {\n                  ctx.undo();\n                }\n\n                return _context5.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n    /** redo cmd */\n\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.isUndoable()) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                _context6.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context6.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    };\n  }\n\n  _createClass(UpdateNodePort, [{\n    key: \"isNodeAnchors\",\n    value: function isNodeAnchors(ports) {\n      return Array.isArray(ports);\n    }\n  }, {\n    key: \"isPortMetaData\",\n    value: function isPortMetaData(ports) {\n      return ports.items && Array.isArray(ports.items);\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      var ctx = this.contextProvider();\n      return ctx.isUndoable();\n    }\n  }]);\n\n  return UpdateNodePort;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], UpdateNodePort.prototype, \"contextProvider\", void 0);\n\nUpdateNodePort = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsUpdateNodePort.command.id\n  }\n})\n/** 创建节点命令 */\n], UpdateNodePort);\nexport { UpdateNodePort };","map":null,"metadata":{},"sourceType":"module"}