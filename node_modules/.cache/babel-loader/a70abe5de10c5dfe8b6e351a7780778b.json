{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ArrayExt } from '../../util';\nimport { Point, Line, Angle } from '../../geometry';\nimport * as Util from './util';\n/**\n * Returns a route with orthogonal line segments.\n */\n\nexport var orth = function orth(vertices, options, edgeView) {\n  var sourceBBox = Util.getSourceBBox(edgeView, options);\n  var targetBBox = Util.getTargetBBox(edgeView, options);\n  var sourceAnchor = Util.getSourceAnchor(edgeView, options);\n  var targetAnchor = Util.getTargetAnchor(edgeView, options); // If anchor lies outside of bbox, the bbox expands to include it\n\n  sourceBBox = sourceBBox.union(Util.getPointBBox(sourceAnchor));\n  targetBBox = targetBBox.union(Util.getPointBBox(targetAnchor));\n  var points = vertices.map(function (p) {\n    return Point.create(p);\n  });\n  points.unshift(sourceAnchor);\n  points.push(targetAnchor); // bearing of previous route segment\n\n  var bearing = null;\n  var result = [];\n\n  for (var i = 0, len = points.length - 1; i < len; i += 1) {\n    var route = null;\n    var from = points[i];\n    var to = points[i + 1];\n    var isOrthogonal = Private.getBearing(from, to) != null;\n\n    if (i === 0) {\n      // source\n      if (i + 1 === len) {\n        // source -> target\n        // Expand one of the nodes by 1px to detect situations when the two\n        // nodes are positioned next to each other with no gap in between.\n        if (sourceBBox.intersectsWithRect(targetBBox.clone().inflate(1))) {\n          route = Private.insideNode(from, to, sourceBBox, targetBBox);\n        } else if (!isOrthogonal) {\n          route = Private.nodeToNode(from, to, sourceBBox, targetBBox);\n        }\n      } else {\n        // source -> vertex\n        if (sourceBBox.containsPoint(to)) {\n          route = Private.insideNode(from, to, sourceBBox, Util.getPointBBox(to).moveAndExpand(Util.getPaddingBox(options)));\n        } else if (!isOrthogonal) {\n          route = Private.nodeToVertex(from, to, sourceBBox);\n        }\n      }\n    } else if (i + 1 === len) {\n      // vertex -> target\n      // prevent overlaps with previous line segment\n      var isOrthogonalLoop = isOrthogonal && Private.getBearing(to, from) === bearing;\n\n      if (targetBBox.containsPoint(from) || isOrthogonalLoop) {\n        route = Private.insideNode(from, to, Util.getPointBBox(from).moveAndExpand(Util.getPaddingBox(options)), targetBBox, bearing);\n      } else if (!isOrthogonal) {\n        route = Private.vertexToNode(from, to, targetBBox, bearing);\n      }\n    } else if (!isOrthogonal) {\n      // vertex -> vertex\n      route = Private.vertexToVertex(from, to, bearing);\n    } // set bearing for next iteration\n\n\n    if (route) {\n      result.push.apply(result, _toConsumableArray(route.points));\n      bearing = route.direction;\n    } else {\n      // orthogonal route and not looped\n      bearing = Private.getBearing(from, to);\n    } // push `to` point to identified orthogonal vertices array\n\n\n    if (i + 1 < len) {\n      result.push(to);\n    }\n  }\n\n  return result;\n};\nvar Private;\n\n(function (Private) {\n  /**\n   * Bearing to opposite bearing map\n   */\n  var opposites = {\n    N: 'S',\n    S: 'N',\n    E: 'W',\n    W: 'E'\n  };\n  /**\n   * Bearing to radians map\n   */\n\n  var radians = {\n    N: -Math.PI / 2 * 3,\n    S: -Math.PI / 2,\n    E: 0,\n    W: Math.PI\n  };\n  /**\n   * Returns a point `p` where lines p,p1 and p,p2 are perpendicular\n   * and p is not contained in the given box\n   */\n\n  function freeJoin(p1, p2, bbox) {\n    var p = new Point(p1.x, p2.y);\n\n    if (bbox.containsPoint(p)) {\n      p = new Point(p2.x, p1.y);\n    } // kept for reference\n    // if (bbox.containsPoint(p)) {\n    //   return null\n    // }\n\n\n    return p;\n  }\n  /**\n   * Returns either width or height of a bbox based on the given bearing.\n   */\n\n\n  function getBBoxSize(bbox, bearing) {\n    return bbox[bearing === 'W' || bearing === 'E' ? 'width' : 'height'];\n  }\n\n  Private.getBBoxSize = getBBoxSize;\n\n  function getBearing(from, to) {\n    if (from.x === to.x) {\n      return from.y > to.y ? 'N' : 'S';\n    }\n\n    if (from.y === to.y) {\n      return from.x > to.x ? 'W' : 'E';\n    }\n\n    return null;\n  }\n\n  Private.getBearing = getBearing;\n\n  function vertexToVertex(from, to, bearing) {\n    var p1 = new Point(from.x, to.y);\n    var p2 = new Point(to.x, from.y);\n    var d1 = getBearing(from, p1);\n    var d2 = getBearing(from, p2);\n    var opposite = bearing ? opposites[bearing] : null;\n    var p = d1 === bearing || d1 !== opposite && (d2 === opposite || d2 !== bearing) ? p1 : p2;\n    return {\n      points: [p],\n      direction: getBearing(p, to)\n    };\n  }\n\n  Private.vertexToVertex = vertexToVertex;\n\n  function nodeToVertex(from, to, fromBBox) {\n    var p = freeJoin(from, to, fromBBox);\n    return {\n      points: [p],\n      direction: getBearing(p, to)\n    };\n  }\n\n  Private.nodeToVertex = nodeToVertex;\n\n  function vertexToNode(from, to, toBBox, bearing) {\n    var points = [new Point(from.x, to.y), new Point(to.x, from.y)];\n    var freePoints = points.filter(function (p) {\n      return !toBBox.containsPoint(p);\n    });\n    var freeBearingPoints = freePoints.filter(function (p) {\n      return getBearing(p, from) !== bearing;\n    });\n    var p;\n\n    if (freeBearingPoints.length > 0) {\n      // Try to pick a point which bears the same direction as the previous segment.\n      p = freeBearingPoints.filter(function (p) {\n        return getBearing(from, p) === bearing;\n      }).pop();\n      p = p || freeBearingPoints[0];\n      return {\n        points: [p],\n        direction: getBearing(p, to)\n      };\n    }\n\n    {\n      // Here we found only points which are either contained in the element or they would create\n      // a link segment going in opposite direction from the previous one.\n      // We take the point inside element and move it outside the element in the direction the\n      // route is going. Now we can join this point with the current end (using freeJoin).\n      p = ArrayExt.difference(points, freePoints)[0];\n      var p2 = Point.create(to).move(p, -getBBoxSize(toBBox, bearing) / 2);\n      var p1 = freeJoin(p2, from, toBBox);\n      return {\n        points: [p1, p2],\n        direction: getBearing(p2, to)\n      };\n    }\n  }\n\n  Private.vertexToNode = vertexToNode;\n\n  function nodeToNode(from, to, fromBBox, toBBox) {\n    var route = nodeToVertex(to, from, toBBox);\n    var p1 = route.points[0];\n\n    if (fromBBox.containsPoint(p1)) {\n      route = nodeToVertex(from, to, fromBBox);\n      var p2 = route.points[0];\n\n      if (toBBox.containsPoint(p2)) {\n        var fromBorder = Point.create(from).move(p2, -getBBoxSize(fromBBox, getBearing(from, p2)) / 2);\n        var toBorder = Point.create(to).move(p1, -getBBoxSize(toBBox, getBearing(to, p1)) / 2);\n        var mid = new Line(fromBorder, toBorder).getCenter();\n        var startRoute = nodeToVertex(from, mid, fromBBox);\n        var endRoute = vertexToVertex(mid, to, startRoute.direction);\n        route.points = [startRoute.points[0], endRoute.points[0]];\n        route.direction = endRoute.direction;\n      }\n    }\n\n    return route;\n  }\n\n  Private.nodeToNode = nodeToNode; // Finds route for situations where one node is inside the other.\n  // Typically the route is directed outside the outer node first and\n  // then back towards the inner node.\n\n  function insideNode(from, to, fromBBox, toBBox, bearing) {\n    var boundary = fromBBox.union(toBBox).inflate(1); // start from the point which is closer to the boundary\n\n    var center = boundary.getCenter();\n    var reversed = center.distance(to) > center.distance(from);\n    var start = reversed ? to : from;\n    var end = reversed ? from : to;\n    var p1;\n    var p2;\n    var p3;\n\n    if (bearing) {\n      // Points on circle with radius equals 'W + H` are always outside the rectangle\n      // with width W and height H if the center of that circle is the center of that rectangle.\n      p1 = Point.fromPolar(boundary.width + boundary.height, radians[bearing], start);\n      p1 = boundary.getNearestPointToPoint(p1).move(p1, -1);\n    } else {\n      p1 = boundary.getNearestPointToPoint(start).move(start, 1);\n    }\n\n    p2 = freeJoin(p1, end, boundary);\n    var points;\n\n    if (p1.round().equals(p2.round())) {\n      p2 = Point.fromPolar(boundary.width + boundary.height, Angle.toRad(p1.theta(start)) + Math.PI / 2, end);\n      p2 = boundary.getNearestPointToPoint(p2).move(end, 1).round();\n      p3 = freeJoin(p1, p2, boundary);\n      points = reversed ? [p2, p3, p1] : [p1, p3, p2];\n    } else {\n      points = reversed ? [p2, p1] : [p1, p2];\n    }\n\n    var direction = reversed ? getBearing(p1, to) : getBearing(p2, to);\n    return {\n      points: points,\n      direction: direction\n    };\n  }\n\n  Private.insideNode = insideNode;\n})(Private || (Private = {}));","map":null,"metadata":{},"sourceType":"module"}