{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar d3Force = __importStar(require(\"d3-force\"));\n\nvar forceGrid_1 = __importDefault(require(\"./forceGrid\"));\n\nvar mysqlWorkbench_1 = __importDefault(require(\"./mysqlWorkbench\"));\n\nvar dagre_1 = require(\"../dagre\");\n\nfunction layout(data, options) {\n  var nodes = data.nodes,\n      edges = data.edges;\n  var width = options.width;\n  var height = options.height;\n  if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) return Promise.resolve(); // 筛选非叶子节点，做Dagre布局\n\n  var noLeafNodes = [];\n  nodes.forEach(function (node) {\n    var relateEdges = edges.filter(function (edge) {\n      return edge.source === node.id || edge.target === node.id;\n    });\n\n    if (relateEdges.length > 1) {\n      var temp = __assign({}, node);\n\n      delete temp.size;\n      noLeafNodes.push(temp);\n    }\n  });\n  var noLeafEdge = [];\n  edges.forEach(function (edge) {\n    var sourceNode = noLeafNodes.find(function (node) {\n      return node.id === edge.source;\n    });\n    var targetNode = noLeafNodes.find(function (node) {\n      return node.id === edge.target;\n    });\n\n    if (sourceNode && targetNode) {\n      noLeafEdge.push(edge);\n    }\n  });\n  var graphLayout = new dagre_1.DagreLayout({\n    type: 'dagre',\n    ranksep: options.nodeMinGap,\n    nodesep: options.nodeMinGap\n  });\n  var nodesTmp = graphLayout.layout({\n    nodes: noLeafNodes,\n    edges: noLeafEdge\n  }).nodes; // 布局后，坐标同步\n\n  nodes.forEach(function (n) {\n    var found = (nodesTmp || []).find(function (temp) {\n      return temp.id === n.id;\n    });\n    n.x = (found === null || found === void 0 ? void 0 : found.x) || width / 2;\n    n.y = (found === null || found === void 0 ? void 0 : found.y) || height / 2;\n  });\n  var copyNodes = JSON.parse(JSON.stringify(nodes));\n  var copyEdges = JSON.parse(JSON.stringify(edges));\n  var simulation = d3Force.forceSimulation().nodes(copyNodes).force(\"link\", d3Force.forceLink(copyEdges).id(function (d) {\n    return d.id;\n  }).distance(function (d) {\n    var edgeInfo = noLeafEdge.find(function (edge) {\n      return edge.source === d.source && edge.target === d.target;\n    });\n\n    if (edgeInfo) {\n      return 30;\n    }\n\n    return 20;\n  })).force(\"charge\", d3Force.forceManyBody()).force(\"center\", d3Force.forceCenter(width / 2, height / 2)).force(\"x\", d3Force.forceX(width / 2)).force(\"y\", d3Force.forceY(height / 2)).alpha(0.3).alphaDecay(0.08).alphaMin(0.001);\n  var layoutPromise = new Promise(function (resolve) {\n    simulation.on('end', function () {\n      // 坐标信息同步到nodes,edges中\n      nodes.forEach(function (node) {\n        var nodeInfo = copyNodes.find(function (item) {\n          return item.id === node.id;\n        });\n\n        if (nodeInfo) {\n          node.x = nodeInfo.x;\n          node.y = nodeInfo.y;\n        }\n      });\n      var minX = Math.min.apply(Math, nodes.map(function (node) {\n        return node.x;\n      }));\n      var maxX = Math.max.apply(Math, nodes.map(function (node) {\n        return node.x;\n      }));\n      var minY = Math.min.apply(Math, nodes.map(function (node) {\n        return node.y;\n      }));\n      var maxY = Math.max.apply(Math, nodes.map(function (node) {\n        return node.y;\n      }));\n      var scalex = width / (maxX - minX);\n      var scaley = height / (maxY - minY);\n      nodes.forEach(function (node) {\n        if (node.x !== undefined && scalex < 1) {\n          node.x = (node.x - minX) * scalex;\n        }\n\n        if (node.y !== undefined && scaley < 1) {\n          node.y = (node.y - minY) * scaley;\n        }\n      }); // 这一步就执行缩小空间。且不考虑节点size\n\n      nodes.forEach(function (node) {\n        node.sizeTemp = node.size;\n        node.size = [10, 10];\n      });\n      (0, mysqlWorkbench_1.default)(nodes, edges);\n      nodes.forEach(function (node) {\n        node.size = node.sizeTemp || [];\n        delete node.sizeTemp;\n      }); // 进行网格对齐+节点大小扩增\n\n      (0, forceGrid_1.default)({\n        nodes: nodes,\n        edges: edges\n      }, options);\n      resolve();\n    });\n  });\n  return layoutPromise;\n}\n\nexports.default = layout;","map":null,"metadata":{},"sourceType":"script"}