{"ast":null,"code":"import { Angle } from '../../geometry';\nimport { resolve } from './util';\n\nvar orthogonal = function orthogonal(view, magnet, refPoint, options) {\n  var angle = view.cell.getAngle();\n  var bbox = view.getBBoxOfElement(magnet);\n  var result = bbox.getCenter();\n  var topLeft = bbox.getTopLeft();\n  var bottomRight = bbox.getBottomRight();\n  var padding = options.padding;\n\n  if (!Number.isFinite(padding)) {\n    padding = 0;\n  }\n\n  if (topLeft.y + padding <= refPoint.y && refPoint.y <= bottomRight.y - padding) {\n    var dy = refPoint.y - result.y;\n    result.x += angle === 0 || angle === 180 ? 0 : dy * 1 / Math.tan(Angle.toRad(angle));\n    result.y += dy;\n  } else if (topLeft.x + padding <= refPoint.x && refPoint.x <= bottomRight.x - padding) {\n    var dx = refPoint.x - result.x;\n    result.y += angle === 90 || angle === 270 ? 0 : dx * Math.tan(Angle.toRad(angle));\n    result.x += dx;\n  }\n\n  return result;\n};\n/**\n * Tries to place the anchor of the edge inside the view bbox so that the\n * edge is made orthogonal. The anchor is placed along two line segments\n * inside the view bbox (between the centers of the top and bottom side and\n * between the centers of the left and right sides). If it is not possible\n * to place the anchor so that the edge would be orthogonal, the anchor is\n * placed at the center of the view bbox instead.\n */\n\n\nexport var orth = resolve(orthogonal);","map":null,"metadata":{},"sourceType":"module"}