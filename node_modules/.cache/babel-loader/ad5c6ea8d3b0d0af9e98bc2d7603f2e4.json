{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Dom, ObjectExt, StringExt } from '../util';\nimport { NodeTool, EdgeTool } from '../registry/tool';\nimport { View } from './view';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport var ToolsView = /*#__PURE__*/function (_View) {\n  _inherits(ToolsView, _View);\n\n  function ToolsView() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ToolsView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ToolsView).call(this));\n    _this.svgContainer = _this.createContainer(true, options);\n    _this.htmlContainer = _this.createContainer(false, options);\n\n    _this.config(options);\n\n    return _this;\n  }\n\n  _createClass(ToolsView, [{\n    key: \"createContainer\",\n    value: function createContainer(svg, options) {\n      var container = svg ? View.createElement('g', true) : View.createElement('div', false);\n      Dom.addClass(container, this.prefixClassName('cell-tools'));\n\n      if (options.className) {\n        Dom.addClass(container, options.className);\n      }\n\n      return container;\n    }\n  }, {\n    key: \"config\",\n    value: function config(options) {\n      this.options = Object.assign(Object.assign({}, this.options), options);\n\n      if (!CellView.isCellView(options.view) || options.view === this.cellView) {\n        return this;\n      }\n\n      this.cellView = options.view;\n\n      if (this.cell.isEdge()) {\n        Dom.addClass(this.svgContainer, this.prefixClassName('edge-tools'));\n        Dom.addClass(this.htmlContainer, this.prefixClassName('edge-tools'));\n      } else if (this.cell.isNode()) {\n        Dom.addClass(this.svgContainer, this.prefixClassName('node-tools'));\n        Dom.addClass(this.htmlContainer, this.prefixClassName('node-tools'));\n      }\n\n      this.svgContainer.setAttribute('data-cell-id', this.cell.id);\n      this.htmlContainer.setAttribute('data-cell-id', this.cell.id);\n\n      if (this.name) {\n        this.svgContainer.setAttribute('data-tools-name', this.name);\n        this.htmlContainer.setAttribute('data-tools-name', this.name);\n      }\n\n      var tools = this.options.items;\n\n      if (!Array.isArray(tools)) {\n        return this;\n      }\n\n      this.tools = [];\n      var normalizedTools = [];\n      tools.forEach(function (meta) {\n        if (ToolsView.ToolItem.isToolItem(meta)) {\n          if (meta.name === 'vertices') {\n            normalizedTools.unshift(meta);\n          } else {\n            normalizedTools.push(meta);\n          }\n        } else {\n          var name = typeof meta === 'object' ? meta.name : meta;\n\n          if (name === 'vertices') {\n            normalizedTools.unshift(meta);\n          } else {\n            normalizedTools.push(meta);\n          }\n        }\n      });\n\n      for (var i = 0; i < normalizedTools.length; i += 1) {\n        var meta = normalizedTools[i];\n        var tool = void 0;\n\n        if (ToolsView.ToolItem.isToolItem(meta)) {\n          tool = meta;\n        } else {\n          var name = typeof meta === 'object' ? meta.name : meta;\n          var args = typeof meta === 'object' ? meta.args || {} : {};\n\n          if (name) {\n            if (this.cell.isNode()) {\n              var ctor = NodeTool.registry.get(name);\n\n              if (ctor) {\n                tool = new ctor(args); // eslint-disable-line\n              } else {\n                return NodeTool.registry.onNotFound(name);\n              }\n            } else if (this.cell.isEdge()) {\n              var _ctor = EdgeTool.registry.get(name);\n\n              if (_ctor) {\n                tool = new _ctor(args); // eslint-disable-line\n              } else {\n                return EdgeTool.registry.onNotFound(name);\n              }\n            }\n          }\n        }\n\n        if (tool) {\n          tool.config(this.cellView, this);\n          tool.render();\n          var container = tool.options.isSVGElement !== false ? this.svgContainer : this.htmlContainer;\n          container.appendChild(tool.container);\n          this.tools.push(tool);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var tools = this.tools;\n\n      if (tools) {\n        tools.forEach(function (tool) {\n          if (options.toolId !== tool.cid && tool.isVisible()) {\n            tool.update();\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus(focusedTool) {\n      var tools = this.tools;\n\n      if (tools) {\n        tools.forEach(function (tool) {\n          if (focusedTool === tool) {\n            tool.show();\n          } else {\n            tool.hide();\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur(blurredTool) {\n      var tools = this.tools;\n\n      if (tools) {\n        tools.forEach(function (tool) {\n          if (tool !== blurredTool && !tool.isVisible()) {\n            tool.show();\n            tool.update();\n          }\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      return this.focus(null);\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      return this.blur(null);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var tools = this.tools;\n\n      if (tools) {\n        tools.forEach(function (tool) {\n          return tool.remove();\n        });\n        this.tools = null;\n      }\n\n      Dom.remove(this.svgContainer);\n      Dom.remove(this.htmlContainer);\n      return _get(_getPrototypeOf(ToolsView.prototype), \"remove\", this).call(this);\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var tools = this.tools;\n      var cellView = this.cellView;\n\n      if (cellView && tools) {\n        var hasSVG = tools.some(function (tool) {\n          return tool.options.isSVGElement !== false;\n        });\n        var hasHTML = tools.some(function (tool) {\n          return tool.options.isSVGElement === false;\n        });\n\n        if (hasSVG) {\n          var parent = this.options.local ? cellView.container : cellView.graph.view.decorator;\n          parent.appendChild(this.svgContainer);\n        }\n\n        if (hasHTML) {\n          this.graph.container.appendChild(this.htmlContainer);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.options.name;\n    }\n  }, {\n    key: \"graph\",\n    get: function get() {\n      return this.cellView.graph;\n    }\n  }, {\n    key: \"cell\",\n    get: function get() {\n      return this.cellView.cell;\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return ToolsView.toStringTag;\n    }\n  }]);\n\n  return ToolsView;\n}(View);\n\n(function (ToolsView) {\n  ToolsView.toStringTag = \"X6.\".concat(ToolsView.name);\n\n  function isToolsView(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof ToolsView) {\n      return true;\n    }\n\n    var tag = instance[Symbol.toStringTag];\n    var view = instance;\n\n    if ((tag == null || tag === ToolsView.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  ToolsView.isToolsView = isToolsView;\n})(ToolsView || (ToolsView = {}));\n\n(function (ToolsView) {\n  var ToolItem = /*#__PURE__*/function (_View2) {\n    _inherits(ToolItem, _View2);\n\n    function ToolItem() {\n      var _this2;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _classCallCheck(this, ToolItem);\n\n      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ToolItem).call(this));\n      _this2.options = _this2.getOptions(options);\n      _this2.container = View.createElement(_this2.options.tagName || 'g', _this2.options.isSVGElement !== false);\n      Dom.addClass(_this2.container, _this2.prefixClassName('cell-tool'));\n\n      if (typeof _this2.options.className === 'string') {\n        Dom.addClass(_this2.container, _this2.options.className);\n      }\n\n      _this2.init();\n\n      return _this2;\n    }\n\n    _createClass(ToolItem, [{\n      key: \"init\",\n      value: function init() {}\n    }, {\n      key: \"getOptions\",\n      value: function getOptions(options) {\n        var ctor = this.constructor;\n        return ctor.getOptions(options);\n      }\n    }, {\n      key: \"delegateEvents\",\n      value: function delegateEvents() {\n        if (this.options.events) {\n          _get(_getPrototypeOf(ToolItem.prototype), \"delegateEvents\", this).call(this, this.options.events);\n        }\n\n        return this;\n      }\n    }, {\n      key: \"config\",\n      value: function config(view, toolsView) {\n        this.cellView = view;\n        this.parent = toolsView;\n        this.stamp(this.container);\n\n        if (this.cell.isEdge()) {\n          Dom.addClass(this.container, this.prefixClassName('edge-tool'));\n        } else if (this.cell.isNode()) {\n          Dom.addClass(this.container, this.prefixClassName('node-tool'));\n        }\n\n        if (this.name) {\n          this.container.setAttribute('data-tool-name', this.name);\n        }\n\n        this.delegateEvents();\n        return this;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        this.empty();\n        var markup = this.options.markup;\n\n        if (markup) {\n          var meta = Markup.isStringMarkup(markup) ? Markup.parseStringMarkup(markup) : Markup.parseJSONMarkup(markup);\n          this.container.appendChild(meta.fragment);\n          this.childNodes = meta.selectors;\n        }\n\n        this.onRender();\n        return this;\n      }\n    }, {\n      key: \"onRender\",\n      value: function onRender() {}\n    }, {\n      key: \"update\",\n      value: function update() {\n        return this;\n      }\n    }, {\n      key: \"stamp\",\n      value: function stamp() {\n        var elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n\n        if (elem) {\n          elem.setAttribute('data-cell-id', this.cellView.cell.id);\n        }\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.container.style.display = '';\n        this.visible = true;\n        return this;\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.container.style.display = 'none';\n        this.visible = false;\n        return this;\n      }\n    }, {\n      key: \"isVisible\",\n      value: function isVisible() {\n        return this.visible;\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        var opacity = this.options.focusOpacity;\n\n        if (opacity != null && Number.isFinite(opacity)) {\n          this.container.style.opacity = \"\".concat(opacity);\n        }\n\n        this.parent.focus(this);\n        return this;\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.container.style.opacity = '';\n        this.parent.blur(this);\n        return this;\n      }\n    }, {\n      key: \"guard\",\n      value: function guard(evt) {\n        if (this.graph == null || this.cellView == null) {\n          return true;\n        }\n\n        return this.graph.view.guard(evt, this.cellView);\n      }\n    }, {\n      key: \"graph\",\n      get: function get() {\n        return this.cellView.graph;\n      }\n    }, {\n      key: \"cell\",\n      get: function get() {\n        return this.cellView.cell;\n      }\n    }, {\n      key: \"name\",\n      get: function get() {\n        return this.options.name;\n      }\n    }, {\n      key: Symbol.toStringTag,\n      get: function get() {\n        return ToolItem.toStringTag;\n      }\n    }], [{\n      key: \"getDefaults\",\n      value: function getDefaults() {\n        return this.defaults;\n      }\n    }, {\n      key: \"config\",\n      value: function config(options) {\n        this.defaults = this.getOptions(options);\n      }\n    }, {\n      key: \"getOptions\",\n      value: function getOptions(options) {\n        return ObjectExt.merge(ObjectExt.cloneDeep(this.getDefaults()), options);\n      }\n    }]);\n\n    return ToolItem;\n  }(View); // #region static\n\n\n  ToolItem.defaults = {\n    isSVGElement: true,\n    tagName: 'g'\n  };\n  ToolsView.ToolItem = ToolItem;\n\n  (function (ToolItem) {\n    var counter = 0;\n\n    function getClassName(name) {\n      if (name) {\n        return StringExt.pascalCase(name);\n      }\n\n      counter += 1;\n      return \"CustomTool\".concat(counter);\n    }\n\n    function define(options) {\n      var tool = ObjectExt.createClass(getClassName(options.name), this);\n      tool.config(options);\n      return tool;\n    }\n\n    ToolItem.define = define;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n\n  (function (ToolItem) {\n    ToolItem.toStringTag = \"X6.\".concat(ToolItem.name);\n\n    function isToolItem(instance) {\n      if (instance == null) {\n        return false;\n      }\n\n      if (instance instanceof ToolItem) {\n        return true;\n      }\n\n      var tag = instance[Symbol.toStringTag];\n      var view = instance;\n\n      if ((tag == null || tag === ToolItem.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function' && typeof view.isVisible === 'function') {\n        return true;\n      }\n\n      return false;\n    }\n\n    ToolItem.isToolItem = isToolItem;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n})(ToolsView || (ToolsView = {}));","map":null,"metadata":{},"sourceType":"module"}