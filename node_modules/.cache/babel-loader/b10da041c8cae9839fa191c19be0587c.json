{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport { __awaiter } from \"tslib\";\nimport React, { useCallback } from 'react';\nimport { XFlowGraphCommands, MODELS, XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { onConfigChange } from '../flowchart-canvas/utils';\nimport { FormItemWrapper } from '../canvas-json-schema-form';\nimport { usePanelContext } from '../base-panel/context';\nimport useAsync from './useAsync';\nexport var FlowchartFormWrapper = function FlowchartFormWrapper(props) {\n  var controlSchema = props.controlSchema,\n      children = props.children,\n      _props$type = props.type,\n      formType = _props$type === void 0 ? 'node' : _props$type;\n\n  var _usePanelContext = usePanelContext(),\n      commandService = _usePanelContext.commandService,\n      modelService = _usePanelContext.modelService;\n\n  var getSelectNode = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$MODELS$SELECTE, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return MODELS.SELECTED_NODE.useValue(modelService);\n\n            case 2:\n              _yield$MODELS$SELECTE = _context.sent;\n              data = _yield$MODELS$SELECTE.data;\n              return _context.abrupt(\"return\", data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  }, [modelService]);\n  var getSelectEdge = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var cell, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return MODELS.SELECTED_CELL.useValue(modelService);\n\n            case 2:\n              cell = _context2.sent;\n              data = cell.getData();\n              return _context2.abrupt(\"return\", Object.assign({\n                id: cell.id\n              }, data));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  }, [modelService]);\n\n  var _useAsync = useAsync(formType === 'edge' ? getSelectEdge : getSelectNode),\n      data = _useAsync.data,\n      loading = _useAsync.loading;\n\n  React.useEffect(function () {\n    commandService.executeCommand(XFlowGraphCommands.SAVE_GRAPH_DATA.id, {\n      saveGraphDataService: function saveGraphDataService(meta, graph) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  return _context3.abrupt(\"return\", {\n                    err: null,\n                    data: graph,\n                    meta: meta\n                  });\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n      }\n    });\n  }, [commandService]);\n\n  var updateNode = function updateNode(value) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var currentNodeData, nodeConfig;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return getSelectNode();\n\n            case 2:\n              currentNodeData = _context4.sent;\n              nodeConfig = Object.assign(Object.assign({}, currentNodeData), value);\n              _context4.next = 6;\n              return commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                nodeConfig: nodeConfig\n              });\n\n            case 6:\n              onConfigChange({\n                type: 'update:node',\n                config: nodeConfig\n              });\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n  };\n\n  var updateEdge = function updateEdge(value) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'line';\n    var key = arguments.length > 2 ? arguments[2] : undefined;\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var _a, currentEdgeData, edgeConfig;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return getSelectEdge();\n\n            case 2:\n              currentEdgeData = _context5.sent;\n              // 更新线、文本样式\n              edgeConfig = Object.assign(Object.assign(Object.assign({}, currentEdgeData), key ? value[key] : value), {\n                attrs: Object.assign(Object.assign({}, currentEdgeData.attrs), _defineProperty({}, type, Object.assign(Object.assign({}, (_a = currentEdgeData.attrs) === null || _a === void 0 ? void 0 : _a[type]), key ? value[key] : value)))\n              });\n              _context5.next = 6;\n              return commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n                edgeConfig: edgeConfig\n              });\n\n            case 6:\n              onConfigChange({\n                type: 'update:edge',\n                config: edgeConfig\n              });\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  };\n\n  var updateGroup = function updateGroup(value) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var currentGroupData, nodeConfig;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return getSelectNode();\n\n            case 2:\n              currentGroupData = _context6.sent;\n              nodeConfig = Object.assign(Object.assign({}, currentGroupData), value);\n              _context6.next = 6;\n              return commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n                nodeConfig: nodeConfig\n              });\n\n            case 6:\n              onConfigChange({\n                type: 'update:group',\n                config: nodeConfig\n              });\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n  };\n\n  if (loading) {\n    return null;\n  }\n\n  return React.createElement(FormItemWrapper, {\n    schema: controlSchema\n  }, function () {\n    return children(Object.assign({}, data), {\n      updateNode: updateNode,\n      updateEdge: updateEdge,\n      updateGroup: updateGroup\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}