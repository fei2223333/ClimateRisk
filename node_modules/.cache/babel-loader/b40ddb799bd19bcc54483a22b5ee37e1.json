{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useCallback } from 'react';\nimport { useXflowPrefixCls } from '@antv/xflow-core';\nimport { WorkspacePanel } from '../base-panel';\nimport { CollapsePanelBody } from './panel-body';\nimport { NodePanelHeader } from './panel-header';\nimport { NodePanelFooter } from './panel-footer';\nimport { NodePanelCollapseBtn } from './panel-collapse-btn';\nimport { usePanelLyaoutStyle } from './utils';\nimport { useCollapsePanelData } from './service';\nimport { NsCollapsePanelModel } from './interface';\nimport * as NsNodeCollapsePanel from './interface';\n\nvar CollapsePanelMain = function CollapsePanelMain(props) {\n  var _usePanelLyaoutStyle = usePanelLyaoutStyle(props),\n      headerStyle = _usePanelLyaoutStyle.headerStyle,\n      bodyStyle = _usePanelLyaoutStyle.bodyStyle,\n      footerStyle = _usePanelLyaoutStyle.footerStyle;\n\n  var _useCollapsePanelData = useCollapsePanelData(props),\n      state = _useCollapsePanelData.state,\n      onActiveKeyChange = _useCollapsePanelData.onActiveKeyChange,\n      onKeywordChange = _useCollapsePanelData.onKeywordChange;\n\n  return React.createElement(React.Fragment, null, React.createElement(NodePanelHeader, Object.assign({}, props, {\n    state: state,\n    style: headerStyle,\n    onKeywordChange: onKeywordChange\n  })), React.createElement(CollapsePanelBody, Object.assign({}, props, {\n    state: state,\n    style: bodyStyle,\n    onActiveKeyChange: onActiveKeyChange\n  })), React.createElement(NodePanelFooter, Object.assign({}, props, {\n    state: state,\n    style: footerStyle\n  })));\n};\n\nvar NodeCollapsePanel = function NodeCollapsePanel(props) {\n  var position = props.position,\n      collapsible = props.collapsible,\n      onCollapseChange = props.onCollapseChange;\n  var _position$width = position.width,\n      width = _position$width === void 0 ? 200 : _position$width,\n      left = position.left;\n  var prefixClz = useXflowPrefixCls('collapse-panel');\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCollapsed = _useState2[0],\n      setIsCollapsed = _useState2[1];\n\n  var handleBtnClick = useCallback(function () {\n    setIsCollapsed(!isCollapsed);\n    onCollapseChange(!isCollapsed);\n  }, [isCollapsed, onCollapseChange]);\n  return React.createElement(WorkspacePanel, Object.assign({}, props, {\n    className: prefixClz,\n    position: Object.assign(Object.assign({}, position), {\n      left: !isCollapsed ? left : -width\n    }),\n    style: {\n      transition: 'left 0.5s'\n    }\n  }), React.createElement(CollapsePanelMain, Object.assign({}, props, {\n    prefixClz: prefixClz\n  })), collapsible && React.createElement(NodePanelCollapseBtn, Object.assign({}, props, {\n    prefixClz: prefixClz,\n    isCollapsed: isCollapsed,\n    onCollapseBtnClick: handleBtnClick,\n    style: {\n      position: 'absolute',\n      zIndex: 1,\n      width: 13,\n      right: -13,\n      bottom: 20,\n      padding: '12px 0px',\n      textAlign: 'center',\n      borderWidth: '1px 1px 1px 0',\n      borderStyle: 'solid solid solid',\n      borderColor: 'rgb(232, 232, 232) rgb(232, 232, 232) rgb(232, 232, 232)',\n      cursor: 'pointer'\n    }\n  })));\n};\n\nexport { NodeCollapsePanel, NsCollapsePanelModel, NsNodeCollapsePanel };","map":null,"metadata":{},"sourceType":"module"}