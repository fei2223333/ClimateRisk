{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { ManaSyringe, DisposableCollection, NsGraph, Disposable, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { IGraphCommandFactory, IHookContribution, IModelContribution, IGraphCommandContribution } from '@antv/xflow-core';\nimport { HookHub } from '@antv/xflow-hook';\nimport { XFlowNode } from '../x6-extension/node';\nimport { XFlowEdge } from '../x6-extension/edge';\nimport { GRAPH_STATUS_INFO } from '../constants';\nimport { NsGraphStatusCommand } from './command';\nimport { LayoutEnum } from '../interface';\nimport { IComponentConfig } from '../interface';\nexport var NsAddEdgeEvent;\n\n(function (NsAddEdgeEvent) {\n  NsAddEdgeEvent.EVENT_NAME = 'ADD_EDGE_CMD_EVENT';\n})(NsAddEdgeEvent || (NsAddEdgeEvent = {}));\n\nexport var DAG_DEFAULT_CONIFG;\n\n(function (DAG_DEFAULT_CONIFG) {\n  DAG_DEFAULT_CONIFG.router = {\n    name: 'manhattan'\n  };\n  DAG_DEFAULT_CONIFG.connector = {\n    name: 'rounded',\n    args: {\n      radius: 15\n    }\n  };\n})(DAG_DEFAULT_CONIFG || (DAG_DEFAULT_CONIFG = {}));\n\nexport var ANT_PREFIX = 'ant';\nexport var getDagOptions = function getDagOptions(props) {\n  var _props$layout = props.layout,\n      layout = _props$layout === void 0 ? LayoutEnum.TOP_BOTTOM : _props$layout,\n      _props$router = props.router,\n      router = _props$router === void 0 ? DAG_DEFAULT_CONIFG.router : _props$router,\n      _props$connector = props.connector,\n      connector = _props$connector === void 0 ? DAG_DEFAULT_CONIFG.connector : _props$connector;\n  var targetPortType = layout === LayoutEnum.TOP_BOTTOM ? NsGraph.AnchorGroup.TOP : NsGraph.AnchorGroup.LEFT;\n  var dagOptions = {\n    grid: false,\n    keyboard: {\n      enabled: true\n    },\n    // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n    selecting: {\n      enabled: true,\n      multiple: true,\n      selectCellOnMoved: true,\n      showNodeSelectionBox: false,\n      // 框选可以选中edge\n      rubberEdge: true,\n      // 框选可以选中node\n      rubberNode: true,\n      movable: true\n    },\n    connecting: {\n      //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n      sourceAnchor: layout === LayoutEnum.TOP_BOTTOM ? 'bottom' : 'right',\n      //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n      targetAnchor: layout === LayoutEnum.TOP_BOTTOM ? 'center' : 'left',\n      connectionPoint: 'anchor',\n      snap: {\n        radius: 20\n      },\n      router: router,\n      connector: connector,\n      highlight: true,\n      dangling: false,\n      createEdge: function createEdge() {\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        var graph = this;\n        var edge = new XFlowEdge({\n          attrs: {\n            line: {\n              strokeDasharray: '5 5',\n              stroke: '#888',\n              strokeWidth: 1,\n              targetMarker: {\n                name: 'block',\n                args: {\n                  size: '6'\n                }\n              }\n            }\n          }\n        });\n\n        var addEdge = function addEdge(args) {\n          var isNew = args.isNew;\n          var edgeCell = args.edge;\n          /** 没有edge:connected时，会导致graph.once的事件没有执行 */\n\n          if (isNew && edgeCell.isEdge() && edgeCell === edge) {\n            var portId = edgeCell.getTargetPortId();\n            var targetNode = edgeCell.getTargetCell();\n\n            if (targetNode && targetNode.isNode()) {\n              targetNode.setPortProp(portId, 'connected', false);\n              edgeCell.attr({\n                line: {\n                  strokeDasharray: '',\n                  targetMarker: '',\n                  stroke: '#d5d5d5'\n                }\n              });\n              var targetPortId = edgeCell.getTargetPortId();\n              var sourcePortId = edgeCell.getSourcePortId();\n              var sourceCellId = edgeCell.getSourceCellId();\n              var targetCellId = edgeCell.getTargetCellId();\n              graph.trigger(NsAddEdgeEvent.EVENT_NAME, {\n                targetPortId: targetPortId,\n                sourcePortId: sourcePortId,\n                source: sourceCellId,\n                target: targetCellId,\n                edge: edge\n              });\n            }\n          }\n        };\n\n        graph.once('edge:connected', addEdge);\n        return edge;\n      },\n      validateEdge: function validateEdge(args) {\n        var _a;\n\n        var edge = args.edge;\n        return !!((_a = edge === null || edge === void 0 ? void 0 : edge.target) === null || _a === void 0 ? void 0 : _a.port);\n      },\n      // 是否触发交互事件\n      validateMagnet: function validateMagnet(_ref) {\n        var magnet = _ref.magnet;\n        return magnet.getAttribute('port-group') !== targetPortType;\n      },\n      // 显示可用的链接桩\n      validateConnection: function validateConnection(_ref2) {\n        var sourceView = _ref2.sourceView,\n            targetView = _ref2.targetView,\n            sourceMagnet = _ref2.sourceMagnet,\n            targetMagnet = _ref2.targetMagnet;\n\n        // 不允许连接到自己\n        if (sourceView === targetView) {\n          return false;\n        } // 只能从上游节点的输出链接桩创建连接\n\n\n        if (!sourceMagnet || sourceMagnet.getAttribute('port-group') === targetPortType) {\n          return false;\n        } // 只能连接到下游节点的输入桩\n\n\n        if (!targetMagnet || targetMagnet.getAttribute('port-group') !== targetPortType) {\n          return false;\n        }\n\n        var node = targetView.cell; // 判断目标链接桩是否可连接\n\n        var portId = targetMagnet.getAttribute('port');\n        var port = node.getPort(portId);\n        return !(port && port.connected);\n      }\n    },\n    highlighting: {\n      nodeAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAdsorbed: {\n        name: 'className',\n        args: {\n          className: 'adsorbed'\n        }\n      }\n    },\n    scaling: {\n      max: 1.05,\n      min: 0.01\n    }\n  };\n  return dagOptions;\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nvar DagHooksContribution = /*#__PURE__*/function () {\n  function DagHooksContribution() {\n    var _this = this;\n\n    _classCallCheck(this, DagHooksContribution);\n\n    /** 注册Command */\n    this.registerGraphCommands = function (commands) {\n      commands.registerCommand(NsGraphStatusCommand.command, {\n        createCommand: _this.commandFactory\n      });\n    };\n    /** 注册Hub */\n\n\n    this.toDispose = new DisposableCollection();\n    /** 注册Hook */\n\n    this.registerHook = function (hooks) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var _this2 = this;\n\n        var toDispose, disposables;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                toDispose = new DisposableCollection();\n                disposables = [hooks.addNode.registerHook({\n                  name: 'dag-add-node',\n                  handler: function handler(args) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      var _this3 = this;\n\n                      var cellFactory;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              cellFactory = function cellFactory(nodeConfig) {\n                                return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                  var node;\n                                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                    while (1) {\n                                      switch (_context.prev = _context.next) {\n                                        case 0:\n                                          node = new XFlowNode(Object.assign({}, nodeConfig));\n                                          return _context.abrupt(\"return\", node);\n\n                                        case 2:\n                                        case \"end\":\n                                          return _context.stop();\n                                      }\n                                    }\n                                  }, _callee);\n                                }));\n                              };\n\n                              args.cellFactory = cellFactory;\n\n                            case 2:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n                  }\n                }), hooks.addEdge.registerHook({\n                  name: 'dag-add-edge',\n                  handler: function handler(args) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                      var _this4 = this;\n\n                      var _yield$this$propConfi, _yield$this$propConfi2, layout, cellFactory;\n\n                      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _context4.next = 2;\n                              return this.propConfig.getConfig();\n\n                            case 2:\n                              _yield$this$propConfi = _context4.sent;\n                              _yield$this$propConfi2 = _yield$this$propConfi.layout;\n                              layout = _yield$this$propConfi2 === void 0 ? LayoutEnum.TOP_BOTTOM : _yield$this$propConfi2;\n\n                              cellFactory = function cellFactory(edgeConfig) {\n                                return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                                  var cell;\n                                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                    while (1) {\n                                      switch (_context3.prev = _context3.next) {\n                                        case 0:\n                                          cell = new XFlowEdge(Object.assign(Object.assign({}, edgeConfig), {\n                                            id: edgeConfig.id,\n                                            source: {\n                                              cell: edgeConfig.source,\n                                              port: edgeConfig.sourcePortId,\n                                              anchor: {\n                                                name: layout === LayoutEnum.TOP_BOTTOM ? 'bottom' : 'right'\n                                              }\n                                            },\n                                            target: {\n                                              cell: edgeConfig.target,\n                                              port: edgeConfig.targetPortId,\n                                              anchor: {\n                                                name: layout === LayoutEnum.TOP_BOTTOM ? 'center' : 'right'\n                                              }\n                                            },\n                                            attrs: {\n                                              line: {\n                                                strokeDasharray: '',\n                                                targetMarker: '',\n                                                stroke: '#d5d5d5',\n                                                strokeWidth: 1\n                                              }\n                                            },\n                                            data: Object.assign({}, edgeConfig)\n                                          }));\n                                          return _context3.abrupt(\"return\", cell);\n\n                                        case 2:\n                                        case \"end\":\n                                          return _context3.stop();\n                                      }\n                                    }\n                                  }, _callee3);\n                                }));\n                              };\n\n                              args.cellFactory = cellFactory;\n\n                            case 7:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee4, this);\n                    }));\n                  }\n                }), hooks.addEdge.registerHook({\n                  name: 'after add edge, set target port props',\n                  handler: function handler(handlerArgs, _handler) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                      var _this5 = this;\n\n                      var main;\n                      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                        while (1) {\n                          switch (_context6.prev = _context6.next) {\n                            case 0:\n                              main = function main(args) {\n                                return __awaiter(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                                  var res, targetNode, portId;\n                                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                                    while (1) {\n                                      switch (_context5.prev = _context5.next) {\n                                        case 0:\n                                          _context5.next = 2;\n                                          return _handler(args);\n\n                                        case 2:\n                                          res = _context5.sent;\n\n                                          if (res && res.edgeCell) {\n                                            targetNode = res.edgeCell.getTargetCell();\n                                            portId = res.edgeCell.getTargetPortId();\n                                            targetNode.setPortProp(portId, 'connected', true);\n                                          }\n\n                                          return _context5.abrupt(\"return\", res);\n\n                                        case 5:\n                                        case \"end\":\n                                          return _context5.stop();\n                                      }\n                                    }\n                                  }, _callee5);\n                                }));\n                              };\n\n                              return _context6.abrupt(\"return\", main);\n\n                            case 2:\n                            case \"end\":\n                              return _context6.stop();\n                          }\n                        }\n                      }, _callee6);\n                    }));\n                  }\n                }), hooks.delEdge.registerHook({\n                  name: 'afetr del edge, reset target node port props',\n                  handler: function handler(args, _handler2) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n                      var _this6 = this;\n\n                      var newHandler;\n                      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                        while (1) {\n                          switch (_context8.prev = _context8.next) {\n                            case 0:\n                              newHandler = function newHandler(handlerArgs) {\n                                return __awaiter(_this6, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n                                  var result, targetCell, targetPortId;\n                                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                                    while (1) {\n                                      switch (_context7.prev = _context7.next) {\n                                        case 0:\n                                          _context7.next = 2;\n                                          return _handler2(handlerArgs);\n\n                                        case 2:\n                                          result = _context7.sent;\n                                          targetCell = result.targetCell, targetPortId = result.targetPortId;\n\n                                          if (targetCell && targetCell.isNode() && targetPortId) {\n                                            targetCell.setPortProp(targetPortId, 'connected', false);\n                                          }\n\n                                          return _context7.abrupt(\"return\", result);\n\n                                        case 6:\n                                        case \"end\":\n                                          return _context7.stop();\n                                      }\n                                    }\n                                  }, _callee7);\n                                }));\n                              };\n\n                              return _context8.abrupt(\"return\", newHandler);\n\n                            case 2:\n                            case \"end\":\n                              return _context8.stop();\n                          }\n                        }\n                      }, _callee8);\n                    }));\n                  }\n                }), hooks.afterGraphInit.registerHook({\n                  name: 'call add edge to replace temp edge',\n                  handler: function handler(handlerArgs) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n                      var commandService, graph;\n                      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                        while (1) {\n                          switch (_context9.prev = _context9.next) {\n                            case 0:\n                              commandService = handlerArgs.commandService, graph = handlerArgs.graph;\n                              graph.on(NsAddEdgeEvent.EVENT_NAME, function (args) {\n                                commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n                                  edgeConfig: args\n                                });\n                                args.edge.remove();\n                              });\n\n                            case 2:\n                            case \"end\":\n                              return _context9.stop();\n                          }\n                        }\n                      }, _callee9);\n                    }));\n                  }\n                }), hooks.graphOptions.registerHook({\n                  name: 'dag-extension-x6-options',\n                  handler: function handler(args) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n                      var props, dagOptions;\n                      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                        while (1) {\n                          switch (_context10.prev = _context10.next) {\n                            case 0:\n                              _context10.next = 2;\n                              return this.propConfig.getConfig();\n\n                            case 2:\n                              props = _context10.sent;\n                              dagOptions = getDagOptions(props);\n                              Object.assign(args, dagOptions);\n\n                            case 5:\n                            case \"end\":\n                              return _context10.stop();\n                          }\n                        }\n                      }, _callee10, this);\n                    }));\n                  }\n                })];\n                toDispose.pushAll(disposables);\n                return _context11.abrupt(\"return\", Disposable.create(function () {}));\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n    };\n    /** 注册Hub */\n\n\n    this.registerHookHub = function (registry) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", registry.registerHookHub(NsGraphStatusCommand.hookKey, new HookHub()));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n    };\n  }\n  /** 扩展Model */\n\n\n  _createClass(DagHooksContribution, [{\n    key: \"registerModel\",\n    value: function registerModel(registry) {\n      var _this7 = this;\n\n      /** node status map */\n      registry.registerModel({\n        id: GRAPH_STATUS_INFO.id,\n        getInitialValue: function getInitialValue() {\n          return {\n            statusMap: new Map(),\n            subscription: new DisposableCollection(),\n            graphStatus: GRAPH_STATUS_INFO.StatusEnum.DEFAULT\n          };\n        },\n        watchChange: function watchChange(self) {\n          return __awaiter(_this7, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n            var _yield$self$getValidV, subscription;\n\n            return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.next = 2;\n                    return self.getValidValue();\n\n                  case 2:\n                    _yield$self$getValidV = _context13.sent;\n                    subscription = _yield$self$getValidV.subscription;\n                    return _context13.abrupt(\"return\", subscription);\n\n                  case 5:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _callee13);\n          }));\n        }\n      });\n    }\n  }]);\n\n  return DagHooksContribution;\n}();\n\n__decorate([ManaSyringe.inject(IGraphCommandFactory), __metadata(\"design:type\", Function)], DagHooksContribution.prototype, \"commandFactory\", void 0);\n\n__decorate([ManaSyringe.inject(IComponentConfig), __metadata(\"design:type\", Object)], DagHooksContribution.prototype, \"propConfig\", void 0);\n\nDagHooksContribution = __decorate([ManaSyringe.singleton({\n  contrib: [IHookContribution, IModelContribution, IGraphCommandContribution]\n})], DagHooksContribution);\nexport { DagHooksContribution };","map":null,"metadata":{},"sourceType":"module"}