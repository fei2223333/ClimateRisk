{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __decorate } from \"tslib\";\nimport { injectable } from 'mana-syringe';\n\nvar GraphMappingHelper = function GraphMappingHelper() {\n  var _this = this;\n\n  _classCallCheck(this, GraphMappingHelper);\n\n  this.groupNodeMap = new Map(); // node 的 mapping\n\n  this.nodeMap = new Map();\n  this.nodeMappingRecord = new Map(); // port 的 mapping\n\n  this.portMap = new Map();\n  this.portMappingRecord = new Map(); // edge 的 mapping\n\n  this.edgeMap = new Map();\n  this.edgeMappingRecord = new Map(); // 区分类型\n\n  this.getNodesByType = function (nodes) {\n    return nodes.reduce(function (acc, node) {\n      if (node.isGroup) {\n        acc.groupNodes.push(node);\n      } else {\n        acc.normalNodes.push(node);\n      }\n\n      return acc;\n    }, {\n      normalNodes: [],\n      groupNodes: []\n    });\n  }; // 增加已有节点\n\n\n  this.getNodePorts = function (node) {\n    if (Array.isArray(node.ports)) {\n      return node.ports;\n    }\n\n    if (node.ports && Array.isArray(node.ports.items)) {\n      return node.ports.items;\n    }\n\n    return [];\n  }; // 增加已有节点\n\n\n  this.addNodes = function (nodes) {\n    nodes.forEach(function (node) {\n      if (node.isGroup) {\n        _this.groupNodeMap.set(node.id, node);\n      } else {\n        var ports = _this.getNodePorts(node);\n\n        _this.nodeMap.set(node.id, node);\n\n        ports.forEach(function (port) {\n          _this.portMap.set(port.id, port);\n        });\n      }\n    });\n  }; // 增加已有edge\n\n\n  this.addEdge = function (edges) {\n    edges.forEach(function (edge) {\n      _this.edgeMap.set(edge.id, edge);\n    });\n  }; // 添加node的映射关系\n\n\n  this.buildNodeMapping = function (currentNode, nextNode) {\n    var currentNodeId = currentNode.id || currentNode.originId;\n    var nextNodeId = nextNode.id;\n\n    _this.nodeMappingRecord.set(currentNodeId, nextNodeId);\n\n    var ports = _this.getNodePorts(currentNode);\n\n    ports.forEach(function (oldPort, index) {\n      var newPort = nextNode.ports[index];\n\n      if (newPort) {\n        _this.portMap.set(newPort.id, newPort);\n\n        _this.portMappingRecord.set(oldPort.id, newPort.id);\n      }\n    });\n  }; // 更新Edge的NodeId和PortId\n\n\n  this.createEdgeBetweenNodes = function (edgeConfig) {\n    var source = edgeConfig.source,\n        sourcePortId = edgeConfig.sourcePortId,\n        target = edgeConfig.target,\n        targetPortId = edgeConfig.targetPortId;\n    return Object.assign(Object.assign({}, edgeConfig), {\n      source: _this.nodeMappingRecord.get(source),\n      target: _this.nodeMappingRecord.get(target),\n      sourcePortId: _this.portMappingRecord.get(sourcePortId),\n      targetPortId: _this.portMappingRecord.get(targetPortId)\n    });\n  }; // 更新GroupNode的NodeId\n\n\n  this.buildGroupRelations = function (groupNode) {\n    var groupChildren = groupNode.groupChildren;\n    var newGroupChildren = groupChildren.map(function (id) {\n      return _this.nodeMappingRecord.get(id);\n    });\n    return Object.assign(Object.assign({}, groupNode), {\n      groupChildren: newGroupChildren\n    });\n  };\n};\n\nGraphMappingHelper = __decorate([injectable()], GraphMappingHelper);\nexport { GraphMappingHelper };","map":null,"metadata":{},"sourceType":"module"}