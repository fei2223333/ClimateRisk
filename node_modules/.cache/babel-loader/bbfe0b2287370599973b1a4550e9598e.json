{"ast":null,"code":"import { offset } from './util';\n\nfunction alignLine(line, type) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var start = line.start,\n      end = line.end;\n  var a;\n  var b;\n  var direction;\n  var coordinate;\n\n  switch (type) {\n    case 'left':\n      coordinate = 'x';\n      a = end;\n      b = start;\n      direction = -1;\n      break;\n\n    case 'right':\n      coordinate = 'x';\n      a = start;\n      b = end;\n      direction = 1;\n      break;\n\n    case 'top':\n      coordinate = 'y';\n      a = end;\n      b = start;\n      direction = -1;\n      break;\n\n    case 'bottom':\n      coordinate = 'y';\n      a = start;\n      b = end;\n      direction = 1;\n      break;\n\n    default:\n      return;\n  }\n\n  if (start[coordinate] < end[coordinate]) {\n    a[coordinate] = b[coordinate];\n  } else {\n    b[coordinate] = a[coordinate];\n  }\n\n  if (Number.isFinite(offset)) {\n    a[coordinate] += direction * offset;\n    b[coordinate] += direction * offset;\n  }\n}\n/**\n * Places the connection point at the edge's endpoint.\n */\n\n\nexport var anchor = function anchor(line, view, magnet, options) {\n  var alignOffset = options.alignOffset,\n      align = options.align;\n\n  if (align) {\n    alignLine(line, align, alignOffset);\n  }\n\n  return offset(line.end, line.start, options.offset);\n};","map":null,"metadata":{},"sourceType":"module"}