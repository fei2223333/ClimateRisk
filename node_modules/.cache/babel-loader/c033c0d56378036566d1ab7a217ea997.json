{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { Node as X6Node } from '@antv/x6';\nimport isBoolean from 'lodash/isBoolean';\nimport { XFlowNodeCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { ReactShape } from '@antv/x6-react-shape';\nexport var NsUpdateNode;\n\n(function (NsUpdateNode) {\n  NsUpdateNode.command = XFlowNodeCommands.UPDATE_NODE;\n  NsUpdateNode.hookKey = 'updateNode';\n  NsUpdateNode.XFlowNodeSetOptions = {\n    overwrite: true\n  };\n  NsUpdateNode.NODE_WIDTH = 200;\n  NsUpdateNode.NODE_HEIGHT = 40;\n})(NsUpdateNode || (NsUpdateNode = {}));\n\nvar UpdateNodeCommand =\n/*#__PURE__*/\n\n/** 节点更新命令 */\nfunction () {\n  function UpdateNodeCommand() {\n    var _this = this;\n\n    _classCallCheck(this, UpdateNodeCommand);\n\n    this.setNodeConfig = function (x6Node, nodeConfig, options) {\n      x6Node.setData(nodeConfig, options);\n      x6Node.setPosition((nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.x) || 0, (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.y) || 0);\n      x6Node.setSize((nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.width) || NsUpdateNode.NODE_WIDTH, (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.height) || NsUpdateNode.NODE_HEIGHT);\n\n      if (isBoolean(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.visible)) {\n        x6Node.setVisible(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.visible);\n      } // SVG 元素更新label\n\n\n      if (!(x6Node instanceof ReactShape) && !!x6Node.getAttrByPath('text/text')) {\n        x6Node.setAttrByPath('text/text', nodeConfig.label);\n      } // 支持nodeAttrs\n\n\n      if (nodeConfig.attrs) {\n        x6Node.setAttrs(nodeConfig.attrs);\n      } // 更新ports\n\n\n      if (Array.isArray(nodeConfig.ports)) {\n        x6Node.setPropByPath('ports/items', nodeConfig.ports, Object.assign({\n          rewrite: true\n        }, options));\n      }\n    };\n\n    this.getNodeConfig = function (x6Node) {\n      var data = x6Node.getData();\n      var position = x6Node.getPosition();\n      var size = x6Node.getSize();\n      return Object.assign(Object.assign(Object.assign({}, data), position), size);\n    };\n\n    this.getNodeCell = function (x6Graph, handlerArgs) {\n      var nodeConfig = handlerArgs.nodeConfig,\n          setNodeConfig = handlerArgs.setNodeConfig;\n      var nodeId = '';\n\n      if (setNodeConfig && setNodeConfig.node && typeof setNodeConfig.node === 'string') {\n        nodeId = setNodeConfig.node;\n      } else if (nodeConfig && nodeConfig.id && typeof nodeConfig.id === 'string') {\n        nodeId = nodeConfig.id;\n      }\n\n      if (nodeId) {\n        return x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(nodeId);\n      }\n\n      if (setNodeConfig && setNodeConfig.node instanceof X6Node) {\n        return setNodeConfig.node;\n      }\n    };\n\n    this.getNextNodeConfig = function (handlerArgs, x6Node) {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var nodeData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(handlerArgs && handlerArgs.setNodeConfig && handlerArgs.setNodeConfig.callback)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                nodeData = this.getNodeConfig(x6Node);\n                return _context.abrupt(\"return\", handlerArgs.setNodeConfig.callback(nodeData));\n\n              case 3:\n                return _context.abrupt(\"return\", handlerArgs.nodeConfig);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    };\n\n    this.execute = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var _this$ctx$getArgs, args, runtimeHook, hooks, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$ctx$getArgs = this.ctx.getArgs(), args = _this$ctx$getArgs.args, runtimeHook = _this$ctx$getArgs.hooks;\n                hooks = this.ctx.getHooks();\n                _context3.next = 4;\n                return hooks.updateNode.call(args, function (handlerArgs) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _handlerArgs$options, options, graph, x6Node, nextNodeConfig;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _handlerArgs$options = handlerArgs.options, options = _handlerArgs$options === void 0 ? NsUpdateNode.XFlowNodeSetOptions : _handlerArgs$options;\n                            _context2.next = 3;\n                            return this.ctx.getX6Graph();\n\n                          case 3:\n                            graph = _context2.sent;\n                            x6Node = this.getNodeCell(graph, handlerArgs);\n                            _context2.next = 7;\n                            return this.getNextNodeConfig(handlerArgs, x6Node);\n\n                          case 7:\n                            nextNodeConfig = _context2.sent;\n                            this.setNodeConfig(x6Node, nextNodeConfig, options);\n                            return _context2.abrupt(\"return\", {\n                              nodeConfig: nextNodeConfig,\n                              nodeCell: x6Node\n                            });\n\n                          case 10:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, runtimeHook);\n\n              case 4:\n                result = _context3.sent;\n                this.ctx.setResult(result);\n                return _context3.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    };\n\n    this.undo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.ctx.undo();\n                return _context4.abrupt(\"return\", this);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    };\n\n    this.redo = function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.ctx.isUndoable) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.execute();\n\n              case 3:\n                return _context5.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    };\n  }\n\n  _createClass(UpdateNodeCommand, [{\n    key: \"init\",\n    value: function init() {\n      this.ctx = this.contextProvider();\n    }\n  }, {\n    key: \"isUndoable\",\n    value: function isUndoable() {\n      return this.ctx.isUndoable();\n    }\n  }]);\n\n  return UpdateNodeCommand;\n}();\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], UpdateNodeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], UpdateNodeCommand.prototype, \"init\", null);\n\nUpdateNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsUpdateNode.command.id\n  }\n})\n/** 节点更新命令 */\n], UpdateNodeCommand);\nexport { UpdateNodeCommand };","map":null,"metadata":{},"sourceType":"module"}