{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport JQuery from 'jquery';\nimport { Dom } from '../util';\nimport { Basecoat } from '../common';\nimport { Util, Config } from '../global';\nexport var View = /*#__PURE__*/function (_Basecoat) {\n  _inherits(View, _Basecoat);\n\n  function View() {\n    var _this;\n\n    _classCallCheck(this, View);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this));\n    _this.cid = Private.uniqueId();\n    View.views[_this.cid] = _assertThisInitialized(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(View, [{\n    key: \"confirmUpdate\",\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    value: function confirmUpdate(flag, options) {\n      return 0;\n    }\n  }, {\n    key: \"$\",\n    value: function $(elem) {\n      return View.$(elem);\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      var elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n      this.$(elem).empty();\n      return this;\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n      this.$(elem).remove();\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n\n      if (elem === this.container) {\n        this.removeEventListeners(document);\n        this.onRemove();\n        delete View.views[this.cid];\n      }\n\n      this.unmount(elem);\n      return this;\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {}\n  }, {\n    key: \"setClass\",\n    value: function setClass(className) {\n      var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      elem.classList.value = Array.isArray(className) ? className.join(' ') : className;\n    }\n  }, {\n    key: \"addClass\",\n    value: function addClass(className) {\n      var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      this.$(elem).addClass(Array.isArray(className) ? className.join(' ') : className);\n      return this;\n    }\n  }, {\n    key: \"removeClass\",\n    value: function removeClass(className) {\n      var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      this.$(elem).removeClass(Array.isArray(className) ? className.join(' ') : className);\n      return this;\n    }\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(style) {\n      var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      this.$(elem).css(style);\n      return this;\n    }\n  }, {\n    key: \"setAttrs\",\n    value: function setAttrs(attrs) {\n      var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n\n      if (attrs != null && elem != null) {\n        if (elem instanceof SVGElement) {\n          Dom.attr(elem, attrs);\n        } else {\n          this.$(elem).attr(attrs);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Returns the value of the specified attribute of `node`.\n     *\n     * If the node does not set a value for attribute, start recursing up\n     * the DOM tree from node to lookup for attribute at the ancestors of\n     * node. If the recursion reaches CellView's root node and attribute\n     * is not found even there, return `null`.\n     */\n\n  }, {\n    key: \"findAttr\",\n    value: function findAttr(attrName) {\n      var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      var current = elem;\n\n      while (current && current.nodeType === 1) {\n        var value = current.getAttribute(attrName);\n\n        if (value != null) {\n          return value;\n        }\n\n        if (current === this.container) {\n          return null;\n        }\n\n        current = current.parentNode;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"find\",\n    value: function find(selector) {\n      var rootElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      var selectors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.selectors;\n      return View.find(selector, rootElem, selectors).elems;\n    }\n  }, {\n    key: \"findOne\",\n    value: function findOne(selector) {\n      var rootElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      var selectors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.selectors;\n      var nodes = this.find(selector, rootElem, selectors);\n      return nodes.length > 0 ? nodes[0] : null;\n    }\n  }, {\n    key: \"findByAttr\",\n    value: function findByAttr(attrName) {\n      var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n      var node = elem;\n\n      while (node && node.getAttribute) {\n        var val = node.getAttribute(attrName);\n\n        if ((val != null || node === this.container) && val !== 'false') {\n          return node;\n        }\n\n        node = node.parentNode;\n      } // If the overall cell has set `magnet === false`, then returns\n      // `null` to announce there is no magnet found for this cell.\n      // This is especially useful to set on cells that have 'ports'.\n      // In this case, only the ports have set `magnet === true` and the\n      // overall element has `magnet === false`.\n\n\n      return null;\n    }\n  }, {\n    key: \"getSelector\",\n    value: function getSelector(elem, prevSelector) {\n      var selector;\n\n      if (elem === this.container) {\n        if (typeof prevSelector === 'string') {\n          selector = \"> \".concat(prevSelector);\n        }\n\n        return selector;\n      }\n\n      if (elem) {\n        var nth = Dom.index(elem) + 1;\n        selector = \"\".concat(elem.tagName.toLowerCase(), \":nth-child(\").concat(nth, \")\");\n\n        if (prevSelector) {\n          selector += \" > \".concat(prevSelector);\n        }\n\n        selector = this.getSelector(elem.parentNode, selector);\n      }\n\n      return selector;\n    }\n  }, {\n    key: \"prefixClassName\",\n    value: function prefixClassName(className) {\n      return Util.prefix(className);\n    }\n  }, {\n    key: \"delegateEvents\",\n    value: function delegateEvents(events, append) {\n      var _this2 = this;\n\n      if (events == null) {\n        return this;\n      }\n\n      if (!append) {\n        this.undelegateEvents();\n      }\n\n      var splitter = /^(\\S+)\\s*(.*)$/;\n      Object.keys(events).forEach(function (key) {\n        var match = key.match(splitter);\n\n        if (match == null) {\n          return;\n        }\n\n        var method = _this2.getEventHandler(events[key]);\n\n        if (typeof method === 'function') {\n          _this2.delegateEvent(match[1], match[2], method);\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"undelegateEvents\",\n    value: function undelegateEvents() {\n      this.$(this.container).off(this.getEventNamespace());\n      return this;\n    }\n  }, {\n    key: \"delegateDocumentEvents\",\n    value: function delegateDocumentEvents(events, data) {\n      this.addEventListeners(document, events, data);\n      return this;\n    }\n  }, {\n    key: \"undelegateDocumentEvents\",\n    value: function undelegateDocumentEvents() {\n      this.removeEventListeners(document);\n      return this;\n    }\n  }, {\n    key: \"delegateEvent\",\n    value: function delegateEvent(eventName, selector, listener) {\n      this.$(this.container).on(eventName + this.getEventNamespace(), selector, listener);\n      return this;\n    }\n  }, {\n    key: \"undelegateEvent\",\n    value: function undelegateEvent(eventName, selector, listener) {\n      var name = eventName + this.getEventNamespace();\n\n      if (selector == null) {\n        this.$(this.container).off(name);\n      } else if (typeof selector === 'string') {\n        this.$(this.container).off(name, selector, listener);\n      } else {\n        this.$(this.container).off(name, selector);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners(elem, events, data) {\n      var _this3 = this;\n\n      if (events == null) {\n        return this;\n      }\n\n      var ns = this.getEventNamespace();\n      var $elem = this.$(elem);\n      Object.keys(events).forEach(function (eventName) {\n        var method = _this3.getEventHandler(events[eventName]);\n\n        if (typeof method === 'function') {\n          $elem.on(eventName + ns, data, method);\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"removeEventListeners\",\n    value: function removeEventListeners(elem) {\n      if (elem != null) {\n        this.$(elem).off(this.getEventNamespace());\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getEventNamespace\",\n    value: function getEventNamespace() {\n      return \".\".concat(Config.prefixCls, \"-event-\").concat(this.cid);\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"getEventHandler\",\n    value: function getEventHandler(handler) {\n      var _this4 = this;\n\n      // eslint-disable-next-line\n      var method;\n\n      if (typeof handler === 'string') {\n        var fn = this[handler];\n\n        if (typeof fn === 'function') {\n          method = function method() {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return fn.call.apply(fn, [_this4].concat(args));\n          };\n        }\n      } else {\n        method = function method() {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          return handler.call.apply(handler, [_this4].concat(args));\n        };\n      }\n\n      return method;\n    }\n  }, {\n    key: \"getEventTarget\",\n    value: function getEventTarget(e) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Touchmove/Touchend event's target is not reflecting the element\n      // under the coordinates as mousemove does.\n      // It holds the element when a touchstart triggered.\n      var target = e.target,\n          type = e.type,\n          _e$clientX = e.clientX,\n          clientX = _e$clientX === void 0 ? 0 : _e$clientX,\n          _e$clientY = e.clientY,\n          clientY = _e$clientY === void 0 ? 0 : _e$clientY;\n\n      if (options.fromPoint || type === 'touchmove' || type === 'touchend') {\n        return document.elementFromPoint(clientX, clientY);\n      }\n\n      return target;\n    }\n  }, {\n    key: \"stopPropagation\",\n    value: function stopPropagation(e) {\n      this.setEventData(e, {\n        propagationStopped: true\n      });\n      return this;\n    }\n  }, {\n    key: \"isPropagationStopped\",\n    value: function isPropagationStopped(e) {\n      return this.getEventData(e).propagationStopped === true;\n    }\n  }, {\n    key: \"getEventData\",\n    value: function getEventData(e) {\n      return this.eventData(e);\n    }\n  }, {\n    key: \"setEventData\",\n    value: function setEventData(e, data) {\n      return this.eventData(e, data);\n    }\n  }, {\n    key: \"eventData\",\n    value: function eventData(e, data) {\n      if (e == null) {\n        throw new TypeError('Event object required');\n      }\n\n      var currentData = e.data;\n      var key = \"__\".concat(this.cid, \"__\"); // get\n\n      if (data == null) {\n        if (currentData == null) {\n          return {};\n        }\n\n        return currentData[key] || {};\n      } // set\n\n\n      if (currentData == null) {\n        currentData = e.data = {};\n      }\n\n      if (currentData[key] == null) {\n        currentData[key] = Object.assign({}, data);\n      } else {\n        currentData[key] = Object.assign(Object.assign({}, currentData[key]), data);\n      }\n\n      return currentData[key];\n    }\n  }, {\n    key: \"normalizeEvent\",\n    value: function normalizeEvent(evt) {\n      return View.normalizeEvent(evt);\n    }\n  }, {\n    key: \"priority\",\n    get: function get() {\n      return 2;\n    }\n  }]);\n\n  return View;\n}(Basecoat);\n\n(function (View) {\n  function $(elem) {\n    return JQuery(elem);\n  }\n\n  View.$ = $;\n\n  function createElement(tagName, isSvgElement) {\n    return isSvgElement ? Dom.createSvgElement(tagName || 'g') : Dom.createElementNS(tagName || 'div');\n  }\n\n  View.createElement = createElement;\n\n  function find(selector, rootElem, selectors) {\n    if (!selector || selector === '.') {\n      return {\n        elems: [rootElem]\n      };\n    }\n\n    if (selectors) {\n      var nodes = selectors[selector];\n\n      if (nodes) {\n        return {\n          elems: Array.isArray(nodes) ? nodes : [nodes]\n        };\n      }\n    }\n\n    if (Config.useCSSSelector) {\n      return {\n        isCSSSelector: true,\n        // elems: Array.prototype.slice.call(rootElem.querySelectorAll(selector)),\n        elems: $(rootElem).find(selector).toArray()\n      };\n    }\n\n    return {\n      elems: []\n    };\n  }\n\n  View.find = find;\n\n  function normalizeEvent(evt) {\n    var normalizedEvent = evt;\n    var originalEvent = evt.originalEvent;\n    var touchEvt = originalEvent && originalEvent.changedTouches && originalEvent.changedTouches[0];\n\n    if (touchEvt) {\n      // eslint-disable-next-line no-restricted-syntax\n      for (var key in evt) {\n        // copy all the properties from the input event that are not\n        // defined on the touch event (functions included).\n        if (touchEvt[key] === undefined) {\n          touchEvt[key] = evt[key];\n        }\n      }\n\n      normalizedEvent = touchEvt;\n    } // IE: evt.target could be set to SVGElementInstance for SVGUseElement\n\n\n    var target = normalizedEvent.target;\n\n    if (target) {\n      var useElement = target.correspondingUseElement;\n\n      if (useElement) {\n        normalizedEvent.target = useElement;\n      }\n    }\n\n    return normalizedEvent;\n  }\n\n  View.normalizeEvent = normalizeEvent;\n})(View || (View = {}));\n\n(function (View) {\n  View.views = {};\n\n  function getView(cid) {\n    return View.views[cid] || null;\n  }\n\n  View.getView = getView;\n})(View || (View = {}));\n\nvar Private;\n\n(function (Private) {\n  var counter = 0;\n\n  function uniqueId() {\n    var id = \"v\".concat(counter);\n    counter += 1;\n    return id;\n  }\n\n  Private.uniqueId = uniqueId;\n})(Private || (Private = {}));","map":null,"metadata":{},"sourceType":"module"}