{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\nimport classnames from 'classnames';\nimport addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { MenubarItem } from './item';\nimport { MenubarContext } from './context';\nexport var Menubar = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Menubar, _React$PureComponent);\n\n  function Menubar(props) {\n    var _this;\n\n    _classCallCheck(this, Menubar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Menubar).call(this, props));\n\n    _this.onDocumentClick = function () {\n      _this.setState({\n        active: false\n      });\n\n      _this.unbindDocEvent();\n    };\n\n    _this.activeMenubar = function () {\n      _this.setState({\n        active: true\n      });\n\n      if (!_this.removeDocClickEvent) {\n        _this.removeDocClickEvent = addEventListener(document.documentElement, 'click', _this.onDocumentClick).remove;\n      }\n    };\n\n    _this.state = {\n      active: false\n    };\n    return _this;\n  }\n\n  _createClass(Menubar, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unbindDocEvent();\n    }\n  }, {\n    key: \"unbindDocEvent\",\n    value: function unbindDocEvent() {\n      if (this.removeDocClickEvent) {\n        this.removeDocClickEvent();\n        this.removeDocClickEvent = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          className = _this$props.className,\n          children = _this$props.children,\n          extra = _this$props.extra;\n      var baseCls = \"\".concat(prefixCls, \"-menubar\");\n      var contextValue = {\n        prefixCls: baseCls,\n        activeMenubar: this.activeMenubar,\n        menubarActived: this.state.active === true\n      };\n      return React.createElement(\"div\", {\n        className: classnames(baseCls, className)\n      }, React.createElement(\"div\", {\n        className: \"\".concat(baseCls, \"-content\")\n      }, React.createElement(\"div\", {\n        className: \"\".concat(baseCls, \"-content-inner\")\n      }, React.createElement(MenubarContext.Provider, {\n        value: contextValue\n      }, children)), extra && React.createElement(\"div\", {\n        className: \"\".concat(baseCls, \"-content-extras\")\n      }, extra)));\n    }\n  }]);\n\n  return Menubar;\n}(React.PureComponent);\n\n(function (Menubar) {\n  Menubar.Item = MenubarItem;\n  Menubar.defaultProps = {\n    prefixCls: 'x6'\n  };\n})(Menubar || (Menubar = {}));","map":null,"metadata":{},"sourceType":"module"}