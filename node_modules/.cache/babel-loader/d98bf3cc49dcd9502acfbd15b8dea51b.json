{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Dom } from '../../util';\nimport { Point } from '../../geometry';\nimport { ToolsView } from '../../view/tool';\n\nvar Arrowhead = /*#__PURE__*/function (_ToolsView$ToolItem) {\n  _inherits(Arrowhead, _ToolsView$ToolItem);\n\n  function Arrowhead() {\n    _classCallCheck(this, Arrowhead);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Arrowhead).apply(this, arguments));\n  }\n\n  _createClass(Arrowhead, [{\n    key: \"init\",\n    value: function init() {\n      if (this.options.attrs) {\n        var _a = this.options.attrs,\n            className = _a.class,\n            attrs = __rest(_a, [\"class\"]);\n\n        this.setAttrs(attrs, this.container);\n\n        if (className) {\n          Dom.addClass(this.container, className);\n        }\n      }\n    }\n  }, {\n    key: \"onRender\",\n    value: function onRender() {\n      Dom.addClass(this.container, this.prefixClassName(\"edge-tool-\".concat(this.type, \"-arrowhead\")));\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var ratio = this.ratio;\n      var edgeView = this.cellView;\n      var tangent = edgeView.getTangentAtRatio(ratio);\n      var position = tangent ? tangent.start : edgeView.getPointAtRatio(ratio);\n      var angle = tangent && tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n\n      if (!position) {\n        return this;\n      }\n\n      var matrix = Dom.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n      Dom.transform(this.container, matrix, {\n        absolute: true\n      });\n      return this;\n    }\n  }, {\n    key: \"onMouseDown\",\n    value: function onMouseDown(evt) {\n      if (this.guard(evt)) {\n        return;\n      }\n\n      evt.stopPropagation();\n      evt.preventDefault();\n      var edgeView = this.cellView;\n\n      if (edgeView.can('arrowheadMovable')) {\n        edgeView.cell.startBatch('move-arrowhead', {\n          ui: true,\n          toolId: this.cid\n        });\n        var coords = this.graph.snapToGrid(evt.clientX, evt.clientY);\n        var data = edgeView.prepareArrowheadDragging(this.type, {\n          x: coords.x,\n          y: coords.y,\n          options: {\n            toolId: this.cid\n          }\n        });\n        this.cellView.setEventData(evt, data);\n        this.delegateDocumentEvents(this.options.documentEvents, evt.data);\n        edgeView.graph.view.undelegateEvents();\n        this.container.style.pointerEvents = 'none';\n      }\n\n      this.focus();\n    }\n  }, {\n    key: \"onMouseMove\",\n    value: function onMouseMove(evt) {\n      var e = this.normalizeEvent(evt);\n      var coords = this.graph.snapToGrid(e.clientX, e.clientY);\n      this.cellView.onMouseMove(e, coords.x, coords.y);\n      this.update();\n    }\n  }, {\n    key: \"onMouseUp\",\n    value: function onMouseUp(evt) {\n      this.undelegateDocumentEvents();\n      var e = this.normalizeEvent(evt);\n      var edgeView = this.cellView;\n      var coords = this.graph.snapToGrid(e.clientX, e.clientY);\n      edgeView.onMouseUp(e, coords.x, coords.y);\n      this.graph.view.delegateEvents();\n      this.blur();\n      this.container.style.pointerEvents = '';\n      edgeView.cell.stopBatch('move-arrowhead', {\n        ui: true,\n        toolId: this.cid\n      });\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.options.type;\n    }\n  }, {\n    key: \"ratio\",\n    get: function get() {\n      return this.options.ratio;\n    }\n  }]);\n\n  return Arrowhead;\n}(ToolsView.ToolItem);\n\n(function (Arrowhead) {\n  Arrowhead.config({\n    tagName: 'path',\n    isSVGElement: true,\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    },\n    documentEvents: {\n      mousemove: 'onMouseMove',\n      touchmove: 'onMouseMove',\n      mouseup: 'onMouseUp',\n      touchend: 'onMouseUp',\n      touchcancel: 'onMouseUp'\n    }\n  });\n})(Arrowhead || (Arrowhead = {}));\n\nexport var SourceArrowhead = Arrowhead.define({\n  name: 'source-arrowhead',\n  type: 'source',\n  ratio: 0,\n  attrs: {\n    d: 'M 10 -8 -10 0 10 8 Z',\n    fill: '#333',\n    stroke: '#fff',\n    'stroke-width': 2,\n    cursor: 'move'\n  }\n});\nexport var TargetArrowhead = Arrowhead.define({\n  name: 'target-arrowhead',\n  type: 'target',\n  ratio: 1,\n  attrs: {\n    d: 'M -10 -8 10 0 -10 8 Z',\n    fill: '#333',\n    stroke: '#fff',\n    'stroke-width': 2,\n    cursor: 'move'\n  }\n});","map":null,"metadata":{},"sourceType":"module"}