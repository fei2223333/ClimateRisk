{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar resolveConflicts = function resolveConflicts(entries, cg) {\n  var _a, _b, _c;\n\n  var mappedEntries = {};\n  entries === null || entries === void 0 ? void 0 : entries.forEach(function (entry, i) {\n    mappedEntries[entry.v] = {\n      i: i,\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v]\n    };\n    var tmp = mappedEntries[entry.v];\n\n    if (entry.barycenter !== undefined) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n  (_a = cg.edges()) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n\n    if (entryV !== undefined && entryW !== undefined) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n  var sourceSet = (_c = (_b = Object.values(mappedEntries)).filter) === null || _c === void 0 ? void 0 : _c.call(_b, function (entry) {\n    return !entry.indegree;\n  });\n  return doResolveConflicts(sourceSet);\n};\n\nvar doResolveConflicts = function doResolveConflicts(sourceSet) {\n  var _a, _b;\n\n  var entries = [];\n\n  var handleIn = function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) return;\n\n      if (uEntry.barycenter === undefined || vEntry.barycenter === undefined || uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  };\n\n  var handleOut = function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry[\"in\"].push(vEntry);\n\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  };\n\n  var _loop_1 = function _loop_1() {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    (_a = entry[\"in\"].reverse()) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n      return handleIn(entry)(e);\n    });\n    (_b = entry.out) === null || _b === void 0 ? void 0 : _b.forEach(function (e) {\n      return handleOut(entry)(e);\n    });\n  };\n\n  while (sourceSet === null || sourceSet === void 0 ? void 0 : sourceSet.length) {\n    _loop_1();\n  }\n\n  var filtered = entries.filter(function (entry) {\n    return !entry.merged;\n  });\n  var keys = [\"vs\", \"i\", \"barycenter\", \"weight\"];\n  return filtered.map(function (entry) {\n    var picked = {};\n    keys === null || keys === void 0 ? void 0 : keys.forEach(function (key) {\n      if (entry[key] === undefined) return;\n      picked[key] = entry[key];\n    });\n    return picked;\n  });\n};\n\nvar mergeEntries = function mergeEntries(target, source) {\n  var _a;\n\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = (_a = source.vs) === null || _a === void 0 ? void 0 : _a.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n};\n\nexports.default = resolveConflicts;","map":null,"metadata":{},"sourceType":"script"}