{"ast":null,"code":"import _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { Syringe } from 'mana-syringe';\nimport { Deferred } from '../../common/deferred';\nimport { MAX_ZOOM, MIN_ZOOM, XFLOW_DEFAULT_EDGE, XFLOW_DEFAULT_NODE, XFLOW_DEFAULT_GROUP_NODE } from '../../constants';\nimport { uuidv4 } from '../../common/uuid';\nimport { XFlowDefaultGroupNode } from './react-group-node';\nimport { XFlowDefaultNode } from './react-node';\nexport var NsGraphConfig;\n\n(function (NsGraphConfig) {\n  NsGraphConfig.CONFIG_TYPE = 'GraphConfig';\n  /** 默认的Node解析函数 */\n\n  NsGraphConfig.defaultNodeTypeParser = function (nodeConfig) {\n    return nodeConfig.renderKey;\n  };\n  /** 构造的Edge解析函数 */\n\n\n  NsGraphConfig.defaultEdgeTypeParser = function (edgeConfig) {\n    return edgeConfig.renderKey;\n  };\n  /** XFlow默认的React组件 */\n\n\n  NsGraphConfig.defaultNodeMapValue = [[XFLOW_DEFAULT_NODE, XFlowDefaultNode], [XFLOW_DEFAULT_GROUP_NODE, XFlowDefaultGroupNode]];\n})(NsGraphConfig || (NsGraphConfig = {}));\n\nexport var GraphConfig =\n/** 构造函数 */\nfunction GraphConfig() {\n  var _this = this;\n\n  _classCallCheck(this, GraphConfig);\n\n  /** 配置类型 */\n  this.CONFIG_TYPE = NsGraphConfig.CONFIG_TYPE;\n  /** 画布的属性 */\n\n  this.x6Options = new Deferred();\n  /** 画布的root节点 */\n\n  this.rootContainer = new Deferred();\n  /** 画布的dom节点 */\n\n  this.graphContainer = new Deferred();\n  /** 自定义节点 */\n\n  this.nodeRender = new Map(NsGraphConfig.defaultNodeMapValue);\n  /** 自定义边 */\n\n  this.edgeRender = new Map();\n  /** 解析node渲染类型的parser */\n\n  this.nodeTypeParser = NsGraphConfig.defaultNodeTypeParser;\n  /** 解析edge渲染类型的parser  */\n\n  this.edgeTypeParser = NsGraphConfig.defaultEdgeTypeParser;\n  /** 自定义事件 */\n\n  this.events = [];\n\n  this.mergeX6Config = function (config) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var current;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.getX6Config();\n\n            case 2:\n              current = _context.sent;\n              return _context.abrupt(\"return\", Object.assign(current, config));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n  };\n\n  this.getX6Config = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var config;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.x6Options.promise;\n\n            case 2:\n              config = _context2.sent;\n              return _context2.abrupt(\"return\", config);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n  };\n\n  this.setX6Config = function (options) {\n    var _a;\n\n    var defaultOptions = _this.getDefaultGraphOptions();\n\n    (_a = _this.x6Options) === null || _a === void 0 ? void 0 : _a.resolve(Object.assign(Object.assign({}, defaultOptions), options));\n  };\n\n  this.setAppContainer = function (ele) {\n    _this.appContainer = ele;\n  };\n\n  this.setRootContainer = function (ele) {\n    ele && (_this === null || _this === void 0 ? void 0 : _this.rootContainer.resolve(ele));\n  };\n\n  this.setGraphContainer = function (ele) {\n    var _a;\n\n    ele && ((_a = _this.graphContainer) === null || _a === void 0 ? void 0 : _a.resolve(ele));\n  };\n\n  this.setEvents = function (events) {\n    _this.events = events;\n  };\n\n  this.setDefaultNodeRender = function (component) {\n    _this.nodeRender.set(XFLOW_DEFAULT_NODE, component);\n  };\n\n  this.setDefaultEdgeRender = function (component) {\n    _this.edgeRender.set(XFLOW_DEFAULT_EDGE, component);\n  };\n\n  this.setNodeRender = function (renderKey, component) {\n    _this.nodeRender.set(renderKey, component);\n  };\n\n  this.setEdgeRender = function (renderKey, component) {\n    _this.edgeRender.set(renderKey, component);\n  };\n  /** 设置解析node render key的 parser */\n\n\n  this.setNodeTypeParser = function (parser) {\n    _this.nodeTypeParser = parser;\n  };\n  /** 设置解析edge render key的 parser */\n\n\n  this.setEdgeTypeParser = function (parser) {\n    _this.edgeTypeParser = parser;\n  };\n  /** 获取Graph参数 */\n\n\n  this.getConfig = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _yield$Promise$all, _yield$Promise$all2, rootContainer, graphContainer, x6Options, graphConfig;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Promise.all([this.rootContainer.promise, this.graphContainer.promise, this.x6Options.promise]);\n\n            case 2:\n              _yield$Promise$all = _context3.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n              rootContainer = _yield$Promise$all2[0];\n              graphContainer = _yield$Promise$all2[1];\n              x6Options = _yield$Promise$all2[2];\n              graphConfig = {\n                xflowInstanceId: this.xflowInstanceId,\n                graphId: this.graphId,\n                nodeViewId: this.graphId,\n                appContainer: this.appContainer,\n                rootContainer: rootContainer,\n                graphContainer: graphContainer,\n                x6Options: x6Options,\n                events: this.events,\n                nodeRender: this.nodeRender,\n                edgeRender: this.edgeRender,\n                nodeTypeParser: this.nodeTypeParser,\n                edgeTypeParser: this.edgeTypeParser\n              };\n              return _context3.abrupt(\"return\", graphConfig);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n  };\n\n  this.getDefaultGraphOptions = function () {\n    var defaultOptions = {\n      // 节点是否可旋转\n      rotating: false,\n      // 节点是否可调整大小\n      resizing: false,\n      // 节点连线规则配置（详细文档：https://X6.antv.vision/zh/docs/api/graph/interaction#connecting）\n      connecting: {\n        snap: true,\n        dangling: false,\n        highlight: false,\n        connectionPoint: 'rect',\n        router: {\n          name: 'er'\n        },\n        connector: {\n          name: 'rounded',\n          args: {\n            radius: 15\n          }\n        }\n      },\n      // 画布背景，支持颜色/图片/水印等（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/background）\n      background: {},\n      // 网格配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/grid）\n      grid: {\n        visible: true\n      },\n      // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n      selecting: {\n        strict: true,\n        enabled: true,\n        multiple: true,\n        selectCellOnMoved: true,\n        showNodeSelectionBox: false,\n        // 框选可以选中edge\n        rubberEdge: true,\n        // 框选可以选中node\n        rubberNode: true,\n        movable: true\n      },\n      // 对齐线配置，辅助移动节点排版（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/snapline）\n      snapline: {\n        enabled: false\n      },\n      // 撤销/重做能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/history）\n      history: {\n        enabled: false\n      },\n      // 剪切板，支持跨画布的复制/粘贴（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/clipboard）\n      clipboard: {\n        enabled: true,\n        useLocalStorage: true\n      },\n      // 使画布具备滚动、平移、居中、缩放等能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/scroller）\n      scroller: {\n        enabled: false\n      },\n      // 滚轮缩放 （详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/mousewheel）\n      mousewheel: {\n        enabled: true,\n        minScale: MIN_ZOOM,\n        maxScale: MAX_ZOOM,\n        factor: 1.1,\n        modifiers: ['ctrl', 'meta']\n      },\n\n      /** 普通画布, 支持拖拽平移 */\n      panning: {\n        enabled: true\n      },\n\n      /** 缩放参数 */\n      scaling: {\n        min: MIN_ZOOM,\n        max: MAX_ZOOM\n      },\n\n      /** keyboad */\n      keyboard: {\n        enabled: true\n      },\n\n      /** 定制节点和边的交互行为 */\n      interacting: {\n        /** 节点默认可以被移动 */\n        nodeMovable: true,\n\n        /** 边上标签默认不可以被移动 */\n        edgeLabelMovable: false\n      },\n      async: false\n    };\n    return defaultOptions;\n  };\n\n  this.dispose = function () {\n    // TODO: 统一看下defer的销毁\n    _this.rootContainer = new Deferred();\n    _this.graphContainer = new Deferred();\n    _this.x6Options = new Deferred();\n  };\n\n  this.graphId = uuidv4();\n};\nexport var IGraphOptionProvider = Symbol('IGraphOptionProvider');\nexport var registerGraphConfig = function registerGraphConfig(register, graphConfig) {\n  register(IGraphOptionProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: function useDynamic() {\n      return {\n        getOptions: function getOptions() {\n          return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    return _context4.abrupt(\"return\", graphConfig.getConfig());\n\n                  case 1:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n        }\n      };\n    }\n  });\n};\nexport var createGraphConfig = function createGraphConfig(addOptions) {\n  return function (props) {\n    /** bridge config and props */\n    var propsContainer = React.useMemo(function () {\n      return {\n        getValue: function getValue() {\n          return {};\n        }\n      };\n    }, []);\n\n    propsContainer.getValue = function () {\n      return props;\n    };\n\n    var graphConfig = React.useMemo(function () {\n      var config = new GraphConfig();\n      addOptions(config, propsContainer);\n      return config;\n    }, [propsContainer]);\n    return graphConfig;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}