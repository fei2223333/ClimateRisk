{"ast":null,"code":"import _toConsumableArray from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport util from '../util';\nimport { alignCoordinates, balance, findSmallestWidthAlignment, findType1Conflicts, findType2Conflicts, horizontalCompaction, verticalAlignment } from './bk';\n\nvar positionY = function positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  layering === null || layering === void 0 ? void 0 : layering.forEach(function (layer) {\n    var heights = layer.map(function (v) {\n      return g.node(v).height;\n    });\n    var maxHeight = Math.max.apply(Math, _toConsumableArray(heights));\n    layer === null || layer === void 0 ? void 0 : layer.forEach(function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n};\n\nvar positionX = function positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = Object.assign(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n  var xss = {};\n  var adjustedLayering;\n  [\"u\", \"d\"].forEach(function (vert) {\n    // @ts-ignore\n    adjustedLayering = vert === \"u\" ? layering : Object.values(layering).reverse();\n    [\"l\", \"r\"].forEach(function (horiz) {\n      if (horiz === \"r\") {\n        // @ts-ignore\n        adjustedLayering = adjustedLayering.map(function (inner) {\n          return Object.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === \"r\");\n\n      if (horiz === \"r\") {\n        Object.keys(xs).forEach(function (xsKey) {\n          return xs[xsKey] = -xs[xsKey];\n        });\n      }\n\n      xss[vert + horiz] = xs;\n    });\n  });\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  smallestWidth && alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n};\n\nvar position = function position(g) {\n  var _a; // tslint:disable-next-line\n\n\n  g = util.asNonCompoundGraph(g);\n  positionY(g);\n  var xs = positionX(g);\n  (_a = Object.keys(xs)) === null || _a === void 0 ? void 0 : _a.forEach(function (key) {\n    g.node(key).x = xs[key];\n  });\n};\n\nexport default position;","map":null,"metadata":{},"sourceType":"module"}