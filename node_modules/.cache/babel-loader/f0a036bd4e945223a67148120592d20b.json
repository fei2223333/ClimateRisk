{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Matrix as MLMatrix, SingularValueDecomposition } from 'ml-matrix';\n\nvar MDS = /*#__PURE__*/function () {\n  function MDS(params) {\n    _classCallCheck(this, MDS);\n\n    this.distances = params.distances;\n    this.dimension = params.dimension || 2;\n    this.linkDistance = params.linkDistance;\n  }\n\n  _createClass(MDS, [{\n    key: \"layout\",\n    value: function layout() {\n      var self = this;\n      var dimension = self.dimension,\n          distances = self.distances,\n          linkDistance = self.linkDistance;\n\n      try {\n        // square distances\n        var M = MLMatrix.mul(MLMatrix.pow(distances, 2), -0.5); // double centre the rows/columns\n\n        var rowMeans = M.mean('row');\n        var colMeans = M.mean('column');\n        var totalMean = M.mean();\n        M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans); // take the SVD of the double centred matrix, and return the\n        // points from it\n\n        var ret = new SingularValueDecomposition(M);\n        var eigenValues = MLMatrix.sqrt(ret.diagonalMatrix).diagonal();\n        return ret.leftSingularVectors.toJSON().map(function (row) {\n          return MLMatrix.mul([row], [eigenValues]).toJSON()[0].splice(0, dimension);\n        });\n      } catch (_a) {\n        var res = [];\n\n        for (var i = 0; i < distances.length; i++) {\n          var x = Math.random() * linkDistance;\n          var y = Math.random() * linkDistance;\n          res.push([x, y]);\n        }\n\n        return res;\n      }\n    }\n  }]);\n\n  return MDS;\n}();\n\nexport { MDS as default };","map":null,"metadata":{},"sourceType":"module"}