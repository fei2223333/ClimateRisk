{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/Spine/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { singleton, inject } from 'mana-syringe';\nimport { IGraphOptionProvider } from '../../xflow-main/graph/config';\nimport { XFlowGraphCommands } from '../../command-contributions/constant';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { IHookContribution } from '../interface';\nimport { throttle } from '../../common/utils';\nexport var NsGraphEventPlugin;\n\n(function (NsGraphEventPlugin) {\n  NsGraphEventPlugin.pluginId = 'base-graph-events';\n})(NsGraphEventPlugin || (NsGraphEventPlugin = {}));\n/**\n * 内置的hook contribution\n * 处理graph config 的 evnets props\n */\n\n\nvar GraphEventContribution = function GraphEventContribution() {\n  var _this = this;\n\n  _classCallCheck(this, GraphEventContribution);\n\n  this.toDispose = new DisposableCollection();\n\n  this.registerHookHub = function () {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Disposable.create(function () {}));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  };\n  /** 扩展Hook */\n\n\n  this.registerHook = function (hooks) {\n    return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var _this2 = this;\n\n      var toDispose, disposables;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              toDispose = new DisposableCollection();\n              disposables = [\n              /** 在graph启动前, 注册外部事件到x6Events的hooks上*/\n              hooks.x6Events.registerHook({\n                name: NsGraphEventPlugin.pluginId,\n                handler: function handler(args) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _yield$this$graphOpti, events;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return this.graphOptions.getOptions();\n\n                          case 2:\n                            _yield$this$graphOpti = _context2.sent;\n                            events = _yield$this$graphOpti.events;\n                            events.forEach(function (event) {\n                              args.push(event);\n                            });\n\n                          case 5:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }\n              }),\n              /** 在graph init后, 外部事件 */\n              hooks.afterGraphInit.registerHook({\n                name: NsGraphEventPlugin.pluginId,\n                handler: function handler(args) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                    var _this3 = this;\n\n                    var commandService, modelService, graph, todo;\n                    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            commandService = args.commandService, modelService = args.modelService, graph = args.graph;\n                            /** 注册事件 */\n\n                            _context4.next = 3;\n                            return hooks.x6Events.call([], function (mergedEvents) {\n                              return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                  while (1) {\n                                    switch (_context3.prev = _context3.next) {\n                                      case 0:\n                                        return _context3.abrupt(\"return\", mergedEvents.map(function (e) {\n                                          var handler = function handler(handlerArgs) {\n                                            e.callback(handlerArgs, commandService, modelService, graph);\n                                          };\n\n                                          graph.on(e.eventName, handler);\n                                          return {\n                                            dispose: function dispose() {\n                                              graph.off(e.eventName, handler);\n                                            }\n                                          };\n                                        }));\n\n                                      case 1:\n                                      case \"end\":\n                                        return _context3.stop();\n                                    }\n                                  }\n                                }, _callee3);\n                              }));\n                            });\n\n                          case 3:\n                            todo = _context4.sent;\n                            toDispose.pushAll(todo);\n\n                          case 5:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n                }\n              }),\n              /** 监听window的resize事件，实现自动resize */\n              hooks.afterGraphInit.registerHook({\n                name: 'add auto resize event',\n                handler: function handler(args) {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n                    var commandService, options, graph, resizeHandler, rootContainer, resizeObserver;\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            commandService = args.commandService, options = args.options, graph = args.graph;\n                            resizeHandler = throttle(function () {\n                              commandService.executeCommand(XFlowGraphCommands.GRAPH_RESIZE.id, {});\n                            });\n                            window.addEventListener('resize', resizeHandler);\n                            rootContainer = options.rootContainer;\n                            resizeObserver = new ResizeObserver(function () {\n                              return graph.resize(rootContainer.clientWidth);\n                            });\n                            rootContainer && resizeObserver.observe(rootContainer);\n                            toDispose.push(Disposable.create(function () {\n                              window.removeEventListener('resize', resizeHandler);\n                            }));\n\n                          case 7:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n                }\n              }),\n              /** 在graph停止时 取消外部事件 */\n              hooks.beforeGraphDestroy.registerHook({\n                name: NsGraphEventPlugin.pluginId,\n                handler: function handler() {\n                  return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            toDispose.dispose();\n\n                          case 1:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n                }\n              })];\n              toDispose.pushAll(disposables);\n              return _context7.abrupt(\"return\", toDispose);\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n  };\n};\n\n__decorate([inject(IGraphOptionProvider), __metadata(\"design:type\", Object)], GraphEventContribution.prototype, \"graphOptions\", void 0);\n\nGraphEventContribution = __decorate([singleton({\n  contrib: IHookContribution\n})], GraphEventContribution);\nexport { GraphEventContribution };","map":null,"metadata":{},"sourceType":"module"}