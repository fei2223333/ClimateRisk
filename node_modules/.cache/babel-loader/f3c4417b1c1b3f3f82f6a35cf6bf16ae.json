{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { __rest } from \"tslib\";\nimport React, { useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Empty, Form, Tabs } from 'antd';\nimport { xflowDefaultControls, makeControlMap, getControlFromMap } from './control-map/index';\nexport { FormItemWrapper } from './common/form-item-wrapper';\nvar TabPane = Tabs.TabPane;\nexport var SchemaForm = function SchemaForm(props) {\n  var _classNames;\n\n  var _a;\n\n  var schema = props.schema,\n      formInstance = props.form,\n      className = props.className,\n      triggerUpdate = props.triggerUpdate,\n      defaultControlRender = props.defaultControlRender,\n      afterUpdatingCb = props.afterUpdatingCb,\n      controlMapfromParent = props.controlMap,\n      otherProps = __rest(props, [\"schema\", \"form\", \"className\", \"triggerUpdate\", \"defaultControlRender\", \"afterUpdatingCb\", \"controlMap\"]);\n\n  var tabs = schema.tabs;\n\n  var _Form$useForm = Form.useForm(formInstance),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var controlMap = React.useMemo(function () {\n    return props.controlMap ? props.controlMap : makeControlMap(xflowDefaultControls);\n  }, [props.controlMap]);\n  var innerTriggerUpdate = useCallback(function (values) {\n    if (typeof triggerUpdate === 'function') {\n      triggerUpdate(form, values);\n    }\n  }, [form, triggerUpdate]);\n  /** 初次挂载时设置一次值以激活首次联动 */\n\n  useEffect(function () {\n    form.setFieldsValue({});\n  }, [form]);\n  /** 切换标签时激活联动 */\n\n  var onClickTab = useCallback(function () {\n    requestAnimationFrame(function () {\n      form.setFieldsValue({});\n    });\n  }, [form]);\n  return React.createElement(Form, Object.assign({\n    size: \"small\",\n    form: form,\n    layout: \"vertical\",\n    className: classNames('xflow-json-form', className)\n  }, otherProps), React.createElement(Tabs, {\n    type: \"card\",\n    defaultActiveKey: (_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.name,\n    className: classNames((_classNames = {}, _defineProperty(_classNames, 'tabs', true), _defineProperty(_classNames, 'xTab', true), _defineProperty(_classNames, 'singleTab', (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 1), _defineProperty(_classNames, 'coupleTab', (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 2), _defineProperty(_classNames, 'ternateTab', (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 3), _classNames)),\n    onTabClick: onClickTab\n  }, tabs.map(function (tab) {\n    var tabName = tab.name,\n        groups = tab.groups;\n    return React.createElement(TabPane, {\n      key: tabName,\n      tab: tabName\n    }, groups.length === 0 && React.createElement(Empty, {\n      style: {\n        padding: '24px 0'\n      }\n    }), groups.length > 0 && groups.map(function (group) {\n      var _group$controls = group.controls,\n          groupControls = _group$controls === void 0 ? [] : _group$controls;\n\n      if (groupControls.length === 0) {\n        return React.createElement(Empty, {\n          style: {\n            padding: '24px 0'\n          }\n        });\n      }\n\n      return groupControls.map(function (control) {\n        var shape = control.shape,\n            controlName = control.name;\n        var ControlComponent = getControlFromMap(shape, controlMap, defaultControlRender);\n\n        if (!ControlComponent) {\n          console.error('未找到对应的控件:', shape);\n          return null;\n        }\n\n        return React.createElement(ControlComponent, {\n          key: controlName,\n          form: form,\n          controlSchema: control,\n          triggerUpdate: innerTriggerUpdate,\n          afterUpdatingCb: afterUpdatingCb\n        });\n      });\n    }));\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}