{"ast":null,"code":"import _defineProperty from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport { Spin } from 'antd';\nimport classnames from 'classnames';\nimport { usePositionStyle } from '@antv/xflow-core'; // component\n\nimport { Toolbar } from '@antv/x6-react-components';\nimport { ToolbarGroup } from './toolbar-group';\nimport { useToolbarModel } from '../service';\nimport classNames from 'classnames';\n/** render toolbar */\n\nvar ToolbarRender = function ToolbarRender(props) {\n  var idx = props.idx,\n      groups = props.groups,\n      layout = props.layout,\n      toolbarOptions = props.toolbarOptions;\n  var _toolbarOptions$hover = toolbarOptions.hoverEffect,\n      hoverEffect = _toolbarOptions$hover === void 0 ? true : _toolbarOptions$hover;\n  return React.createElement(Toolbar, {\n    hoverEffect: hoverEffect\n  }, groups.map(function (g, gIdx) {\n    var key = idx + gIdx;\n    return React.createElement(ToolbarGroup, {\n      key: key,\n      group: g,\n      layout: layout\n    });\n  }));\n};\n\nvar InnerRender = function InnerRender(props) {\n  var _classnames;\n\n  var _useToolbarModel = useToolbarModel(props),\n      isModelReady = _useToolbarModel.isModelReady,\n      state = _useToolbarModel.state;\n\n  var positionStyle = usePositionStyle(props.position);\n  var _state$mainGroups = state.mainGroups,\n      mainGroups = _state$mainGroups === void 0 ? [] : _state$mainGroups,\n      _state$extraGroups = state.extraGroups,\n      extraGroups = _state$extraGroups === void 0 ? [] : _state$extraGroups,\n      layout = state.layout,\n      customRender = state.customRender;\n  var containerClz = classNames(props.className, layout, 'xflow-toolbar');\n  var clz = classnames((_classnames = {}, _defineProperty(_classnames, layout, true), _defineProperty(_classnames, 'xflow-toolbar-root', true), _classnames)); // loading\n\n  if (!isModelReady) {\n    return React.createElement(\"div\", {\n      className: containerClz,\n      style: Object.assign(Object.assign({}, positionStyle), props.style)\n    }, React.createElement(Spin, {\n      spinning: true,\n      size: \"small\"\n    }));\n  } // render custom component\n\n\n  if (customRender) {\n    return React.createElement(\"div\", {\n      className: containerClz,\n      style: Object.assign(Object.assign({}, positionStyle), props.style)\n    }, React.createElement(customRender, {\n      config: state\n    }));\n  } // render toolbars\n\n\n  return React.createElement(\"div\", {\n    className: containerClz,\n    style: Object.assign(Object.assign({}, positionStyle), props.style)\n  }, React.createElement(\"div\", {\n    className: clz\n  }, mainGroups.length > 0 && React.createElement(ToolbarRender, {\n    idx: \"mainGroups\",\n    groups: mainGroups,\n    layout: layout,\n    toolbarOptions: state\n  }), extraGroups.length > 0 && React.createElement(ToolbarRender, {\n    idx: \"extraGroups\",\n    groups: extraGroups,\n    layout: layout,\n    toolbarOptions: state\n  })));\n};\n/** connect 数据 */\n\n\nexport var XFlowToolbar = React.memo(InnerRender);","map":null,"metadata":{},"sourceType":"module"}