{"ast":null,"code":"import _classCallCheck from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shuge/Documents/project/rekit-project/ServiceWebsite/Spine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport JQuery from 'jquery';\nimport { DataUri, NumberExt, FunctionExt, Vector } from '../util';\nimport { Rectangle } from '../geometry';\nimport { Base } from './base';\nexport var FormatManager = /*#__PURE__*/function (_Base) {\n  _inherits(FormatManager, _Base);\n\n  function FormatManager() {\n    _classCallCheck(this, FormatManager);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(FormatManager).apply(this, arguments));\n  }\n\n  _createClass(FormatManager, [{\n    key: \"toSVG\",\n    value: function toSVG(callback) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.graph.trigger('before:export', options);\n      var rawSVG = this.view.svg;\n      var vSVG = Vector.create(rawSVG).clone();\n      var clonedSVG = vSVG.node;\n      var vStage = vSVG.findOne(\".\".concat(this.view.prefixClassName('graph-svg-stage')));\n      var viewBox = options.viewBox || this.graph.graphToLocal(this.graph.getContentBBox());\n      var dimension = options.preserveDimensions;\n\n      if (dimension) {\n        var size = typeof dimension === 'boolean' ? viewBox : dimension;\n        vSVG.attr({\n          width: size.width,\n          height: size.height\n        });\n      }\n\n      vSVG.removeAttribute('style').attr('viewBox', [viewBox.x, viewBox.y, viewBox.width, viewBox.height].join(' '));\n      vStage.removeAttribute('transform'); // Stores all the CSS declarations from external stylesheets to the\n      // `style` attribute of the SVG document nodes.\n      // This is achieved in three steps.\n      // -----------------------------------\n      // 1. Disabling all the stylesheets in the page and therefore collecting\n      //    only default style values. This, together with the step 2, makes it\n      //    possible to discard default CSS property values and store only those\n      //    that differ.\n      //\n      // 2. Enabling back all the stylesheets in the page and collecting styles\n      //    that differ from the default values.\n      //\n      // 3. Applying the difference between default values and the ones set by\n      //    custom stylesheets onto the `style` attribute of each of the nodes\n      //    in SVG.\n\n      if (options.copyStyles !== false) {\n        var _document = rawSVG.ownerDocument;\n        var raws = Array.from(rawSVG.querySelectorAll('*'));\n        var clones = Array.from(clonedSVG.querySelectorAll('*'));\n        var styleSheetCount = _document.styleSheets.length;\n        var styleSheetsCopy = [];\n\n        for (var k = styleSheetCount - 1; k >= 0; k -= 1) {\n          // There is a bug (bugSS) in Chrome 14 and Safari. When you set\n          // `stylesheet.disable = true` it will also remove it from\n          // `document.styleSheets`. So we need to store all stylesheets before\n          // we disable them. Later on we put them back to `document.styleSheets`\n          // if needed.\n          // See the bug `https://code.google.com/p/chromium/issues/detail?id=88310`.\n          styleSheetsCopy[k] = _document.styleSheets[k];\n          _document.styleSheets[k].disabled = true;\n        }\n\n        var defaultComputedStyles = {};\n        raws.forEach(function (elem, index) {\n          var computedStyle = window.getComputedStyle(elem, null); // We're making a deep copy of the `computedStyle` so that it's not affected\n          // by that next step when all the stylesheets are re-enabled again.\n\n          var defaultComputedStyle = {};\n          Object.keys(computedStyle).forEach(function (property) {\n            defaultComputedStyle[property] = computedStyle.getPropertyValue(property);\n          });\n          defaultComputedStyles[index] = defaultComputedStyle;\n        }); // Copy all stylesheets back\n\n        if (styleSheetCount !== _document.styleSheets.length) {\n          styleSheetsCopy.forEach(function (copy, index) {\n            _document.styleSheets[index] = copy;\n          });\n        }\n\n        for (var i = 0; i < styleSheetCount; i += 1) {\n          _document.styleSheets[i].disabled = false;\n        }\n\n        var customStyles = {};\n        raws.forEach(function (elem, index) {\n          var computedStyle = window.getComputedStyle(elem, null);\n          var defaultComputedStyle = defaultComputedStyles[index];\n          var customStyle = {};\n          Object.keys(computedStyle).forEach(function (property) {\n            if (computedStyle.getPropertyValue(property) !== defaultComputedStyle[property]) {\n              customStyle[property] = computedStyle.getPropertyValue(property);\n            }\n          });\n          customStyles[index] = customStyle;\n        });\n        clones.forEach(function (elem, index) {\n          JQuery(elem).css(customStyles[index]);\n        });\n      }\n\n      var stylesheet = options.stylesheet;\n\n      if (typeof stylesheet === 'string') {\n        var cDATASection = rawSVG.ownerDocument.implementation.createDocument(null, 'xml', null).createCDATASection(stylesheet);\n        vSVG.prepend(Vector.create('style', {\n          type: 'text/css'\n        }, [cDATASection]));\n      }\n\n      var format = function format() {\n        var beforeSerialize = options.beforeSerialize;\n\n        if (typeof beforeSerialize === 'function') {\n          var ret = FunctionExt.call(beforeSerialize, _this.graph, clonedSVG);\n\n          if (ret instanceof SVGSVGElement) {\n            clonedSVG = ret;\n          }\n        }\n\n        var dataUri = new XMLSerializer().serializeToString(clonedSVG).replace(/&nbsp;/g, \"\\xA0\");\n\n        _this.graph.trigger('after:export', options);\n\n        callback(dataUri);\n      };\n\n      if (options.serializeImages) {\n        var deferrals = vSVG.find('image').map(function (vImage) {\n          return new Promise(function (resolve) {\n            var url = vImage.attr('xlink:href') || vImage.attr('href');\n            DataUri.imageToDataUri(url, function (err, dataUri) {\n              if (!err && dataUri) {\n                vImage.attr('xlink:href', dataUri);\n              }\n\n              resolve();\n            });\n          });\n        });\n        Promise.all(deferrals).then(format);\n      } else {\n        format();\n      }\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL(callback, options) {\n      var viewBox = options.viewBox || this.graph.getContentBBox();\n      var padding = NumberExt.normalizeSides(options.padding);\n\n      if (options.width && options.height) {\n        if (padding.left + padding.right >= options.width) {\n          padding.left = padding.right = 0;\n        }\n\n        if (padding.top + padding.bottom >= options.height) {\n          padding.top = padding.bottom = 0;\n        }\n      }\n\n      var expanding = new Rectangle(-padding.left, -padding.top, padding.left + padding.right, padding.top + padding.bottom);\n\n      if (options.width && options.height) {\n        var width = viewBox.width + padding.left + padding.right;\n        var height = viewBox.height + padding.top + padding.bottom;\n        expanding.scale(width / options.width, height / options.height);\n      }\n\n      viewBox = Rectangle.create(viewBox).moveAndExpand(expanding);\n      var rawSize = typeof options.width === 'number' && typeof options.height === 'number' ? {\n        width: options.width,\n        height: options.height\n      } : viewBox;\n      var scale = options.ratio ? parseFloat(options.ratio) : 1;\n\n      if (!Number.isFinite(scale) || scale === 0) {\n        scale = 1;\n      }\n\n      var size = {\n        width: Math.max(Math.round(rawSize.width * scale), 1),\n        height: Math.max(Math.round(rawSize.height * scale), 1)\n      };\n      {\n        var imgDataCanvas = document.createElement('canvas');\n        var context2D = imgDataCanvas.getContext('2d');\n        imgDataCanvas.width = size.width;\n        imgDataCanvas.height = size.height;\n        var x = size.width - 1;\n        var y = size.height - 1;\n        context2D.fillStyle = 'rgb(1,1,1)';\n        context2D.fillRect(x, y, 1, 1);\n        var data = context2D.getImageData(x, y, 1, 1).data;\n\n        if (data[0] !== 1 || data[1] !== 1 || data[2] !== 1) {\n          throw new Error('size exceeded');\n        }\n      }\n      var img = new Image();\n\n      img.onload = function () {\n        var canvas = document.createElement('canvas');\n        canvas.width = size.width;\n        canvas.height = size.height;\n        var context = canvas.getContext('2d');\n        context.fillStyle = options.backgroundColor || 'white';\n        context.fillRect(0, 0, size.width, size.height);\n\n        try {\n          context.drawImage(img, 0, 0, size.width, size.height);\n          var dataUri = canvas.toDataURL(options.type, options.quality);\n          callback(dataUri);\n        } catch (error) {// pass\n        }\n      };\n\n      this.toSVG(function (dataUri) {\n        img.src = \"data:image/svg+xml,\".concat(encodeURIComponent(dataUri));\n      }, Object.assign(Object.assign({}, options), {\n        viewBox: viewBox,\n        serializeImages: true,\n        preserveDimensions: Object.assign({}, size)\n      }));\n    }\n  }, {\n    key: \"toPNG\",\n    value: function toPNG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.toDataURL(callback, Object.assign(Object.assign({}, options), {\n        type: 'image/png'\n      }));\n    }\n  }, {\n    key: \"toJPEG\",\n    value: function toJPEG(callback) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      this.toDataURL(callback, Object.assign(Object.assign({}, options), {\n        type: 'image/jpeg'\n      }));\n    }\n  }]);\n\n  return FormatManager;\n}(Base);","map":null,"metadata":{},"sourceType":"module"}